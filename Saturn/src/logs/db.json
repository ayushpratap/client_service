25-06-2019 20:02:12 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
25-06-2019 20:02:13 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 376,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
25-06-2019 20:11:43 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
25-06-2019 20:11:43 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 28,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
25-06-2019 20:12:54 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
25-06-2019 20:18:41 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
25-06-2019 20:18:41 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
26-06-2019 18:52:05 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
26-06-2019 18:52:06 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 78,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
26-06-2019 18:54:02 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
26-06-2019 18:54:02 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 10,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
27-06-2019 15:57:45 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
27-06-2019 15:57:45 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 270,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
27-06-2019 16:30:36 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
27-06-2019 16:30:36 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 8,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
27-06-2019 16:46:03 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
27-06-2019 16:46:03 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 9,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
27-06-2019 16:48:37 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
27-06-2019 16:48:37 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 30,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
27-06-2019 16:53:21 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
27-06-2019 16:53:21 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 12,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
27-06-2019 17:28:15 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
27-06-2019 17:40:21 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
27-06-2019 17:40:21 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 19,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
27-06-2019 17:41:01 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
27-06-2019 17:41:27 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
27-06-2019 17:41:27 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 9,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
27-06-2019 17:41:48 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
27-06-2019 17:44:08 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
27-06-2019 17:45:12 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
27-06-2019 17:45:12 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 24,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
27-06-2019 17:47:18 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
27-06-2019 17:53:03 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
27-06-2019 23:49:26 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
27-06-2019 23:49:26 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 8,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
27-06-2019 23:50:37 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
27-06-2019 23:50:37 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 9,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
27-06-2019 23:52:07 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
27-06-2019 23:52:07 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 21,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
28-06-2019 00:02:47 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
28-06-2019 00:02:47 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 9,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
28-06-2019 00:07:53 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
28-06-2019 00:07:54 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 14,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
28-06-2019 00:09:23 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
28-06-2019 00:09:23 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
28-06-2019 00:10:25 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
28-06-2019 00:10:25 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 15,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
28-06-2019 00:11:44 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
28-06-2019 00:11:44 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 12,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
28-06-2019 00:14:51 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
28-06-2019 00:21:00 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
28-06-2019 00:21:00 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 511,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
28-06-2019 00:21:55 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
28-06-2019 00:24:44 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
28-06-2019 00:27:00 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
28-06-2019 00:27:00 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 10,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
28-06-2019 00:29:36 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
28-06-2019 00:29:36 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 25,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
28-06-2019 00:31:00 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
28-06-2019 00:31:00 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 11,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
28-06-2019 00:50:12 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
28-06-2019 00:50:12 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 9,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
28-06-2019 02:44:52 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
28-06-2019 02:44:53 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 233,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
28-06-2019 02:45:40 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
28-06-2019 02:45:40 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
28-06-2019 02:48:36 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
28-06-2019 02:48:36 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
28-06-2019 02:53:01 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
28-06-2019 02:53:01 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 12,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
28-06-2019 02:54:20 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
28-06-2019 02:54:20 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 10,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
28-06-2019 02:54:47 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
28-06-2019 02:54:47 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 9,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
28-06-2019 02:55:00 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
28-06-2019 02:55:00 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 12,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
28-06-2019 02:56:36 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
28-06-2019 02:56:36 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 18,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
28-06-2019 03:00:00 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
28-06-2019 03:00:00 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 19,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
28-06-2019 03:01:17 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
28-06-2019 03:01:17 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 11,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
28-06-2019 03:06:58 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
28-06-2019 03:06:58 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 16,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
28-06-2019 03:07:45 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
28-06-2019 03:08:47 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
28-06-2019 03:08:47 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 11,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
28-06-2019 03:09:49 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
28-06-2019 03:09:49 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 8,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
28-06-2019 03:12:37 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
28-06-2019 03:12:38 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
08-07-2019 15:05:30 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
08-07-2019 15:05:30 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 10,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
08-07-2019 15:09:28 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
08-07-2019 15:09:28 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
08-07-2019 15:10:16 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
08-07-2019 15:10:16 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 5,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
08-07-2019 15:12:02 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
08-07-2019 15:12:02 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 10,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
08-07-2019 15:15:38 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
08-07-2019 15:15:38 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 9,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
08-07-2019 15:17:01 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
08-07-2019 15:17:01 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 9,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 11:04:27 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 11:04:27 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 212,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 11:06:45 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 11:06:45 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 9,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 11:08:54 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 11:08:54 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 9,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 11:22:35 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 11:22:35 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 11:26:00 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 11:26:00 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 12:05:48 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 12:05:48 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 14:38:12 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 14:38:12 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 14:39:05 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 14:39:05 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 10,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 14:47:55 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 14:47:55 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 14:48:15 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 14:48:15 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 10,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 14:48:42 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 14:48:42 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 14:49:31 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 14:49:31 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 10,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 14:49:56 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 14:49:57 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 28,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 14:50:20 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 14:50:20 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 9,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 14:50:53 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 14:50:53 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 10,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 14:51:17 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 14:51:17 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 9,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 14:51:48 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 14:51:48 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 11,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 15:01:13 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 15:01:13 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 5,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 15:01:30 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 15:01:30 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 15:02:39 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 15:02:39 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 15:04:01 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 15:04:01 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 15:21:56 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 15:21:56 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 15:22:11 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 15:22:11 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 9,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 15:22:52 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 15:22:52 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 15:24:10 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 15:24:10 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 15:24:36 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 15:24:36 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 12,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 15:25:48 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 15:25:48 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 15:26:02 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 15:26:02 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 11,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 15:26:20 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 15:26:20 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 12,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 15:27:59 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 15:27:59 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 15:28:20 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 15:28:20 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 15:29:22 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 15:29:22 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 5,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 15:29:47 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 15:29:47 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 5,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 15:30:43 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 15:30:43 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 8,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 15:34:17 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 15:34:17 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 15:36:24 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 15:36:24 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 15:47:49 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 15:47:49 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 83,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 16:15:28 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 16:15:28 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 16:17:44 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 16:17:44 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 11,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 16:21:35 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 16:21:35 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 16:22:04 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 16:22:04 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 16:24:32 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 16:24:32 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 16:24:48 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 16:24:48 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 16:25:21 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 16:25:21 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 16:25:46 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 16:25:46 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 8,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 16:26:19 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 16:26:19 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 11,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 16:26:39 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 16:26:39 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 10,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 16:33:24 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 16:33:24 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 16:34:41 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 16:34:41 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 5,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 16:40:38 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 16:40:38 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 16:41:46 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 16:41:46 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 9,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 16:42:59 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 16:42:59 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 10,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 16:43:24 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 16:43:24 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 16:45:34 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 16:45:34 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 13,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 16:46:59 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 16:46:59 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 8,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 16:52:52 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 16:52:52 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 16:53:05 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 16:53:05 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 16:53:36 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 16:53:36 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 16:54:46 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 16:54:46 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 10,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 16:56:57 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 16:56:57 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 16:57:25 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 16:57:25 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 16:57:46 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 16:57:46 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 8,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
12-07-2019 16:58:41 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
12-07-2019 16:58:41 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 67,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
15-07-2019 17:01:31 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
15-07-2019 17:01:32 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 260,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
15-07-2019 17:01:36 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
15-07-2019 17:01:36 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 20,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
15-07-2019 17:02:57 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
15-07-2019 17:02:57 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 13,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
15-07-2019 17:03:59 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
15-07-2019 17:03:59 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 13,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
15-07-2019 17:05:51 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
15-07-2019 17:05:51 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 18,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
15-07-2019 17:06:26 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
15-07-2019 17:06:26 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
15-07-2019 17:22:08 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
15-07-2019 17:22:08 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 9,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
15-07-2019 17:24:26 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
15-07-2019 17:24:26 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 20,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
15-07-2019 17:28:24 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
15-07-2019 17:28:24 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 15,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
15-07-2019 17:28:28 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
15-07-2019 17:28:28 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 20,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
15-07-2019 17:29:40 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
15-07-2019 17:29:40 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 8,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
15-07-2019 17:30:57 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
15-07-2019 17:30:57 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
15-07-2019 17:33:47 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
15-07-2019 17:33:47 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 19,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
15-07-2019 17:38:23 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
15-07-2019 17:38:23 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 09:42:55 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 09:42:55 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 09:43:08 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 09:43:08 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 15,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 09:46:00 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 09:46:00 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 09:52:59 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 09:52:59 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 17,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 09:53:03 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 09:53:03 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 09:53:11 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 09:53:11 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 9,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 10:19:02 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 10:19:02 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 18,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 10:19:05 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 10:19:05 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 10:19:54 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 10:20:45 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 10:20:45 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 10:29:46 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 10:29:46 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 10:29:49 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 10:29:49 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 41,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 10:30:35 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 10:30:35 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 10:56:57 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 10:56:57 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 22,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 10:57:00 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 10:57:00 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 10:59:05 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 10:59:06 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 10:59:08 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 10:59:08 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 12,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 11:02:49 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 11:02:49 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 11,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 11:02:53 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 11:02:53 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 12,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 11:08:06 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 11:08:06 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 11:08:10 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 11:08:10 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 14,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 11:17:30 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 11:17:30 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 11:17:32 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 11:17:32 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 11,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 11:18:24 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 11:18:24 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 11:18:28 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 11:18:28 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 11:19:34 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 11:19:34 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 225,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 11:19:41 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 11:19:41 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 14,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 11:21:48 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 11:21:48 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 14,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 11:22:14 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 11:22:14 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 13,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 11:22:21 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 11:22:21 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 11:24:29 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 11:24:29 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 8,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 11:24:33 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 11:24:33 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 11:26:06 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 11:26:06 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 58,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 11:26:09 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 11:26:09 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 10,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 11:26:50 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 11:26:50 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 8,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 11:27:00 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 11:27:00 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 11:27:30 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 11:27:30 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 11:27:37 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 11:27:37 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 11:27:41 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 11:27:41 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 11:44:34 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 11:44:34 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 11:44:36 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 11:44:36 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 11:44:48 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 11:44:48 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 11:45:05 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 11:45:05 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 11:45:30 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 11:45:30 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 11:45:33 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 11:45:33 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 11:46:27 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 11:46:27 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 15,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 11:46:34 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 11:46:34 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 11:50:09 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 11:50:09 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 11:50:11 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 11:50:11 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 11:50:57 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 11:50:57 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 11:51:00 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 11:51:00 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 10,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 11:52:25 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 11:52:25 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 12,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 11:52:27 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 11:52:27 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 11,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 11:53:05 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 11:53:05 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 11:53:08 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 11:53:08 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 28,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 11:53:32 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 11:53:32 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 12:05:56 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 12:05:56 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 15,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 12:06:00 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 12:06:00 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 12:06:32 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 12:06:32 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 12:06:51 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 12:06:51 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 12:06:53 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 12:06:53 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 12:07:38 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 12:07:38 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 12:07:41 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 12:07:41 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 12:07:51 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 12:07:51 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 12,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 12:08:04 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 12:08:04 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 12:08:22 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 12:08:22 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 12:08:24 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 12:08:24 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 8,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 12:09:21 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 12:09:21 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 12:09:23 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 12:09:23 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 12:10:05 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 12:10:05 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 14,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 12:10:07 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 12:10:07 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 15,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 12:10:34 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 12:10:34 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 9,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 12:18:22 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 12:18:22 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 15,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 12:18:25 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 12:18:25 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 15,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 12:20:37 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 12:20:37 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 12:20:39 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 12:20:39 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 13,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 12:25:45 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 12:25:45 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 8,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 12:25:47 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 12:25:47 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 12:30:51 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 12:30:51 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 22,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 12:30:54 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 12:30:54 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 12:32:21 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 12:32:21 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 5,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 12:34:26 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 12:34:26 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 17,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 12:36:50 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 12:36:50 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 9,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
16-07-2019 12:38:02 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
16-07-2019 12:38:02 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 20,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 10:19:33 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 10:19:34 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 316,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 10:19:37 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 10:19:37 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 10:22:41 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 10:22:41 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 9,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 10:37:32 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 10:37:32 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 10:37:35 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 10:37:35 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 12:29:12 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 12:29:12 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 12:29:14 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 12:29:14 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 12:32:50 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 12:32:50 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 313,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 12:45:14 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 12:45:14 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 12:45:20 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 12:45:20 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 14:09:53 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 14:09:53 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 8,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 14:09:56 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 14:09:56 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 15:02:46 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 15:02:46 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 15:02:52 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 15:02:52 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 15:03:11 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 15:03:11 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 9,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 15:07:01 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 15:07:01 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 63,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 15:08:07 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 15:08:07 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 15:09:40 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 15:09:40 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 15:11:53 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 15:11:53 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 20,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 15:43:47 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 15:43:47 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 9,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 15:43:50 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 15:43:50 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 15:51:03 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 15:51:03 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 12,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 15:52:21 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 15:52:21 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 8,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 15:52:48 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 15:52:48 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 17,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 15:53:46 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 15:53:46 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 16,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 15:55:47 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 15:55:47 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 12,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 15:56:24 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 15:56:24 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 19,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 15:57:32 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 15:57:32 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 15:58:21 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 15:58:21 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 9,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 16:00:47 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 16:00:47 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 16:03:00 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 16:03:00 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 16:06:46 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 16:06:46 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 31,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 16:14:45 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 16:14:45 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 8,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 16:17:32 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 16:17:32 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 12,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 16:21:05 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 16:21:05 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 70,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 16:50:28 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 16:50:28 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 486,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 17:04:48 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 17:04:48 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 10,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 17:05:33 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 17:05:33 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 15,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 17:06:12 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 17:06:12 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 17:08:09 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 17:08:09 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 10,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 17:08:31 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 17:08:31 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 17:10:41 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 17:10:41 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 17:12:45 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 17:12:45 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 96,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 17:28:03 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 17:28:03 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 17:37:56 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 17:37:56 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 17:41:50 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 17:41:50 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 17:46:49 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 17:46:49 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 17:51:42 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 17:51:42 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 28,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 18:05:57 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 18:05:57 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 59,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 18:12:29 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 18:12:29 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 6,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
17-07-2019 18:13:45 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
17-07-2019 18:13:45 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-148-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 14,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
