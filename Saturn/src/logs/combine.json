25-06-2019 20:02:12 info : Starting up the call controller
25-06-2019 20:02:12 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
25-06-2019 20:02:13 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 376,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
25-06-2019 20:02:13 info : [server] , Connected to database
25-06-2019 20:11:43 info : Starting up the call controller
25-06-2019 20:11:43 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
25-06-2019 20:11:43 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 28,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
25-06-2019 20:11:43 info : [server] , Connected to database
25-06-2019 20:12:54 info : Starting up the call controller
25-06-2019 20:12:54 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
25-06-2019 20:18:41 info : Starting up the call controller
25-06-2019 20:18:41 debug : [server] , Database URL : mongodb://127.0.0.1:27017/
25-06-2019 20:18:41 info : [server] , Connected to database
25-06-2019 20:18:41 info : [server] , Starting HTTPS server
25-06-2019 20:18:41 info : [server] , HTTPS server listening at port : 8443
25-06-2019 20:18:41 info : [server] , [172.30.64.35]
25-06-2019 20:18:41 debug : [server] , DB Connection object : Db {
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s:
   { databaseName: 'local',
     dbCache: {},
     children: [ [length]: 0 ],
     topology:
      Server {
        _events:
         { serverOpening: { [Function] [length]: 2, [name]: '' },
           serverDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatStarted: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '' },
           serverHeartbeatFailed: { [Function] [length]: 2, [name]: '' },
           serverClosed: { [Function] [length]: 2, [name]: '' },
           topologyOpening: { [Function] [length]: 2, [name]: '' },
           topologyClosed: { [Function] [length]: 2, [name]: '' },
           topologyDescriptionChanged: { [Function] [length]: 2, [name]: '' },
           commandStarted: { [Function] [length]: 2, [name]: '' },
           commandSucceeded: { [Function] [length]: 2, [name]: '' },
           commandFailed: { [Function] [length]: 2, [name]: '' },
           joined: { [Function] [length]: 2, [name]: '' },
           left: { [Function] [length]: 2, [name]: '' },
           ping: { [Function] [length]: 2, [name]: '' },
           ha: { [Function] [length]: 2, [name]: '' },
           authenticated: { [Function] [length]: 2, [name]: '' },
           error: [ [Function], [Function], [length]: 2 ],
           timeout: [ [Function], [Function], [length]: 2 ],
           close: [ [Function], [Function], [length]: 2 ],
           parseError: [ [Function], [Function], [length]: 2 ],
           open: [ [Function], [Function], [length]: 2 ],
           fullsetup: [ [Function], [Function], [length]: 2 ],
           all: [ [Function], [Function], [length]: 2 ],
           reconnect: [ [Function], [Function], [length]: 2 ] },
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo:
         { driver: { name: 'nodejs', version: '3.1.1' },
           os:
            { type: 'Linux',
              name: 'linux',
              architecture: 'x64',
              version: '4.4.0-143-generic' },
           platform: 'Node.js v10.7.0, LE' },
        s:
         { coreTopology:
            Server {
              _events: [Object],
              _eventsCount: 20,
              _maxListeners: undefined,
              id: 0,
              s: [Object],
              ismaster: [Object],
              lastIsMasterMS: 7,
              monitoringProcessId: [Timeout],
              initialConnect: false,
              wireProtocolHandler: WireProtocol {},
              _type: 'server',
              clientInfo: [Object],
              lastUpdateTime: 0,
              lastWriteDate: 0,
              staleness: 0 },
           sCapabilities: null,
           clonedOptions:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000,
              bson: BSON {} },
           reconnect: true,
           emitError: true,
           poolSize: 5,
           storeOptions: { force: false, bufferMaxEntries: -1 },
           store: Store { s: [Object], length: [Getter] },
           host: '127.0.0.1',
           port: 27017,
           options:
            { host: '127.0.0.1',
              port: 27017,
              disconnectHandler: [Store],
              cursorFactory: [Function],
              reconnect: true,
              emitError: true,
              size: 5,
              monitorCommands: false,
              socketTimeout: 360000,
              connectionTimeout: 30000,
              promiseLibrary: [Function],
              clientInfo: [Object],
              servers: [Array],
              useNewUrlParser: true,
              socketTimeoutMS: 360000,
              connectTimeoutMS: 30000 },
           sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
           sessions: [ [length]: 0 ],
           promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } } },
     options:
      { promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] } },
     logger: Logger { className: 'Db' },
     bson: BSON {},
     readPreference: undefined,
     bufferMaxEntries: -1,
     parentDb: null,
     pkFactory: undefined,
     nativeParser: undefined,
     promiseLibrary:
      { [Function: Promise]
        [length]: 1,
        [name]: 'Promise',
        [prototype]:
         Promise {
           [constructor]: [Circular],
           [then]: { [Function: then] [length]: 2, [name]: 'then' },
           [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
           [finally]: { [Function: finally] [length]: 1, [name]: 'finally' },
           [Symbol(Symbol.toStringTag)]: 'Promise' },
        [all]: { [Function: all] [length]: 1, [name]: 'all' },
        [race]: { [Function: race] [length]: 1, [name]: 'race' },
        [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
        [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
        [Symbol(Symbol.species)]: [Getter] },
     noListener: false,
     readConcern: undefined },
  serverConfig: [Getter],
  bufferMaxEntries: [Getter],
  databaseName: [Getter] }
