const HOST = '10.0.97.243';
const PORT = 60030;
const net = require('net');
const client = net.createConnection(PORT,HOST);

// Outgoing packets
var outPacket1 = Buffer.from([0x60,0x1c,0x80,0x02,0x00,0x00,0xa3,0x03,0x06,0x01,0x00,0xa4,0x11,0x08,0x0f,0x4e,0x45,0x43,0x20,0x43,0x26,0x43,0x20,0x28,0x4f,0x41,0x49,0x29,0x20,0x58]);
var outPacket2 = Buffer.from([0xa1,0x15,0x30,0x13,0x02,0x01,0x01,0x02,0x01,0x28,0x30,0x0b,0xa0,0x06,0x04,0x01,0x01,0x04,0x01,0x01,0x82,0x01,0x95]);
var outPacket3 = Buffer.from([0xa1,0x15,0x30,0x13,0x02,0x01,0x03,0x02,0x01,0x28,0x30,0x0b,0xa0,0x06,0x04,0x01,0x01,0x04,0x01,0x01,0x82,0x01,0x62]);
var outPacket4 = Buffer.from([0xa1,0x15,0x30,0x13,0x02,0x01,0x05,0x02,0x01,0x28,0x30,0x0b,0xa0,0x06,0x04,0x01,0x01,0x04,0x01,0x01,0x82,0x01,0xb5]);
var outPacket5 = Buffer.from([0xa1,0x32,0x30,0x30,0x02,0x01,0x07,0x02,0x01,0x95,0x30,0x28,0xa0,0x06,0x04,0x01,0x01,0x04,0x01,0x01,0x82,0x1e,0x49,0x48,0x32,0x30,0x30,0x30,0x61,0x74,0x74,0x74,0x74,0x74,0x74,0x64,0x73,0x63,0x56,0x61,0x6c,0x69,0x64,0x61,0x74,0x65,0x32,0x30,0x30,0x30,0x2e,0x00]);
var outPacket6 = Buffer.from([0xa1,0x15,0x30,0x13,0x02,0x01,0x09,0x02,0x01,0x29,0x30,0x0b,0xa0,0x06,0x04,0x01,0x01,0x04,0x01,0x01,0x82,0x01,0x95]);
var outPacket7 = Buffer.from([0xa1,0x15,0x30,0x13,0x02,0x01,0x0b,0x02,0x01,0x29,0x30,0x0b,0xa0,0x06,0x04,0x01,0x01,0x04,0x01,0x01,0x82,0x01,0xb5]);

// Incoming packets
var inPacket1 = Buffer.from([0x61,0x0c,0x80,0x02,0x00,0x00,0x81,0x01,0x00,0xa3,0x03,0x06,0x01,0x00]);
var inPacket2 = Buffer.from([0xa2,0x0f,0x30,0x0d,0x02,0x01,0x01,0x30,0x08,0xa0,0x06,0x04,0x01,0x01,0x04,0x01,0x01]);
var inPacket3 = Buffer.from([0xa3,0x15,0x30,0x13,0x02,0x01,0x03,0x02,0x01,0x02,0x30,0x0b,0xa0,0x06,0x04,0x01,0x01,0x04,0x01,0x01,0x81,0x01,0x02]);
var inPacket4 = Buffer.from([0xa2,0x0f,0x30,0x0d,0x02,0x01,0x05,0x30,0x08,0xa0,0x06,0x04,0x01,0x01,0x04,0x01,0x01]);
var inPacket5 = Buffer.from([0x30,0x82,0x00,0x1f,0x02,0x02,0xe9,0xa8,0x02,0x01,0xb5,0x30,0x82,0x00,0x14,0xa0,0x06,0x04,0x01,0x01,0x04,0x01,0x01,0x82,0x0a,0x49,0x59,0x32,0x30,0x30,0x30,0x31,0x30,0x31,0x0a]);
var inPacket6 = Buffer.from([0xa2,0x0f,0x30,0x0d,0x02,0x01,0x09,0x30,0x08,0xa0,0x06,0x04,0x01,0x01,0x04,0x01,0x01]);
var inPacket7 = Buffer.from([0xa2,0x0f,0x30,0x0d,0x02,0x01,0x0b,0x30,0x08,0xa0,0x06,0x04,0x01,0x01,0x04,0x01,0x01]);
//var rawData = buff;

client.on('connect',function(){
  console.log('Connected to server');
  execFunc(outPacket1);
});

function execFunc(data){
  console.log('[execFunc]');
  writingData(data);
}
client.on('data',(data) => {
  console.log('ON DATA');
  console.log(data);

  // Start comparing and sending data
  if(!(Buffer.compare(data,inPacket1)))
  {
    writingData(outPacket2);
    writingData(outPacket3);
  }
  else if(!(Buffer.compare(data,inPacket2)))
  {
    writingData(outPacket4);
  }
  else if(!(Buffer.compare(data,inPacket4)))
  {
    writingData(outPacket5);
  }
  else if(!(Buffer.compare(data,inPacket5)))
  {
    writingData(outPacket6);
  }
  else if(!(Buffer.compare(data,inPacket6)))
  {
    writingData(outPacket7);
  }
  else if(!(Buffer.compare(data,inPacket7)))
  {
    console.log("We should move to nect step");
  }
  else {
    console.log("Deafult");
  }
});
function writingData(data) {
  console.log('[writingData]');
  console.log(data);
  client.write(data);
}

client.on('end', () => {
  console.log('disconnected from server');
});
