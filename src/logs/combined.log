13:36:50 11-2019-01 info: Starting up the OAI middleware
13:36:50 11-2019-01 info: Starting up the databse connection
13:36:50 11-2019-01 debug: Database URL : mongodb://localhost:27017/
13:36:50 11-2019-01 info: Starting up the call controller
13:36:50 11-2019-01 info: Starting up the App
13:36:50 11-2019-01 info: HTTPS server listening at port : 8443
13:36:50 11-2019-01 debug: DB Connection object : { alexa:
   Db {
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     s:
      { databaseName: 'Alexa',
        dbCache: {},
        children: [ [length]: 0 ],
        topology:
         Server {
           _events:
            { serverOpening: [Function],
              serverDescriptionChanged: [Function],
              serverHeartbeatStarted: [Function],
              serverHeartbeatSucceeded: [Function],
              serverHeartbeatFailed: [Function],
              serverClosed: [Function],
              topologyOpening: [Function],
              topologyClosed: [Function],
              topologyDescriptionChanged: [Function],
              commandStarted: [Function],
              commandSucceeded: [Function],
              commandFailed: [Function],
              joined: [Function],
              left: [Function],
              ping: [Function],
              ha: [Function],
              authenticated: [Function],
              error: [Array],
              timeout: [Array],
              close: [Array],
              parseError: [Array],
              open: [Array],
              fullsetup: [Array],
              all: [Array],
              reconnect: [Array] },
           _eventsCount: 25,
           _maxListeners: Infinity,
           clientInfo:
            { driver: [Object],
              os: [Object],
              platform: 'Node.js v10.7.0, LE' },
           s:
            { coreTopology: [Server],
              sCapabilities: null,
              clonedOptions: [Object],
              reconnect: true,
              emitError: true,
              poolSize: 5,
              storeOptions: [Object],
              store: [Store],
              host: 'localhost',
              port: 27017,
              options: [Object],
              sessionPool: [ServerSessionPool],
              sessions: [Array],
              promiseLibrary: [Function] } },
        options:
         { promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } },
        logger: Logger { className: 'Db' },
        bson: BSON {},
        readPreference: undefined,
        bufferMaxEntries: -1,
        parentDb: null,
        pkFactory: undefined,
        nativeParser: undefined,
        promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] },
        noListener: false,
        readConcern: undefined },
     serverConfig: [Getter],
     bufferMaxEntries: [Getter],
     databaseName: [Getter] },
  amazon_accounts:
   Db {
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     s:
      { databaseName: 'amazon_accounts',
        dbCache: {},
        children: [ [length]: 0 ],
        topology:
         Server {
           _events:
            { serverOpening: [Function],
              serverDescriptionChanged: [Function],
              serverHeartbeatStarted: [Function],
              serverHeartbeatSucceeded: [Function],
              serverHeartbeatFailed: [Function],
              serverClosed: [Function],
              topologyOpening: [Function],
              topologyClosed: [Function],
              topologyDescriptionChanged: [Function],
              commandStarted: [Function],
              commandSucceeded: [Function],
              commandFailed: [Function],
              joined: [Function],
              left: [Function],
              ping: [Function],
              ha: [Function],
              authenticated: [Function],
              error: [Array],
              timeout: [Array],
              close: [Array],
              parseError: [Array],
              open: [Array],
              fullsetup: [Array],
              all: [Array],
              reconnect: [Array] },
           _eventsCount: 25,
           _maxListeners: Infinity,
           clientInfo:
            { driver: [Object],
              os: [Object],
              platform: 'Node.js v10.7.0, LE' },
           s:
            { coreTopology: [Server],
              sCapabilities: null,
              clonedOptions: [Object],
              reconnect: true,
              emitError: true,
              poolSize: 5,
              storeOptions: [Object],
              store: [Store],
              host: 'localhost',
              port: 27017,
              options: [Object],
              sessionPool: [ServerSessionPool],
              sessions: [Array],
              promiseLibrary: [Function] } },
        options:
         { promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } },
        logger: Logger { className: 'Db' },
        bson: BSON {},
        readPreference: undefined,
        bufferMaxEntries: -1,
        parentDb: null,
        pkFactory: undefined,
        nativeParser: undefined,
        promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] },
        noListener: false,
        readConcern: undefined },
     serverConfig: [Getter],
     bufferMaxEntries: [Getter],
     databaseName: [Getter] } }
13:36:50 11-2019-01 info: Connected to database
13:37:09 11-2019-01 info: Request received at router.post('/api/makeCall')
13:37:09 11-2019-01 debug: Request object : IncomingMessage {
  _readableState:
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: true,
     ended: true,
     endEmitted: true,
     reading: false,
     sync: false,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     emitClose: true,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: false,
     decoder: null,
     encoding: null },
  readable: false,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket:
   TLSSocket {
     _tlsOptions:
      { secureContext:
         SecureContext {
           context: SecureContext {},
           alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
        isServer: true,
        server:
         Server {
           _contexts: [ [length]: 0 ],
           requestCert: false,
           rejectUnauthorized: true,
           key:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
           cert:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
           honorCipherOrder: true,
           ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
           sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
           _sharedCreds:
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           _events:
            { connection: [Function],
              secureConnection: [Function],
              request: [EventEmitter],
              tlsClientError: [Function] },
           _eventsCount: 4,
           _maxListeners: undefined,
           _connections: 1,
           [connections]: [Getter/Setter],
           _handle:
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function] },
           _usingWorkers: false,
           _workers: [ [length]: 0 ],
           _unref: false,
           allowHalfOpen: false,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           maxHeadersCount: null,
           _connectionKey: '6::::8443',
           [Symbol(IncomingMessage)]:
            { [Function: IncomingMessage]
              [length]: 1,
              [name]: 'IncomingMessage',
              [prototype]: [IncomingMessage],
              super_: [Function] },
           [Symbol(ServerResponse)]:
            { [Function: ServerResponse]
              [length]: 1,
              [name]: 'ServerResponse',
              [prototype]: [ServerResponse],
              super_: [Function] },
           [Symbol(handshake-timeout)]: 120000,
           [Symbol(snicallback)]: undefined,
           [Symbol(asyncId)]: 49 },
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback:
         { [Function: SNICallback]
           [length]: 2,
           [name]: 'SNICallback',
           [prototype]: SNICallback { [constructor]: [Circular] } } },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: null,
     servername: '127.0.0.1',
     alpnProtocol: false,
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events:
      { close:
         [ { [Function: onSocketCloseDestroySSL]
             [length]: 0,
             [name]: 'onSocketCloseDestroySSL',
             [prototype]: [onSocketCloseDestroySSL] },
           { [Function: onSocketClose]
             [length]: 1,
             [name]: 'onSocketClose',
             [prototype]: [onSocketClose] },
           { [Function: bound socketOnClose] [length]: 0, [name]: 'bound socketOnClose' },
           { [Function: onServerResponseClose]
             [length]: 0,
             [name]: 'onServerResponseClose',
             [prototype]: [onServerResponseClose] },
           [length]: 4 ],
        end:
         [ { [Function: onReadableStreamEnd]
             [length]: 0,
             [name]: 'onReadableStreamEnd',
             [prototype]: [onReadableStreamEnd] },
           { [Function: bound socketOnEnd] [length]: 0, [name]: 'bound socketOnEnd' },
           [length]: 2 ],
        secure:
         { [Function: onSocketSecure]
           [length]: 0,
           [name]: 'onSocketSecure',
           [prototype]: onSocketSecure { [constructor]: [Circular] } },
        _tlsError:
         { [Function: onSocketTLSError]
           [length]: 1,
           [name]: 'onSocketTLSError',
           [prototype]: onSocketTLSError { [constructor]: [Circular] } },
        drain:
         [ { [Function: ondrain] [length]: 0, [name]: 'ondrain', [prototype]: [ondrain] },
           { [Function: bound socketOnDrain] [length]: 0, [name]: 'bound socketOnDrain' },
           [length]: 2 ],
        timeout:
         { [Function: socketOnTimeout]
           [length]: 0,
           [name]: 'socketOnTimeout',
           [prototype]: socketOnTimeout { [constructor]: [Circular] } },
        data:
         { [Function: bound socketOnData] [length]: 1, [name]: 'bound socketOnData' },
        error:
         { [Function: socketOnError]
           [length]: 1,
           [name]: 'socketOnError',
           [prototype]: socketOnError { [constructor]: [Circular] } },
        resume:
         { [Function: onSocketResume]
           [length]: 0,
           [name]: 'onSocketResume',
           [prototype]: onSocketResume { [constructor]: [Circular] } },
        pause:
         { [Function: onSocketPause]
           [length]: 0,
           [name]: 'onSocketPause',
           [prototype]: onSocketPause { [constructor]: [Circular] } } },
     _eventsCount: 10,
     connecting: false,
     _hadError: false,
     _handle:
      TLSWrap {
        _parent:
         TCP {
           reading: [Getter/Setter],
           owner:
            Socket {
              connecting: false,
              _hadError: false,
              _handle: [Circular],
              _parent: null,
              _host: null,
              _readableState: [ReadableState],
              readable: true,
              _events: [Object],
              _eventsCount: 3,
              _maxListeners: undefined,
              _writableState: [WritableState],
              writable: true,
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: [Server],
              _server: [Server],
              [Symbol(asyncId)]: 132,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0 },
           onread:
            { [Function: onread] [length]: 2, [name]: 'onread', [prototype]: [onread] },
           onconnection: null },
        _parentWrap:
         Socket {
           connecting: false,
           _hadError: false,
           _handle:
            TCP {
              reading: [Getter/Setter],
              owner: [Circular],
              onread: [Function],
              onconnection: null },
           _parent: null,
           _host: null,
           _readableState:
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: null,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           _events: { end: [Function], connect: [Function], error: [Function] },
           _eventsCount: 3,
           _maxListeners: undefined,
           _writableState:
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: [Object] },
           writable: true,
           allowHalfOpen: false,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           _server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           [Symbol(asyncId)]: 132,
           [Symbol(lastWriteQueueSize)]: 0,
           [Symbol(timeout)]: null,
           [Symbol(kBytesRead)]: 0,
           [Symbol(kBytesWritten)]: 0 },
        _secureContext:
         SecureContext {
           context: SecureContext {},
           alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
        reading: true,
        owner: [Circular],
        onread:
         { [Function: onread]
           [length]: 2,
           [name]: 'onread',
           [prototype]: onread { [constructor]: [Circular] } },
        onhandshakestart:
         { [Function: onhandshakestart]
           [length]: 1,
           [name]: 'onhandshakestart',
           [prototype]: onhandshakestart { [constructor]: [Circular] } },
        onhandshakedone:
         { [Function: onhandshakedone]
           [length]: 0,
           [name]: 'onhandshakedone',
           [prototype]: onhandshakedone { [constructor]: [Circular] } },
        onclienthello:
         { [Function: loadSession]
           [length]: 1,
           [name]: 'loadSession',
           [prototype]: loadSession { [constructor]: [Circular] } },
        oncertcb:
         { [Function: loadSNI]
           [length]: 1,
           [name]: 'loadSNI',
           [prototype]: loadSNI { [constructor]: [Circular] } },
        onnewsession:
         { [Function: onnewsession]
           [length]: 2,
           [name]: 'onnewsession',
           [prototype]: onnewsession { [constructor]: [Circular] } },
        lastHandshakeTime: 19892,
        handshakes: 0,
        onerror:
         { [Function: onerror]
           [length]: 1,
           [name]: 'onerror',
           [prototype]: onerror { [constructor]: [Circular] } },
        _consumed: true },
     _parent:
      Socket {
        connecting: false,
        _hadError: false,
        _handle:
         TCP {
           reading: [Getter/Setter],
           owner: [Circular],
           onread:
            { [Function: onread] [length]: 2, [name]: 'onread', [prototype]: [onread] },
           onconnection: null },
        _parent: null,
        _host: null,
        _readableState:
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: null,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           emitClose: false,
           destroyed: false,
           defaultEncoding: 'utf8',
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        _events:
         { end:
            { [Function: onReadableStreamEnd]
              [length]: 0,
              [name]: 'onReadableStreamEnd',
              [prototype]: [onReadableStreamEnd] },
           connect:
            { [Function: bound onceWrapper]
              [length]: 0,
              [name]: 'bound onceWrapper',
              listener: [Function] },
           error: { [Function] [length]: 1, [name]: '' } },
        _eventsCount: 3,
        _maxListeners: undefined,
        _writableState:
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           finalCalled: false,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           destroyed: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: true,
           bufferProcessing: false,
           onwrite:
            { [Function: bound onwrite] [length]: 1, [name]: 'bound onwrite' },
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 0,
           prefinished: false,
           errorEmitted: false,
           emitClose: false,
           bufferedRequestCount: 0,
           corkedRequestsFree: { next: null, entry: null, finish: [Function] } },
        writable: true,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server:
         Server {
           _contexts: [ [length]: 0 ],
           requestCert: false,
           rejectUnauthorized: true,
           key:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
           cert:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
           honorCipherOrder: true,
           ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
           sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
           _sharedCreds:
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           _events:
            { connection: [Function],
              secureConnection: [Function],
              request: [EventEmitter],
              tlsClientError: [Function] },
           _eventsCount: 4,
           _maxListeners: undefined,
           _connections: 1,
           [connections]: [Getter/Setter],
           _handle:
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function] },
           _usingWorkers: false,
           _workers: [ [length]: 0 ],
           _unref: false,
           allowHalfOpen: false,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           maxHeadersCount: null,
           _connectionKey: '6::::8443',
           [Symbol(IncomingMessage)]:
            { [Function: IncomingMessage]
              [length]: 1,
              [name]: 'IncomingMessage',
              [prototype]: [IncomingMessage],
              super_: [Function] },
           [Symbol(ServerResponse)]:
            { [Function: ServerResponse]
              [length]: 1,
              [name]: 'ServerResponse',
              [prototype]: [ServerResponse],
              super_: [Function] },
           [Symbol(handshake-timeout)]: 120000,
           [Symbol(snicallback)]: undefined,
           [Symbol(asyncId)]: 49 },
        _server:
         Server {
           _contexts: [ [length]: 0 ],
           requestCert: false,
           rejectUnauthorized: true,
           key:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
           cert:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
           honorCipherOrder: true,
           ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
           sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
           _sharedCreds:
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           _events:
            { connection: [Function],
              secureConnection: [Function],
              request: [EventEmitter],
              tlsClientError: [Function] },
           _eventsCount: 4,
           _maxListeners: undefined,
           _connections: 1,
           [connections]: [Getter/Setter],
           _handle:
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function] },
           _usingWorkers: false,
           _workers: [ [length]: 0 ],
           _unref: false,
           allowHalfOpen: false,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           maxHeadersCount: null,
           _connectionKey: '6::::8443',
           [Symbol(IncomingMessage)]:
            { [Function: IncomingMessage]
              [length]: 1,
              [name]: 'IncomingMessage',
              [prototype]: [IncomingMessage],
              super_: [Function] },
           [Symbol(ServerResponse)]:
            { [Function: ServerResponse]
              [length]: 1,
              [name]: 'ServerResponse',
              [prototype]: [ServerResponse],
              super_: [Function] },
           [Symbol(handshake-timeout)]: 120000,
           [Symbol(snicallback)]: undefined,
           [Symbol(asyncId)]: 49 },
        [Symbol(asyncId)]: 132,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0 },
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        emitClose: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite:
         { [Function: bound onwrite] [length]: 1, [name]: 'bound onwrite' },
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        bufferedRequestCount: 0,
        corkedRequestsFree:
         { next: null,
           entry: null,
           finish:
            { [Function: bound onCorkedFinish] [length]: 1, [name]: 'bound onCorkedFinish' } } },
     writable: true,
     allowHalfOpen: false,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        _contexts: [ [length]: 0 ],
        requestCert: false,
        rejectUnauthorized: true,
        key:
         <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
        cert:
         <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
        honorCipherOrder: true,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
        _sharedCreds:
         SecureContext {
           context: SecureContext {},
           alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
        _events:
         { connection:
            { [Function: tlsConnectionListener]
              [length]: 1,
              [name]: 'tlsConnectionListener',
              [prototype]: [tlsConnectionListener] },
           secureConnection:
            { [Function: connectionListener]
              [length]: 1,
              [name]: 'connectionListener',
              [prototype]: [connectionListener] },
           request:
            { [EventEmitter: app]
              [length]: 3,
              [name]: 'app',
              [prototype]: [app],
              [constructor]: [Function],
              _events: [Object],
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function],
              getMaxListeners: [Function],
              emit: [Function],
              addListener: [Function],
              on: [Function],
              prependListener: [Function],
              once: [Function],
              prependOnceListener: [Function],
              removeListener: [Function],
              off: [Function],
              removeAllListeners: [Function],
              listeners: [Function],
              rawListeners: [Function],
              listenerCount: [Function],
              eventNames: [Function],
              init: [Function],
              defaultConfiguration: [Function],
              lazyrouter: [Function],
              handle: [Function],
              use: [Function],
              route: [Function],
              engine: [Function],
              param: [Function],
              set: [Function],
              path: [Function],
              enabled: [Function],
              disabled: [Function],
              enable: [Function],
              disable: [Function],
              acl: [Function],
              bind: [Function],
              checkout: [Function],
              connect: [Function],
              copy: [Function],
              delete: [Function],
              get: [Function],
              head: [Function],
              link: [Function],
              lock: [Function],
              'm-search': [Function],
              merge: [Function],
              mkactivity: [Function],
              mkcalendar: [Function],
              mkcol: [Function],
              move: [Function],
              notify: [Function],
              options: [Function],
              patch: [Function],
              post: [Function],
              propfind: [Function],
              proppatch: [Function],
              purge: [Function],
              put: [Function],
              rebind: [Function],
              report: [Function],
              search: [Function],
              source: [Function],
              subscribe: [Function],
              trace: [Function],
              unbind: [Function],
              unlink: [Function],
              unlock: [Function],
              unsubscribe: [Function],
              all: [Function],
              del: [Function],
              render: [Function],
              listen: [Function],
              request: [IncomingMessage],
              response: [ServerResponse],
              cache: {},
              engines: {},
              settings: [Object],
              locals: [Object],
              mountpath: '/',
              [router]: [Getter],
              _router: [Function] },
           tlsClientError:
            { [Function: addListener]
              [length]: 2,
              [name]: 'addListener',
              [prototype]: [addListener] } },
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        [connections]: [Getter/Setter],
        _handle:
         TCP {
           reading: false,
           owner: [Circular],
           onread: null,
           onconnection:
            { [Function: onconnection]
              [length]: 2,
              [name]: 'onconnection',
              [prototype]: [onconnection] } },
        _usingWorkers: false,
        _workers: [ [length]: 0 ],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        _connectionKey: '6::::8443',
        [Symbol(IncomingMessage)]:
         { [Function: IncomingMessage]
           [length]: 1,
           [name]: 'IncomingMessage',
           [prototype]:
            IncomingMessage {
              [constructor]: [Circular],
              setTimeout: [Function],
              _read: [Function],
              destroy: [Function],
              _addHeaderLines: [Function],
              _addHeaderLine: [Function],
              _dump: [Function] },
           super_:
            { [Function: Readable]
              [length]: 1,
              [name]: 'Readable',
              [prototype]: [Readable],
              ReadableState: [Function],
              super_: [Function],
              _fromList: [Function] } },
        [Symbol(ServerResponse)]:
         { [Function: ServerResponse]
           [length]: 1,
           [name]: 'ServerResponse',
           [prototype]:
            ServerResponse {
              [constructor]: [Circular],
              _finish: [Function],
              statusCode: 200,
              statusMessage: undefined,
              assignSocket: [Function],
              detachSocket: [Function],
              writeContinue: [Function],
              writeProcessing: [Function],
              _implicitHeader: [Function],
              writeHead: [Function],
              writeHeader: [Function] },
           super_:
            { [Function: OutgoingMessage]
              [length]: 0,
              [name]: 'OutgoingMessage',
              [prototype]: [OutgoingMessage],
              super_: [Function] } },
        [Symbol(handshake-timeout)]: 120000,
        [Symbol(snicallback)]: undefined,
        [Symbol(asyncId)]: 49 },
     _server: null,
     ssl:
      TLSWrap {
        _parent:
         TCP {
           reading: [Getter/Setter],
           owner:
            Socket {
              connecting: false,
              _hadError: false,
              _handle: [Circular],
              _parent: null,
              _host: null,
              _readableState: [ReadableState],
              readable: true,
              _events: [Object],
              _eventsCount: 3,
              _maxListeners: undefined,
              _writableState: [WritableState],
              writable: true,
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: [Server],
              _server: [Server],
              [Symbol(asyncId)]: 132,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0 },
           onread:
            { [Function: onread] [length]: 2, [name]: 'onread', [prototype]: [onread] },
           onconnection: null },
        _parentWrap:
         Socket {
           connecting: false,
           _hadError: false,
           _handle:
            TCP {
              reading: [Getter/Setter],
              owner: [Circular],
              onread: [Function],
              onconnection: null },
           _parent: null,
           _host: null,
           _readableState:
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: null,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           _events: { end: [Function], connect: [Function], error: [Function] },
           _eventsCount: 3,
           _maxListeners: undefined,
           _writableState:
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: [Object] },
           writable: true,
           allowHalfOpen: false,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           _server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           [Symbol(asyncId)]: 132,
           [Symbol(lastWriteQueueSize)]: 0,
           [Symbol(timeout)]: null,
           [Symbol(kBytesRead)]: 0,
           [Symbol(kBytesWritten)]: 0 },
        _secureContext:
         SecureContext {
           context: SecureContext {},
           alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
        reading: true,
        owner: [Circular],
        onread:
         { [Function: onread]
           [length]: 2,
           [name]: 'onread',
           [prototype]: onread { [constructor]: [Circular] } },
        onhandshakestart:
         { [Function: onhandshakestart]
           [length]: 1,
           [name]: 'onhandshakestart',
           [prototype]: onhandshakestart { [constructor]: [Circular] } },
        onhandshakedone:
         { [Function: onhandshakedone]
           [length]: 0,
           [name]: 'onhandshakedone',
           [prototype]: onhandshakedone { [constructor]: [Circular] } },
        onclienthello:
         { [Function: loadSession]
           [length]: 1,
           [name]: 'loadSession',
           [prototype]: loadSession { [constructor]: [Circular] } },
        oncertcb:
         { [Function: loadSNI]
           [length]: 1,
           [name]: 'loadSNI',
           [prototype]: loadSNI { [constructor]: [Circular] } },
        onnewsession:
         { [Function: onnewsession]
           [length]: 2,
           [name]: 'onnewsession',
           [prototype]: onnewsession { [constructor]: [Circular] } },
        lastHandshakeTime: 19892,
        handshakes: 0,
        onerror:
         { [Function: onerror]
           [length]: 1,
           [name]: 'onerror',
           [prototype]: onerror { [constructor]: [Circular] } },
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     timeout: 120000,
     parser:
      HTTPParser {
        '0':
         { [Function: parserOnHeaders]
           [length]: 2,
           [name]: 'parserOnHeaders',
           [prototype]: parserOnHeaders { [constructor]: [Circular] } },
        '1':
         { [Function: parserOnHeadersComplete]
           [length]: 9,
           [name]: 'parserOnHeadersComplete',
           [prototype]: parserOnHeadersComplete { [constructor]: [Circular] } },
        '2':
         { [Function: parserOnBody]
           [length]: 3,
           [name]: 'parserOnBody',
           [prototype]: parserOnBody { [constructor]: [Circular] } },
        '3':
         { [Function: parserOnMessageComplete]
           [length]: 0,
           [name]: 'parserOnMessageComplete',
           [prototype]: parserOnMessageComplete { [constructor]: [Circular] } },
        '4':
         { [Function: bound onParserExecute] [length]: 1, [name]: 'bound onParserExecute' },
        _headers: [ [length]: 0 ],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming:
         { [Function: bound parserOnIncoming] [length]: 2, [name]: 'bound parserOnIncoming' } },
     on:
      { [Function: socketOnWrap]
        [length]: 2,
        [name]: 'socketOnWrap',
        [prototype]: socketOnWrap { [constructor]: [Circular] } },
     _paused: false,
     _httpMessage:
      ServerResponse {
        _events:
         { finish:
            { [Function: bound resOnFinish] [length]: 0, [name]: 'bound resOnFinish' } },
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [ [length]: 0 ],
        outputEncodings: [ [length]: 0 ],
        outputCallbacks: [ [length]: 0 ],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData:
         { [Function: bound updateOutgoingData] [length]: 1, [name]: 'bound updateOutgoingData' },
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]:
         { 'x-powered-by': [ 'X-Powered-By', 'Express', [length]: 2 ] } },
     [Symbol(res)]:
      TLSWrap {
        _parent:
         TCP {
           reading: [Getter/Setter],
           owner:
            Socket {
              connecting: false,
              _hadError: false,
              _handle: [Circular],
              _parent: null,
              _host: null,
              _readableState: [ReadableState],
              readable: true,
              _events: [Object],
              _eventsCount: 3,
              _maxListeners: undefined,
              _writableState: [WritableState],
              writable: true,
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: [Server],
              _server: [Server],
              [Symbol(asyncId)]: 132,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0 },
           onread:
            { [Function: onread] [length]: 2, [name]: 'onread', [prototype]: [onread] },
           onconnection: null },
        _parentWrap:
         Socket {
           connecting: false,
           _hadError: false,
           _handle:
            TCP {
              reading: [Getter/Setter],
              owner: [Circular],
              onread: [Function],
              onconnection: null },
           _parent: null,
           _host: null,
           _readableState:
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: null,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           _events: { end: [Function], connect: [Function], error: [Function] },
           _eventsCount: 3,
           _maxListeners: undefined,
           _writableState:
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: [Object] },
           writable: true,
           allowHalfOpen: false,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           _server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           [Symbol(asyncId)]: 132,
           [Symbol(lastWriteQueueSize)]: 0,
           [Symbol(timeout)]: null,
           [Symbol(kBytesRead)]: 0,
           [Symbol(kBytesWritten)]: 0 },
        _secureContext:
         SecureContext {
           context: SecureContext {},
           alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
        reading: true,
        owner: [Circular],
        onread:
         { [Function: onread]
           [length]: 2,
           [name]: 'onread',
           [prototype]: onread { [constructor]: [Circular] } },
        onhandshakestart:
         { [Function: onhandshakestart]
           [length]: 1,
           [name]: 'onhandshakestart',
           [prototype]: onhandshakestart { [constructor]: [Circular] } },
        onhandshakedone:
         { [Function: onhandshakedone]
           [length]: 0,
           [name]: 'onhandshakedone',
           [prototype]: onhandshakedone { [constructor]: [Circular] } },
        onclienthello:
         { [Function: loadSession]
           [length]: 1,
           [name]: 'loadSession',
           [prototype]: loadSession { [constructor]: [Circular] } },
        oncertcb:
         { [Function: loadSNI]
           [length]: 1,
           [name]: 'loadSNI',
           [prototype]: loadSNI { [constructor]: [Circular] } },
        onnewsession:
         { [Function: onnewsession]
           [length]: 2,
           [name]: 'onnewsession',
           [prototype]: onnewsession { [constructor]: [Circular] } },
        lastHandshakeTime: 19892,
        handshakes: 0,
        onerror:
         { [Function: onerror]
           [length]: 1,
           [name]: 'onerror',
           [prototype]: onerror { [constructor]: [Circular] } },
        _consumed: true },
     [Symbol(asyncId)]: 133,
     [Symbol(lastWriteQueueSize)]: 0,
     [Symbol(timeout)]:
      Timeout {
        _called: false,
        _idleTimeout: 120000,
        _idlePrev:
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _unrefed: true,
           msecs: 120000,
           _timer: Timer { _list: [Circular] } },
        _idleNext:
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _unrefed: true,
           msecs: 120000,
           _timer: Timer { _list: [Circular] } },
        _idleStart: 19909,
        _onTimeout: { [Function: bound ] [length]: 0, [name]: 'bound ' },
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(unrefed)]: true,
        [Symbol(asyncId)]: 137,
        [Symbol(triggerId)]: 133 },
     [Symbol(kBytesRead)]: 0,
     [Symbol(kBytesWritten)]: 0,
     [Symbol(error-emitted)]: false },
  connection:
   TLSSocket {
     _tlsOptions:
      { secureContext:
         SecureContext {
           context: SecureContext {},
           alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
        isServer: true,
        server:
         Server {
           _contexts: [ [length]: 0 ],
           requestCert: false,
           rejectUnauthorized: true,
           key:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
           cert:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
           honorCipherOrder: true,
           ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
           sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
           _sharedCreds:
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           _events:
            { connection: [Function],
              secureConnection: [Function],
              request: [EventEmitter],
              tlsClientError: [Function] },
           _eventsCount: 4,
           _maxListeners: undefined,
           _connections: 1,
           [connections]: [Getter/Setter],
           _handle:
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function] },
           _usingWorkers: false,
           _workers: [ [length]: 0 ],
           _unref: false,
           allowHalfOpen: false,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           maxHeadersCount: null,
           _connectionKey: '6::::8443',
           [Symbol(IncomingMessage)]:
            { [Function: IncomingMessage]
              [length]: 1,
              [name]: 'IncomingMessage',
              [prototype]: [IncomingMessage],
              super_: [Function] },
           [Symbol(ServerResponse)]:
            { [Function: ServerResponse]
              [length]: 1,
              [name]: 'ServerResponse',
              [prototype]: [ServerResponse],
              super_: [Function] },
           [Symbol(handshake-timeout)]: 120000,
           [Symbol(snicallback)]: undefined,
           [Symbol(asyncId)]: 49 },
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback:
         { [Function: SNICallback]
           [length]: 2,
           [name]: 'SNICallback',
           [prototype]: SNICallback { [constructor]: [Circular] } } },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: null,
     servername: '127.0.0.1',
     alpnProtocol: false,
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events:
      { close:
         [ { [Function: onSocketCloseDestroySSL]
             [length]: 0,
             [name]: 'onSocketCloseDestroySSL',
             [prototype]: [onSocketCloseDestroySSL] },
           { [Function: onSocketClose]
             [length]: 1,
             [name]: 'onSocketClose',
             [prototype]: [onSocketClose] },
           { [Function: bound socketOnClose] [length]: 0, [name]: 'bound socketOnClose' },
           { [Function: onServerResponseClose]
             [length]: 0,
             [name]: 'onServerResponseClose',
             [prototype]: [onServerResponseClose] },
           [length]: 4 ],
        end:
         [ { [Function: onReadableStreamEnd]
             [length]: 0,
             [name]: 'onReadableStreamEnd',
             [prototype]: [onReadableStreamEnd] },
           { [Function: bound socketOnEnd] [length]: 0, [name]: 'bound socketOnEnd' },
           [length]: 2 ],
        secure:
         { [Function: onSocketSecure]
           [length]: 0,
           [name]: 'onSocketSecure',
           [prototype]: onSocketSecure { [constructor]: [Circular] } },
        _tlsError:
         { [Function: onSocketTLSError]
           [length]: 1,
           [name]: 'onSocketTLSError',
           [prototype]: onSocketTLSError { [constructor]: [Circular] } },
        drain:
         [ { [Function: ondrain] [length]: 0, [name]: 'ondrain', [prototype]: [ondrain] },
           { [Function: bound socketOnDrain] [length]: 0, [name]: 'bound socketOnDrain' },
           [length]: 2 ],
        timeout:
         { [Function: socketOnTimeout]
           [length]: 0,
           [name]: 'socketOnTimeout',
           [prototype]: socketOnTimeout { [constructor]: [Circular] } },
        data:
         { [Function: bound socketOnData] [length]: 1, [name]: 'bound socketOnData' },
        error:
         { [Function: socketOnError]
           [length]: 1,
           [name]: 'socketOnError',
           [prototype]: socketOnError { [constructor]: [Circular] } },
        resume:
         { [Function: onSocketResume]
           [length]: 0,
           [name]: 'onSocketResume',
           [prototype]: onSocketResume { [constructor]: [Circular] } },
        pause:
         { [Function: onSocketPause]
           [length]: 0,
           [name]: 'onSocketPause',
           [prototype]: onSocketPause { [constructor]: [Circular] } } },
     _eventsCount: 10,
     connecting: false,
     _hadError: false,
     _handle:
      TLSWrap {
        _parent:
         TCP {
           reading: [Getter/Setter],
           owner:
            Socket {
              connecting: false,
              _hadError: false,
              _handle: [Circular],
              _parent: null,
              _host: null,
              _readableState: [ReadableState],
              readable: true,
              _events: [Object],
              _eventsCount: 3,
              _maxListeners: undefined,
              _writableState: [WritableState],
              writable: true,
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: [Server],
              _server: [Server],
              [Symbol(asyncId)]: 132,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0 },
           onread:
            { [Function: onread] [length]: 2, [name]: 'onread', [prototype]: [onread] },
           onconnection: null },
        _parentWrap:
         Socket {
           connecting: false,
           _hadError: false,
           _handle:
            TCP {
              reading: [Getter/Setter],
              owner: [Circular],
              onread: [Function],
              onconnection: null },
           _parent: null,
           _host: null,
           _readableState:
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: null,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           _events: { end: [Function], connect: [Function], error: [Function] },
           _eventsCount: 3,
           _maxListeners: undefined,
           _writableState:
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: [Object] },
           writable: true,
           allowHalfOpen: false,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           _server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           [Symbol(asyncId)]: 132,
           [Symbol(lastWriteQueueSize)]: 0,
           [Symbol(timeout)]: null,
           [Symbol(kBytesRead)]: 0,
           [Symbol(kBytesWritten)]: 0 },
        _secureContext:
         SecureContext {
           context: SecureContext {},
           alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
        reading: true,
        owner: [Circular],
        onread:
         { [Function: onread]
           [length]: 2,
           [name]: 'onread',
           [prototype]: onread { [constructor]: [Circular] } },
        onhandshakestart:
         { [Function: onhandshakestart]
           [length]: 1,
           [name]: 'onhandshakestart',
           [prototype]: onhandshakestart { [constructor]: [Circular] } },
        onhandshakedone:
         { [Function: onhandshakedone]
           [length]: 0,
           [name]: 'onhandshakedone',
           [prototype]: onhandshakedone { [constructor]: [Circular] } },
        onclienthello:
         { [Function: loadSession]
           [length]: 1,
           [name]: 'loadSession',
           [prototype]: loadSession { [constructor]: [Circular] } },
        oncertcb:
         { [Function: loadSNI]
           [length]: 1,
           [name]: 'loadSNI',
           [prototype]: loadSNI { [constructor]: [Circular] } },
        onnewsession:
         { [Function: onnewsession]
           [length]: 2,
           [name]: 'onnewsession',
           [prototype]: onnewsession { [constructor]: [Circular] } },
        lastHandshakeTime: 19892,
        handshakes: 0,
        onerror:
         { [Function: onerror]
           [length]: 1,
           [name]: 'onerror',
           [prototype]: onerror { [constructor]: [Circular] } },
        _consumed: true },
     _parent:
      Socket {
        connecting: false,
        _hadError: false,
        _handle:
         TCP {
           reading: [Getter/Setter],
           owner: [Circular],
           onread:
            { [Function: onread] [length]: 2, [name]: 'onread', [prototype]: [onread] },
           onconnection: null },
        _parent: null,
        _host: null,
        _readableState:
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: null,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           emitClose: false,
           destroyed: false,
           defaultEncoding: 'utf8',
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        _events:
         { end:
            { [Function: onReadableStreamEnd]
              [length]: 0,
              [name]: 'onReadableStreamEnd',
              [prototype]: [onReadableStreamEnd] },
           connect:
            { [Function: bound onceWrapper]
              [length]: 0,
              [name]: 'bound onceWrapper',
              listener: [Function] },
           error: { [Function] [length]: 1, [name]: '' } },
        _eventsCount: 3,
        _maxListeners: undefined,
        _writableState:
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           finalCalled: false,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           destroyed: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: true,
           bufferProcessing: false,
           onwrite:
            { [Function: bound onwrite] [length]: 1, [name]: 'bound onwrite' },
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 0,
           prefinished: false,
           errorEmitted: false,
           emitClose: false,
           bufferedRequestCount: 0,
           corkedRequestsFree: { next: null, entry: null, finish: [Function] } },
        writable: true,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server:
         Server {
           _contexts: [ [length]: 0 ],
           requestCert: false,
           rejectUnauthorized: true,
           key:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
           cert:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
           honorCipherOrder: true,
           ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
           sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
           _sharedCreds:
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           _events:
            { connection: [Function],
              secureConnection: [Function],
              request: [EventEmitter],
              tlsClientError: [Function] },
           _eventsCount: 4,
           _maxListeners: undefined,
           _connections: 1,
           [connections]: [Getter/Setter],
           _handle:
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function] },
           _usingWorkers: false,
           _workers: [ [length]: 0 ],
           _unref: false,
           allowHalfOpen: false,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           maxHeadersCount: null,
           _connectionKey: '6::::8443',
           [Symbol(IncomingMessage)]:
            { [Function: IncomingMessage]
              [length]: 1,
              [name]: 'IncomingMessage',
              [prototype]: [IncomingMessage],
              super_: [Function] },
           [Symbol(ServerResponse)]:
            { [Function: ServerResponse]
              [length]: 1,
              [name]: 'ServerResponse',
              [prototype]: [ServerResponse],
              super_: [Function] },
           [Symbol(handshake-timeout)]: 120000,
           [Symbol(snicallback)]: undefined,
           [Symbol(asyncId)]: 49 },
        _server:
         Server {
           _contexts: [ [length]: 0 ],
           requestCert: false,
           rejectUnauthorized: true,
           key:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
           cert:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
           honorCipherOrder: true,
           ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
           sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
           _sharedCreds:
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           _events:
            { connection: [Function],
              secureConnection: [Function],
              request: [EventEmitter],
              tlsClientError: [Function] },
           _eventsCount: 4,
           _maxListeners: undefined,
           _connections: 1,
           [connections]: [Getter/Setter],
           _handle:
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function] },
           _usingWorkers: false,
           _workers: [ [length]: 0 ],
           _unref: false,
           allowHalfOpen: false,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           maxHeadersCount: null,
           _connectionKey: '6::::8443',
           [Symbol(IncomingMessage)]:
            { [Function: IncomingMessage]
              [length]: 1,
              [name]: 'IncomingMessage',
              [prototype]: [IncomingMessage],
              super_: [Function] },
           [Symbol(ServerResponse)]:
            { [Function: ServerResponse]
              [length]: 1,
              [name]: 'ServerResponse',
              [prototype]: [ServerResponse],
              super_: [Function] },
           [Symbol(handshake-timeout)]: 120000,
           [Symbol(snicallback)]: undefined,
           [Symbol(asyncId)]: 49 },
        [Symbol(asyncId)]: 132,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0 },
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        emitClose: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite:
         { [Function: bound onwrite] [length]: 1, [name]: 'bound onwrite' },
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        bufferedRequestCount: 0,
        corkedRequestsFree:
         { next: null,
           entry: null,
           finish:
            { [Function: bound onCorkedFinish] [length]: 1, [name]: 'bound onCorkedFinish' } } },
     writable: true,
     allowHalfOpen: false,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        _contexts: [ [length]: 0 ],
        requestCert: false,
        rejectUnauthorized: true,
        key:
         <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
        cert:
         <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
        honorCipherOrder: true,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
        _sharedCreds:
         SecureContext {
           context: SecureContext {},
           alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
        _events:
         { connection:
            { [Function: tlsConnectionListener]
              [length]: 1,
              [name]: 'tlsConnectionListener',
              [prototype]: [tlsConnectionListener] },
           secureConnection:
            { [Function: connectionListener]
              [length]: 1,
              [name]: 'connectionListener',
              [prototype]: [connectionListener] },
           request:
            { [EventEmitter: app]
              [length]: 3,
              [name]: 'app',
              [prototype]: [app],
              [constructor]: [Function],
              _events: [Object],
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function],
              getMaxListeners: [Function],
              emit: [Function],
              addListener: [Function],
              on: [Function],
              prependListener: [Function],
              once: [Function],
              prependOnceListener: [Function],
              removeListener: [Function],
              off: [Function],
              removeAllListeners: [Function],
              listeners: [Function],
              rawListeners: [Function],
              listenerCount: [Function],
              eventNames: [Function],
              init: [Function],
              defaultConfiguration: [Function],
              lazyrouter: [Function],
              handle: [Function],
              use: [Function],
              route: [Function],
              engine: [Function],
              param: [Function],
              set: [Function],
              path: [Function],
              enabled: [Function],
              disabled: [Function],
              enable: [Function],
              disable: [Function],
              acl: [Function],
              bind: [Function],
              checkout: [Function],
              connect: [Function],
              copy: [Function],
              delete: [Function],
              get: [Function],
              head: [Function],
              link: [Function],
              lock: [Function],
              'm-search': [Function],
              merge: [Function],
              mkactivity: [Function],
              mkcalendar: [Function],
              mkcol: [Function],
              move: [Function],
              notify: [Function],
              options: [Function],
              patch: [Function],
              post: [Function],
              propfind: [Function],
              proppatch: [Function],
              purge: [Function],
              put: [Function],
              rebind: [Function],
              report: [Function],
              search: [Function],
              source: [Function],
              subscribe: [Function],
              trace: [Function],
              unbind: [Function],
              unlink: [Function],
              unlock: [Function],
              unsubscribe: [Function],
              all: [Function],
              del: [Function],
              render: [Function],
              listen: [Function],
              request: [IncomingMessage],
              response: [ServerResponse],
              cache: {},
              engines: {},
              settings: [Object],
              locals: [Object],
              mountpath: '/',
              [router]: [Getter],
              _router: [Function] },
           tlsClientError:
            { [Function: addListener]
              [length]: 2,
              [name]: 'addListener',
              [prototype]: [addListener] } },
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        [connections]: [Getter/Setter],
        _handle:
         TCP {
           reading: false,
           owner: [Circular],
           onread: null,
           onconnection:
            { [Function: onconnection]
              [length]: 2,
              [name]: 'onconnection',
              [prototype]: [onconnection] } },
        _usingWorkers: false,
        _workers: [ [length]: 0 ],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        _connectionKey: '6::::8443',
        [Symbol(IncomingMessage)]:
         { [Function: IncomingMessage]
           [length]: 1,
           [name]: 'IncomingMessage',
           [prototype]:
            IncomingMessage {
              [constructor]: [Circular],
              setTimeout: [Function],
              _read: [Function],
              destroy: [Function],
              _addHeaderLines: [Function],
              _addHeaderLine: [Function],
              _dump: [Function] },
           super_:
            { [Function: Readable]
              [length]: 1,
              [name]: 'Readable',
              [prototype]: [Readable],
              ReadableState: [Function],
              super_: [Function],
              _fromList: [Function] } },
        [Symbol(ServerResponse)]:
         { [Function: ServerResponse]
           [length]: 1,
           [name]: 'ServerResponse',
           [prototype]:
            ServerResponse {
              [constructor]: [Circular],
              _finish: [Function],
              statusCode: 200,
              statusMessage: undefined,
              assignSocket: [Function],
              detachSocket: [Function],
              writeContinue: [Function],
              writeProcessing: [Function],
              _implicitHeader: [Function],
              writeHead: [Function],
              writeHeader: [Function] },
           super_:
            { [Function: OutgoingMessage]
              [length]: 0,
              [name]: 'OutgoingMessage',
              [prototype]: [OutgoingMessage],
              super_: [Function] } },
        [Symbol(handshake-timeout)]: 120000,
        [Symbol(snicallback)]: undefined,
        [Symbol(asyncId)]: 49 },
     _server: null,
     ssl:
      TLSWrap {
        _parent:
         TCP {
           reading: [Getter/Setter],
           owner:
            Socket {
              connecting: false,
              _hadError: false,
              _handle: [Circular],
              _parent: null,
              _host: null,
              _readableState: [ReadableState],
              readable: true,
              _events: [Object],
              _eventsCount: 3,
              _maxListeners: undefined,
              _writableState: [WritableState],
              writable: true,
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: [Server],
              _server: [Server],
              [Symbol(asyncId)]: 132,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0 },
           onread:
            { [Function: onread] [length]: 2, [name]: 'onread', [prototype]: [onread] },
           onconnection: null },
        _parentWrap:
         Socket {
           connecting: false,
           _hadError: false,
           _handle:
            TCP {
              reading: [Getter/Setter],
              owner: [Circular],
              onread: [Function],
              onconnection: null },
           _parent: null,
           _host: null,
           _readableState:
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: null,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           _events: { end: [Function], connect: [Function], error: [Function] },
           _eventsCount: 3,
           _maxListeners: undefined,
           _writableState:
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: [Object] },
           writable: true,
           allowHalfOpen: false,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           _server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           [Symbol(asyncId)]: 132,
           [Symbol(lastWriteQueueSize)]: 0,
           [Symbol(timeout)]: null,
           [Symbol(kBytesRead)]: 0,
           [Symbol(kBytesWritten)]: 0 },
        _secureContext:
         SecureContext {
           context: SecureContext {},
           alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
        reading: true,
        owner: [Circular],
        onread:
         { [Function: onread]
           [length]: 2,
           [name]: 'onread',
           [prototype]: onread { [constructor]: [Circular] } },
        onhandshakestart:
         { [Function: onhandshakestart]
           [length]: 1,
           [name]: 'onhandshakestart',
           [prototype]: onhandshakestart { [constructor]: [Circular] } },
        onhandshakedone:
         { [Function: onhandshakedone]
           [length]: 0,
           [name]: 'onhandshakedone',
           [prototype]: onhandshakedone { [constructor]: [Circular] } },
        onclienthello:
         { [Function: loadSession]
           [length]: 1,
           [name]: 'loadSession',
           [prototype]: loadSession { [constructor]: [Circular] } },
        oncertcb:
         { [Function: loadSNI]
           [length]: 1,
           [name]: 'loadSNI',
           [prototype]: loadSNI { [constructor]: [Circular] } },
        onnewsession:
         { [Function: onnewsession]
           [length]: 2,
           [name]: 'onnewsession',
           [prototype]: onnewsession { [constructor]: [Circular] } },
        lastHandshakeTime: 19892,
        handshakes: 0,
        onerror:
         { [Function: onerror]
           [length]: 1,
           [name]: 'onerror',
           [prototype]: onerror { [constructor]: [Circular] } },
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     timeout: 120000,
     parser:
      HTTPParser {
        '0':
         { [Function: parserOnHeaders]
           [length]: 2,
           [name]: 'parserOnHeaders',
           [prototype]: parserOnHeaders { [constructor]: [Circular] } },
        '1':
         { [Function: parserOnHeadersComplete]
           [length]: 9,
           [name]: 'parserOnHeadersComplete',
           [prototype]: parserOnHeadersComplete { [constructor]: [Circular] } },
        '2':
         { [Function: parserOnBody]
           [length]: 3,
           [name]: 'parserOnBody',
           [prototype]: parserOnBody { [constructor]: [Circular] } },
        '3':
         { [Function: parserOnMessageComplete]
           [length]: 0,
           [name]: 'parserOnMessageComplete',
           [prototype]: parserOnMessageComplete { [constructor]: [Circular] } },
        '4':
         { [Function: bound onParserExecute] [length]: 1, [name]: 'bound onParserExecute' },
        _headers: [ [length]: 0 ],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming:
         { [Function: bound parserOnIncoming] [length]: 2, [name]: 'bound parserOnIncoming' } },
     on:
      { [Function: socketOnWrap]
        [length]: 2,
        [name]: 'socketOnWrap',
        [prototype]: socketOnWrap { [constructor]: [Circular] } },
     _paused: false,
     _httpMessage:
      ServerResponse {
        _events:
         { finish:
            { [Function: bound resOnFinish] [length]: 0, [name]: 'bound resOnFinish' } },
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [ [length]: 0 ],
        outputEncodings: [ [length]: 0 ],
        outputCallbacks: [ [length]: 0 ],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData:
         { [Function: bound updateOutgoingData] [length]: 1, [name]: 'bound updateOutgoingData' },
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]:
         { 'x-powered-by': [ 'X-Powered-By', 'Express', [length]: 2 ] } },
     [Symbol(res)]:
      TLSWrap {
        _parent:
         TCP {
           reading: [Getter/Setter],
           owner:
            Socket {
              connecting: false,
              _hadError: false,
              _handle: [Circular],
              _parent: null,
              _host: null,
              _readableState: [ReadableState],
              readable: true,
              _events: [Object],
              _eventsCount: 3,
              _maxListeners: undefined,
              _writableState: [WritableState],
              writable: true,
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: [Server],
              _server: [Server],
              [Symbol(asyncId)]: 132,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0 },
           onread:
            { [Function: onread] [length]: 2, [name]: 'onread', [prototype]: [onread] },
           onconnection: null },
        _parentWrap:
         Socket {
           connecting: false,
           _hadError: false,
           _handle:
            TCP {
              reading: [Getter/Setter],
              owner: [Circular],
              onread: [Function],
              onconnection: null },
           _parent: null,
           _host: null,
           _readableState:
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: null,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           _events: { end: [Function], connect: [Function], error: [Function] },
           _eventsCount: 3,
           _maxListeners: undefined,
           _writableState:
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: [Object] },
           writable: true,
           allowHalfOpen: false,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           _server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           [Symbol(asyncId)]: 132,
           [Symbol(lastWriteQueueSize)]: 0,
           [Symbol(timeout)]: null,
           [Symbol(kBytesRead)]: 0,
           [Symbol(kBytesWritten)]: 0 },
        _secureContext:
         SecureContext {
           context: SecureContext {},
           alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
        reading: true,
        owner: [Circular],
        onread:
         { [Function: onread]
           [length]: 2,
           [name]: 'onread',
           [prototype]: onread { [constructor]: [Circular] } },
        onhandshakestart:
         { [Function: onhandshakestart]
           [length]: 1,
           [name]: 'onhandshakestart',
           [prototype]: onhandshakestart { [constructor]: [Circular] } },
        onhandshakedone:
         { [Function: onhandshakedone]
           [length]: 0,
           [name]: 'onhandshakedone',
           [prototype]: onhandshakedone { [constructor]: [Circular] } },
        onclienthello:
         { [Function: loadSession]
           [length]: 1,
           [name]: 'loadSession',
           [prototype]: loadSession { [constructor]: [Circular] } },
        oncertcb:
         { [Function: loadSNI]
           [length]: 1,
           [name]: 'loadSNI',
           [prototype]: loadSNI { [constructor]: [Circular] } },
        onnewsession:
         { [Function: onnewsession]
           [length]: 2,
           [name]: 'onnewsession',
           [prototype]: onnewsession { [constructor]: [Circular] } },
        lastHandshakeTime: 19892,
        handshakes: 0,
        onerror:
         { [Function: onerror]
           [length]: 1,
           [name]: 'onerror',
           [prototype]: onerror { [constructor]: [Circular] } },
        _consumed: true },
     [Symbol(asyncId)]: 133,
     [Symbol(lastWriteQueueSize)]: 0,
     [Symbol(timeout)]:
      Timeout {
        _called: false,
        _idleTimeout: 120000,
        _idlePrev:
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _unrefed: true,
           msecs: 120000,
           _timer: Timer { _list: [Circular] } },
        _idleNext:
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _unrefed: true,
           msecs: 120000,
           _timer: Timer { _list: [Circular] } },
        _idleStart: 19909,
        _onTimeout: { [Function: bound ] [length]: 0, [name]: 'bound ' },
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(unrefed)]: true,
        [Symbol(asyncId)]: 137,
        [Symbol(triggerId)]: 133 },
     [Symbol(kBytesRead)]: 0,
     [Symbol(kBytesWritten)]: 0,
     [Symbol(error-emitted)]: false },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: true,
  headers:
   { host: '127.0.0.1:8443',
     accept: 'application/json',
     'content-type': 'application/json',
     'content-length': '36',
     connection: 'close' },
  rawHeaders:
   [ 'host',
     '127.0.0.1:8443',
     'accept',
     'application/json',
     'content-type',
     'application/json',
     'content-length',
     '36',
     'Connection',
     'close',
     [length]: 10 ],
  trailers: {},
  rawTrailers: [ [length]: 0 ],
  aborted: false,
  upgrade: false,
  url: '/api/makeCall',
  method: 'POST',
  statusCode: null,
  statusMessage: null,
  client:
   TLSSocket {
     _tlsOptions:
      { secureContext:
         SecureContext {
           context: SecureContext {},
           alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
        isServer: true,
        server:
         Server {
           _contexts: [ [length]: 0 ],
           requestCert: false,
           rejectUnauthorized: true,
           key:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
           cert:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
           honorCipherOrder: true,
           ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
           sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
           _sharedCreds:
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           _events:
            { connection: [Function],
              secureConnection: [Function],
              request: [EventEmitter],
              tlsClientError: [Function] },
           _eventsCount: 4,
           _maxListeners: undefined,
           _connections: 1,
           [connections]: [Getter/Setter],
           _handle:
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function] },
           _usingWorkers: false,
           _workers: [ [length]: 0 ],
           _unref: false,
           allowHalfOpen: false,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           maxHeadersCount: null,
           _connectionKey: '6::::8443',
           [Symbol(IncomingMessage)]:
            { [Function: IncomingMessage]
              [length]: 1,
              [name]: 'IncomingMessage',
              [prototype]: [IncomingMessage],
              super_: [Function] },
           [Symbol(ServerResponse)]:
            { [Function: ServerResponse]
              [length]: 1,
              [name]: 'ServerResponse',
              [prototype]: [ServerResponse],
              super_: [Function] },
           [Symbol(handshake-timeout)]: 120000,
           [Symbol(snicallback)]: undefined,
           [Symbol(asyncId)]: 49 },
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback:
         { [Function: SNICallback]
           [length]: 2,
           [name]: 'SNICallback',
           [prototype]: SNICallback { [constructor]: [Circular] } } },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: null,
     servername: '127.0.0.1',
     alpnProtocol: false,
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events:
      { close:
         [ { [Function: onSocketCloseDestroySSL]
             [length]: 0,
             [name]: 'onSocketCloseDestroySSL',
             [prototype]: [onSocketCloseDestroySSL] },
           { [Function: onSocketClose]
             [length]: 1,
             [name]: 'onSocketClose',
             [prototype]: [onSocketClose] },
           { [Function: bound socketOnClose] [length]: 0, [name]: 'bound socketOnClose' },
           { [Function: onServerResponseClose]
             [length]: 0,
             [name]: 'onServerResponseClose',
             [prototype]: [onServerResponseClose] },
           [length]: 4 ],
        end:
         [ { [Function: onReadableStreamEnd]
             [length]: 0,
             [name]: 'onReadableStreamEnd',
             [prototype]: [onReadableStreamEnd] },
           { [Function: bound socketOnEnd] [length]: 0, [name]: 'bound socketOnEnd' },
           [length]: 2 ],
        secure:
         { [Function: onSocketSecure]
           [length]: 0,
           [name]: 'onSocketSecure',
           [prototype]: onSocketSecure { [constructor]: [Circular] } },
        _tlsError:
         { [Function: onSocketTLSError]
           [length]: 1,
           [name]: 'onSocketTLSError',
           [prototype]: onSocketTLSError { [constructor]: [Circular] } },
        drain:
         [ { [Function: ondrain] [length]: 0, [name]: 'ondrain', [prototype]: [ondrain] },
           { [Function: bound socketOnDrain] [length]: 0, [name]: 'bound socketOnDrain' },
           [length]: 2 ],
        timeout:
         { [Function: socketOnTimeout]
           [length]: 0,
           [name]: 'socketOnTimeout',
           [prototype]: socketOnTimeout { [constructor]: [Circular] } },
        data:
         { [Function: bound socketOnData] [length]: 1, [name]: 'bound socketOnData' },
        error:
         { [Function: socketOnError]
           [length]: 1,
           [name]: 'socketOnError',
           [prototype]: socketOnError { [constructor]: [Circular] } },
        resume:
         { [Function: onSocketResume]
           [length]: 0,
           [name]: 'onSocketResume',
           [prototype]: onSocketResume { [constructor]: [Circular] } },
        pause:
         { [Function: onSocketPause]
           [length]: 0,
           [name]: 'onSocketPause',
           [prototype]: onSocketPause { [constructor]: [Circular] } } },
     _eventsCount: 10,
     connecting: false,
     _hadError: false,
     _handle:
      TLSWrap {
        _parent:
         TCP {
           reading: [Getter/Setter],
           owner:
            Socket {
              connecting: false,
              _hadError: false,
              _handle: [Circular],
              _parent: null,
              _host: null,
              _readableState: [ReadableState],
              readable: true,
              _events: [Object],
              _eventsCount: 3,
              _maxListeners: undefined,
              _writableState: [WritableState],
              writable: true,
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: [Server],
              _server: [Server],
              [Symbol(asyncId)]: 132,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0 },
           onread:
            { [Function: onread] [length]: 2, [name]: 'onread', [prototype]: [onread] },
           onconnection: null },
        _parentWrap:
         Socket {
           connecting: false,
           _hadError: false,
           _handle:
            TCP {
              reading: [Getter/Setter],
              owner: [Circular],
              onread: [Function],
              onconnection: null },
           _parent: null,
           _host: null,
           _readableState:
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: null,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           _events: { end: [Function], connect: [Function], error: [Function] },
           _eventsCount: 3,
           _maxListeners: undefined,
           _writableState:
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: [Object] },
           writable: true,
           allowHalfOpen: false,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           _server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           [Symbol(asyncId)]: 132,
           [Symbol(lastWriteQueueSize)]: 0,
           [Symbol(timeout)]: null,
           [Symbol(kBytesRead)]: 0,
           [Symbol(kBytesWritten)]: 0 },
        _secureContext:
         SecureContext {
           context: SecureContext {},
           alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
        reading: true,
        owner: [Circular],
        onread:
         { [Function: onread]
           [length]: 2,
           [name]: 'onread',
           [prototype]: onread { [constructor]: [Circular] } },
        onhandshakestart:
         { [Function: onhandshakestart]
           [length]: 1,
           [name]: 'onhandshakestart',
           [prototype]: onhandshakestart { [constructor]: [Circular] } },
        onhandshakedone:
         { [Function: onhandshakedone]
           [length]: 0,
           [name]: 'onhandshakedone',
           [prototype]: onhandshakedone { [constructor]: [Circular] } },
        onclienthello:
         { [Function: loadSession]
           [length]: 1,
           [name]: 'loadSession',
           [prototype]: loadSession { [constructor]: [Circular] } },
        oncertcb:
         { [Function: loadSNI]
           [length]: 1,
           [name]: 'loadSNI',
           [prototype]: loadSNI { [constructor]: [Circular] } },
        onnewsession:
         { [Function: onnewsession]
           [length]: 2,
           [name]: 'onnewsession',
           [prototype]: onnewsession { [constructor]: [Circular] } },
        lastHandshakeTime: 19892,
        handshakes: 0,
        onerror:
         { [Function: onerror]
           [length]: 1,
           [name]: 'onerror',
           [prototype]: onerror { [constructor]: [Circular] } },
        _consumed: true },
     _parent:
      Socket {
        connecting: false,
        _hadError: false,
        _handle:
         TCP {
           reading: [Getter/Setter],
           owner: [Circular],
           onread:
            { [Function: onread] [length]: 2, [name]: 'onread', [prototype]: [onread] },
           onconnection: null },
        _parent: null,
        _host: null,
        _readableState:
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: null,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           emitClose: false,
           destroyed: false,
           defaultEncoding: 'utf8',
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        _events:
         { end:
            { [Function: onReadableStreamEnd]
              [length]: 0,
              [name]: 'onReadableStreamEnd',
              [prototype]: [onReadableStreamEnd] },
           connect:
            { [Function: bound onceWrapper]
              [length]: 0,
              [name]: 'bound onceWrapper',
              listener: [Function] },
           error: { [Function] [length]: 1, [name]: '' } },
        _eventsCount: 3,
        _maxListeners: undefined,
        _writableState:
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           finalCalled: false,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           destroyed: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: true,
           bufferProcessing: false,
           onwrite:
            { [Function: bound onwrite] [length]: 1, [name]: 'bound onwrite' },
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 0,
           prefinished: false,
           errorEmitted: false,
           emitClose: false,
           bufferedRequestCount: 0,
           corkedRequestsFree: { next: null, entry: null, finish: [Function] } },
        writable: true,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server:
         Server {
           _contexts: [ [length]: 0 ],
           requestCert: false,
           rejectUnauthorized: true,
           key:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
           cert:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
           honorCipherOrder: true,
           ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
           sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
           _sharedCreds:
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           _events:
            { connection: [Function],
              secureConnection: [Function],
              request: [EventEmitter],
              tlsClientError: [Function] },
           _eventsCount: 4,
           _maxListeners: undefined,
           _connections: 1,
           [connections]: [Getter/Setter],
           _handle:
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function] },
           _usingWorkers: false,
           _workers: [ [length]: 0 ],
           _unref: false,
           allowHalfOpen: false,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           maxHeadersCount: null,
           _connectionKey: '6::::8443',
           [Symbol(IncomingMessage)]:
            { [Function: IncomingMessage]
              [length]: 1,
              [name]: 'IncomingMessage',
              [prototype]: [IncomingMessage],
              super_: [Function] },
           [Symbol(ServerResponse)]:
            { [Function: ServerResponse]
              [length]: 1,
              [name]: 'ServerResponse',
              [prototype]: [ServerResponse],
              super_: [Function] },
           [Symbol(handshake-timeout)]: 120000,
           [Symbol(snicallback)]: undefined,
           [Symbol(asyncId)]: 49 },
        _server:
         Server {
           _contexts: [ [length]: 0 ],
           requestCert: false,
           rejectUnauthorized: true,
           key:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
           cert:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
           honorCipherOrder: true,
           ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
           sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
           _sharedCreds:
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           _events:
            { connection: [Function],
              secureConnection: [Function],
              request: [EventEmitter],
              tlsClientError: [Function] },
           _eventsCount: 4,
           _maxListeners: undefined,
           _connections: 1,
           [connections]: [Getter/Setter],
           _handle:
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function] },
           _usingWorkers: false,
           _workers: [ [length]: 0 ],
           _unref: false,
           allowHalfOpen: false,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           maxHeadersCount: null,
           _connectionKey: '6::::8443',
           [Symbol(IncomingMessage)]:
            { [Function: IncomingMessage]
              [length]: 1,
              [name]: 'IncomingMessage',
              [prototype]: [IncomingMessage],
              super_: [Function] },
           [Symbol(ServerResponse)]:
            { [Function: ServerResponse]
              [length]: 1,
              [name]: 'ServerResponse',
              [prototype]: [ServerResponse],
              super_: [Function] },
           [Symbol(handshake-timeout)]: 120000,
           [Symbol(snicallback)]: undefined,
           [Symbol(asyncId)]: 49 },
        [Symbol(asyncId)]: 132,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0 },
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        emitClose: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite:
         { [Function: bound onwrite] [length]: 1, [name]: 'bound onwrite' },
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        bufferedRequestCount: 0,
        corkedRequestsFree:
         { next: null,
           entry: null,
           finish:
            { [Function: bound onCorkedFinish] [length]: 1, [name]: 'bound onCorkedFinish' } } },
     writable: true,
     allowHalfOpen: false,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        _contexts: [ [length]: 0 ],
        requestCert: false,
        rejectUnauthorized: true,
        key:
         <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
        cert:
         <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
        honorCipherOrder: true,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
        _sharedCreds:
         SecureContext {
           context: SecureContext {},
           alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
        _events:
         { connection:
            { [Function: tlsConnectionListener]
              [length]: 1,
              [name]: 'tlsConnectionListener',
              [prototype]: [tlsConnectionListener] },
           secureConnection:
            { [Function: connectionListener]
              [length]: 1,
              [name]: 'connectionListener',
              [prototype]: [connectionListener] },
           request:
            { [EventEmitter: app]
              [length]: 3,
              [name]: 'app',
              [prototype]: [app],
              [constructor]: [Function],
              _events: [Object],
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function],
              getMaxListeners: [Function],
              emit: [Function],
              addListener: [Function],
              on: [Function],
              prependListener: [Function],
              once: [Function],
              prependOnceListener: [Function],
              removeListener: [Function],
              off: [Function],
              removeAllListeners: [Function],
              listeners: [Function],
              rawListeners: [Function],
              listenerCount: [Function],
              eventNames: [Function],
              init: [Function],
              defaultConfiguration: [Function],
              lazyrouter: [Function],
              handle: [Function],
              use: [Function],
              route: [Function],
              engine: [Function],
              param: [Function],
              set: [Function],
              path: [Function],
              enabled: [Function],
              disabled: [Function],
              enable: [Function],
              disable: [Function],
              acl: [Function],
              bind: [Function],
              checkout: [Function],
              connect: [Function],
              copy: [Function],
              delete: [Function],
              get: [Function],
              head: [Function],
              link: [Function],
              lock: [Function],
              'm-search': [Function],
              merge: [Function],
              mkactivity: [Function],
              mkcalendar: [Function],
              mkcol: [Function],
              move: [Function],
              notify: [Function],
              options: [Function],
              patch: [Function],
              post: [Function],
              propfind: [Function],
              proppatch: [Function],
              purge: [Function],
              put: [Function],
              rebind: [Function],
              report: [Function],
              search: [Function],
              source: [Function],
              subscribe: [Function],
              trace: [Function],
              unbind: [Function],
              unlink: [Function],
              unlock: [Function],
              unsubscribe: [Function],
              all: [Function],
              del: [Function],
              render: [Function],
              listen: [Function],
              request: [IncomingMessage],
              response: [ServerResponse],
              cache: {},
              engines: {},
              settings: [Object],
              locals: [Object],
              mountpath: '/',
              [router]: [Getter],
              _router: [Function] },
           tlsClientError:
            { [Function: addListener]
              [length]: 2,
              [name]: 'addListener',
              [prototype]: [addListener] } },
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        [connections]: [Getter/Setter],
        _handle:
         TCP {
           reading: false,
           owner: [Circular],
           onread: null,
           onconnection:
            { [Function: onconnection]
              [length]: 2,
              [name]: 'onconnection',
              [prototype]: [onconnection] } },
        _usingWorkers: false,
        _workers: [ [length]: 0 ],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        _connectionKey: '6::::8443',
        [Symbol(IncomingMessage)]:
         { [Function: IncomingMessage]
           [length]: 1,
           [name]: 'IncomingMessage',
           [prototype]:
            IncomingMessage {
              [constructor]: [Circular],
              setTimeout: [Function],
              _read: [Function],
              destroy: [Function],
              _addHeaderLines: [Function],
              _addHeaderLine: [Function],
              _dump: [Function] },
           super_:
            { [Function: Readable]
              [length]: 1,
              [name]: 'Readable',
              [prototype]: [Readable],
              ReadableState: [Function],
              super_: [Function],
              _fromList: [Function] } },
        [Symbol(ServerResponse)]:
         { [Function: ServerResponse]
           [length]: 1,
           [name]: 'ServerResponse',
           [prototype]:
            ServerResponse {
              [constructor]: [Circular],
              _finish: [Function],
              statusCode: 200,
              statusMessage: undefined,
              assignSocket: [Function],
              detachSocket: [Function],
              writeContinue: [Function],
              writeProcessing: [Function],
              _implicitHeader: [Function],
              writeHead: [Function],
              writeHeader: [Function] },
           super_:
            { [Function: OutgoingMessage]
              [length]: 0,
              [name]: 'OutgoingMessage',
              [prototype]: [OutgoingMessage],
              super_: [Function] } },
        [Symbol(handshake-timeout)]: 120000,
        [Symbol(snicallback)]: undefined,
        [Symbol(asyncId)]: 49 },
     _server: null,
     ssl:
      TLSWrap {
        _parent:
         TCP {
           reading: [Getter/Setter],
           owner:
            Socket {
              connecting: false,
              _hadError: false,
              _handle: [Circular],
              _parent: null,
              _host: null,
              _readableState: [ReadableState],
              readable: true,
              _events: [Object],
              _eventsCount: 3,
              _maxListeners: undefined,
              _writableState: [WritableState],
              writable: true,
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: [Server],
              _server: [Server],
              [Symbol(asyncId)]: 132,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0 },
           onread:
            { [Function: onread] [length]: 2, [name]: 'onread', [prototype]: [onread] },
           onconnection: null },
        _parentWrap:
         Socket {
           connecting: false,
           _hadError: false,
           _handle:
            TCP {
              reading: [Getter/Setter],
              owner: [Circular],
              onread: [Function],
              onconnection: null },
           _parent: null,
           _host: null,
           _readableState:
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: null,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           _events: { end: [Function], connect: [Function], error: [Function] },
           _eventsCount: 3,
           _maxListeners: undefined,
           _writableState:
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: [Object] },
           writable: true,
           allowHalfOpen: false,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           _server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           [Symbol(asyncId)]: 132,
           [Symbol(lastWriteQueueSize)]: 0,
           [Symbol(timeout)]: null,
           [Symbol(kBytesRead)]: 0,
           [Symbol(kBytesWritten)]: 0 },
        _secureContext:
         SecureContext {
           context: SecureContext {},
           alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
        reading: true,
        owner: [Circular],
        onread:
         { [Function: onread]
           [length]: 2,
           [name]: 'onread',
           [prototype]: onread { [constructor]: [Circular] } },
        onhandshakestart:
         { [Function: onhandshakestart]
           [length]: 1,
           [name]: 'onhandshakestart',
           [prototype]: onhandshakestart { [constructor]: [Circular] } },
        onhandshakedone:
         { [Function: onhandshakedone]
           [length]: 0,
           [name]: 'onhandshakedone',
           [prototype]: onhandshakedone { [constructor]: [Circular] } },
        onclienthello:
         { [Function: loadSession]
           [length]: 1,
           [name]: 'loadSession',
           [prototype]: loadSession { [constructor]: [Circular] } },
        oncertcb:
         { [Function: loadSNI]
           [length]: 1,
           [name]: 'loadSNI',
           [prototype]: loadSNI { [constructor]: [Circular] } },
        onnewsession:
         { [Function: onnewsession]
           [length]: 2,
           [name]: 'onnewsession',
           [prototype]: onnewsession { [constructor]: [Circular] } },
        lastHandshakeTime: 19892,
        handshakes: 0,
        onerror:
         { [Function: onerror]
           [length]: 1,
           [name]: 'onerror',
           [prototype]: onerror { [constructor]: [Circular] } },
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     timeout: 120000,
     parser:
      HTTPParser {
        '0':
         { [Function: parserOnHeaders]
           [length]: 2,
           [name]: 'parserOnHeaders',
           [prototype]: parserOnHeaders { [constructor]: [Circular] } },
        '1':
         { [Function: parserOnHeadersComplete]
           [length]: 9,
           [name]: 'parserOnHeadersComplete',
           [prototype]: parserOnHeadersComplete { [constructor]: [Circular] } },
        '2':
         { [Function: parserOnBody]
           [length]: 3,
           [name]: 'parserOnBody',
           [prototype]: parserOnBody { [constructor]: [Circular] } },
        '3':
         { [Function: parserOnMessageComplete]
           [length]: 0,
           [name]: 'parserOnMessageComplete',
           [prototype]: parserOnMessageComplete { [constructor]: [Circular] } },
        '4':
         { [Function: bound onParserExecute] [length]: 1, [name]: 'bound onParserExecute' },
        _headers: [ [length]: 0 ],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming:
         { [Function: bound parserOnIncoming] [length]: 2, [name]: 'bound parserOnIncoming' } },
     on:
      { [Function: socketOnWrap]
        [length]: 2,
        [name]: 'socketOnWrap',
        [prototype]: socketOnWrap { [constructor]: [Circular] } },
     _paused: false,
     _httpMessage:
      ServerResponse {
        _events:
         { finish:
            { [Function: bound resOnFinish] [length]: 0, [name]: 'bound resOnFinish' } },
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [ [length]: 0 ],
        outputEncodings: [ [length]: 0 ],
        outputCallbacks: [ [length]: 0 ],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData:
         { [Function: bound updateOutgoingData] [length]: 1, [name]: 'bound updateOutgoingData' },
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]:
         { 'x-powered-by': [ 'X-Powered-By', 'Express', [length]: 2 ] } },
     [Symbol(res)]:
      TLSWrap {
        _parent:
         TCP {
           reading: [Getter/Setter],
           owner:
            Socket {
              connecting: false,
              _hadError: false,
              _handle: [Circular],
              _parent: null,
              _host: null,
              _readableState: [ReadableState],
              readable: true,
              _events: [Object],
              _eventsCount: 3,
              _maxListeners: undefined,
              _writableState: [WritableState],
              writable: true,
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: [Server],
              _server: [Server],
              [Symbol(asyncId)]: 132,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0 },
           onread:
            { [Function: onread] [length]: 2, [name]: 'onread', [prototype]: [onread] },
           onconnection: null },
        _parentWrap:
         Socket {
           connecting: false,
           _hadError: false,
           _handle:
            TCP {
              reading: [Getter/Setter],
              owner: [Circular],
              onread: [Function],
              onconnection: null },
           _parent: null,
           _host: null,
           _readableState:
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: null,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           _events: { end: [Function], connect: [Function], error: [Function] },
           _eventsCount: 3,
           _maxListeners: undefined,
           _writableState:
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: [Object] },
           writable: true,
           allowHalfOpen: false,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           _server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           [Symbol(asyncId)]: 132,
           [Symbol(lastWriteQueueSize)]: 0,
           [Symbol(timeout)]: null,
           [Symbol(kBytesRead)]: 0,
           [Symbol(kBytesWritten)]: 0 },
        _secureContext:
         SecureContext {
           context: SecureContext {},
           alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
        reading: true,
        owner: [Circular],
        onread:
         { [Function: onread]
           [length]: 2,
           [name]: 'onread',
           [prototype]: onread { [constructor]: [Circular] } },
        onhandshakestart:
         { [Function: onhandshakestart]
           [length]: 1,
           [name]: 'onhandshakestart',
           [prototype]: onhandshakestart { [constructor]: [Circular] } },
        onhandshakedone:
         { [Function: onhandshakedone]
           [length]: 0,
           [name]: 'onhandshakedone',
           [prototype]: onhandshakedone { [constructor]: [Circular] } },
        onclienthello:
         { [Function: loadSession]
           [length]: 1,
           [name]: 'loadSession',
           [prototype]: loadSession { [constructor]: [Circular] } },
        oncertcb:
         { [Function: loadSNI]
           [length]: 1,
           [name]: 'loadSNI',
           [prototype]: loadSNI { [constructor]: [Circular] } },
        onnewsession:
         { [Function: onnewsession]
           [length]: 2,
           [name]: 'onnewsession',
           [prototype]: onnewsession { [constructor]: [Circular] } },
        lastHandshakeTime: 19892,
        handshakes: 0,
        onerror:
         { [Function: onerror]
           [length]: 1,
           [name]: 'onerror',
           [prototype]: onerror { [constructor]: [Circular] } },
        _consumed: true },
     [Symbol(asyncId)]: 133,
     [Symbol(lastWriteQueueSize)]: 0,
     [Symbol(timeout)]:
      Timeout {
        _called: false,
        _idleTimeout: 120000,
        _idlePrev:
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _unrefed: true,
           msecs: 120000,
           _timer: Timer { _list: [Circular] } },
        _idleNext:
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _unrefed: true,
           msecs: 120000,
           _timer: Timer { _list: [Circular] } },
        _idleStart: 19909,
        _onTimeout: { [Function: bound ] [length]: 0, [name]: 'bound ' },
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(unrefed)]: true,
        [Symbol(asyncId)]: 137,
        [Symbol(triggerId)]: 133 },
     [Symbol(kBytesRead)]: 0,
     [Symbol(kBytesWritten)]: 0,
     [Symbol(error-emitted)]: false },
  _consuming: true,
  _dumped: false,
  next:
   { [Function: next]
     [length]: 1,
     [name]: 'next',
     [prototype]: next { [constructor]: [Circular] } },
  baseUrl: '',
  originalUrl: '/api/makeCall',
  _parsedUrl:
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/api/makeCall',
     path: '/api/makeCall',
     href: '/api/makeCall',
     _raw: '/api/makeCall' },
  params: {},
  query: {},
  res:
   ServerResponse {
     _events:
      { finish:
         { [Function: bound resOnFinish] [length]: 0, [name]: 'bound resOnFinish' } },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [ [length]: 0 ],
     outputEncodings: [ [length]: 0 ],
     outputCallbacks: [ [length]: 0 ],
     outputSize: 0,
     writable: true,
     _last: false,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket:
      TLSSocket {
        _tlsOptions:
         { secureContext:
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           isServer: true,
           server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           requestCert: false,
           rejectUnauthorized: true,
           handshakeTimeout: 120000,
           ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
           SNICallback:
            { [Function: SNICallback]
              [length]: 2,
              [name]: 'SNICallback',
              [prototype]: [SNICallback] } },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: '127.0.0.1',
        alpnProtocol: false,
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events:
         { close:
            [ [Function], [Function], [Function], [Function], [length]: 4 ],
           end: [ [Function], [Function], [length]: 2 ],
           secure:
            { [Function: onSocketSecure]
              [length]: 0,
              [name]: 'onSocketSecure',
              [prototype]: [onSocketSecure] },
           _tlsError:
            { [Function: onSocketTLSError]
              [length]: 1,
              [name]: 'onSocketTLSError',
              [prototype]: [onSocketTLSError] },
           drain: [ [Function], [Function], [length]: 2 ],
           timeout:
            { [Function: socketOnTimeout]
              [length]: 0,
              [name]: 'socketOnTimeout',
              [prototype]: [socketOnTimeout] },
           data:
            { [Function: bound socketOnData] [length]: 1, [name]: 'bound socketOnData' },
           error:
            { [Function: socketOnError]
              [length]: 1,
              [name]: 'socketOnError',
              [prototype]: [socketOnError] },
           resume:
            { [Function: onSocketResume]
              [length]: 0,
              [name]: 'onSocketResume',
              [prototype]: [onSocketResume] },
           pause:
            { [Function: onSocketPause]
              [length]: 0,
              [name]: 'onSocketPause',
              [prototype]: [onSocketPause] } },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _handle:
         TLSWrap {
           _parent:
            TCP {
              reading: [Getter/Setter],
              owner: [Socket],
              onread: [Function],
              onconnection: null },
           _parentWrap:
            Socket {
              connecting: false,
              _hadError: false,
              _handle: [TCP],
              _parent: null,
              _host: null,
              _readableState: [ReadableState],
              readable: true,
              _events: [Object],
              _eventsCount: 3,
              _maxListeners: undefined,
              _writableState: [WritableState],
              writable: true,
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: [Server],
              _server: [Server],
              [Symbol(asyncId)]: 132,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0 },
           _secureContext:
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           reading: true,
           owner: [Circular],
           onread:
            { [Function: onread] [length]: 2, [name]: 'onread', [prototype]: [onread] },
           onhandshakestart:
            { [Function: onhandshakestart]
              [length]: 1,
              [name]: 'onhandshakestart',
              [prototype]: [onhandshakestart] },
           onhandshakedone:
            { [Function: onhandshakedone]
              [length]: 0,
              [name]: 'onhandshakedone',
              [prototype]: [onhandshakedone] },
           onclienthello:
            { [Function: loadSession]
              [length]: 1,
              [name]: 'loadSession',
              [prototype]: [loadSession] },
           oncertcb:
            { [Function: loadSNI] [length]: 1, [name]: 'loadSNI', [prototype]: [loadSNI] },
           onnewsession:
            { [Function: onnewsession]
              [length]: 2,
              [name]: 'onnewsession',
              [prototype]: [onnewsession] },
           lastHandshakeTime: 19892,
           handshakes: 0,
           onerror:
            { [Function: onerror] [length]: 1, [name]: 'onerror', [prototype]: [onerror] },
           _consumed: true },
        _parent:
         Socket {
           connecting: false,
           _hadError: false,
           _handle:
            TCP {
              reading: [Getter/Setter],
              owner: [Circular],
              onread: [Function],
              onconnection: null },
           _parent: null,
           _host: null,
           _readableState:
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: null,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           _events: { end: [Function], connect: [Function], error: [Function] },
           _eventsCount: 3,
           _maxListeners: undefined,
           _writableState:
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: [Object] },
           writable: true,
           allowHalfOpen: false,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           _server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           [Symbol(asyncId)]: 132,
           [Symbol(lastWriteQueueSize)]: 0,
           [Symbol(timeout)]: null,
           [Symbol(kBytesRead)]: 0,
           [Symbol(kBytesWritten)]: 0 },
        _host: null,
        _readableState:
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: true,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           emitClose: false,
           destroyed: false,
           defaultEncoding: 'utf8',
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        _maxListeners: undefined,
        _writableState:
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           finalCalled: false,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           destroyed: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: true,
           bufferProcessing: false,
           onwrite:
            { [Function: bound onwrite] [length]: 1, [name]: 'bound onwrite' },
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 0,
           prefinished: false,
           errorEmitted: false,
           emitClose: false,
           bufferedRequestCount: 0,
           corkedRequestsFree: { next: null, entry: null, finish: [Function] } },
        writable: true,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server:
         Server {
           _contexts: [ [length]: 0 ],
           requestCert: false,
           rejectUnauthorized: true,
           key:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
           cert:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
           honorCipherOrder: true,
           ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
           sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
           _sharedCreds:
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           _events:
            { connection: [Function],
              secureConnection: [Function],
              request: [EventEmitter],
              tlsClientError: [Function] },
           _eventsCount: 4,
           _maxListeners: undefined,
           _connections: 1,
           [connections]: [Getter/Setter],
           _handle:
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function] },
           _usingWorkers: false,
           _workers: [ [length]: 0 ],
           _unref: false,
           allowHalfOpen: false,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           maxHeadersCount: null,
           _connectionKey: '6::::8443',
           [Symbol(IncomingMessage)]:
            { [Function: IncomingMessage]
              [length]: 1,
              [name]: 'IncomingMessage',
              [prototype]: [IncomingMessage],
              super_: [Function] },
           [Symbol(ServerResponse)]:
            { [Function: ServerResponse]
              [length]: 1,
              [name]: 'ServerResponse',
              [prototype]: [ServerResponse],
              super_: [Function] },
           [Symbol(handshake-timeout)]: 120000,
           [Symbol(snicallback)]: undefined,
           [Symbol(asyncId)]: 49 },
        _server: null,
        ssl:
         TLSWrap {
           _parent:
            TCP {
              reading: [Getter/Setter],
              owner: [Socket],
              onread: [Function],
              onconnection: null },
           _parentWrap:
            Socket {
              connecting: false,
              _hadError: false,
              _handle: [TCP],
              _parent: null,
              _host: null,
              _readableState: [ReadableState],
              readable: true,
              _events: [Object],
              _eventsCount: 3,
              _maxListeners: undefined,
              _writableState: [WritableState],
              writable: true,
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: [Server],
              _server: [Server],
              [Symbol(asyncId)]: 132,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0 },
           _secureContext:
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           reading: true,
           owner: [Circular],
           onread:
            { [Function: onread] [length]: 2, [name]: 'onread', [prototype]: [onread] },
           onhandshakestart:
            { [Function: onhandshakestart]
              [length]: 1,
              [name]: 'onhandshakestart',
              [prototype]: [onhandshakestart] },
           onhandshakedone:
            { [Function: onhandshakedone]
              [length]: 0,
              [name]: 'onhandshakedone',
              [prototype]: [onhandshakedone] },
           onclienthello:
            { [Function: loadSession]
              [length]: 1,
              [name]: 'loadSession',
              [prototype]: [loadSession] },
           oncertcb:
            { [Function: loadSNI] [length]: 1, [name]: 'loadSNI', [prototype]: [loadSNI] },
           onnewsession:
            { [Function: onnewsession]
              [length]: 2,
              [name]: 'onnewsession',
              [prototype]: [onnewsession] },
           lastHandshakeTime: 19892,
           handshakes: 0,
           onerror:
            { [Function: onerror] [length]: 1, [name]: 'onerror', [prototype]: [onerror] },
           _consumed: true },
        _requestCert: false,
        _rejectUnauthorized: true,
        timeout: 120000,
        parser:
         HTTPParser {
           '0':
            { [Function: parserOnHeaders]
              [length]: 2,
              [name]: 'parserOnHeaders',
              [prototype]: [parserOnHeaders] },
           '1':
            { [Function: parserOnHeadersComplete]
              [length]: 9,
              [name]: 'parserOnHeadersComplete',
              [prototype]: [parserOnHeadersComplete] },
           '2':
            { [Function: parserOnBody]
              [length]: 3,
              [name]: 'parserOnBody',
              [prototype]: [parserOnBody] },
           '3':
            { [Function: parserOnMessageComplete]
              [length]: 0,
              [name]: 'parserOnMessageComplete',
              [prototype]: [parserOnMessageComplete] },
           '4':
            { [Function: bound onParserExecute] [length]: 1, [name]: 'bound onParserExecute' },
           _headers: [ [length]: 0 ],
           _url: '',
           _consumed: true,
           socket: [Circular],
           incoming: [Circular],
           outgoing: null,
           maxHeaderPairs: 2000,
           onIncoming:
            { [Function: bound parserOnIncoming] [length]: 2, [name]: 'bound parserOnIncoming' } },
        on:
         { [Function: socketOnWrap]
           [length]: 2,
           [name]: 'socketOnWrap',
           [prototype]: socketOnWrap { [constructor]: [Circular] } },
        _paused: false,
        _httpMessage: [Circular],
        [Symbol(res)]:
         TLSWrap {
           _parent:
            TCP {
              reading: [Getter/Setter],
              owner: [Socket],
              onread: [Function],
              onconnection: null },
           _parentWrap:
            Socket {
              connecting: false,
              _hadError: false,
              _handle: [TCP],
              _parent: null,
              _host: null,
              _readableState: [ReadableState],
              readable: true,
              _events: [Object],
              _eventsCount: 3,
              _maxListeners: undefined,
              _writableState: [WritableState],
              writable: true,
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: [Server],
              _server: [Server],
              [Symbol(asyncId)]: 132,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0 },
           _secureContext:
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           reading: true,
           owner: [Circular],
           onread:
            { [Function: onread] [length]: 2, [name]: 'onread', [prototype]: [onread] },
           onhandshakestart:
            { [Function: onhandshakestart]
              [length]: 1,
              [name]: 'onhandshakestart',
              [prototype]: [onhandshakestart] },
           onhandshakedone:
            { [Function: onhandshakedone]
              [length]: 0,
              [name]: 'onhandshakedone',
              [prototype]: [onhandshakedone] },
           onclienthello:
            { [Function: loadSession]
              [length]: 1,
              [name]: 'loadSession',
              [prototype]: [loadSession] },
           oncertcb:
            { [Function: loadSNI] [length]: 1, [name]: 'loadSNI', [prototype]: [loadSNI] },
           onnewsession:
            { [Function: onnewsession]
              [length]: 2,
              [name]: 'onnewsession',
              [prototype]: [onnewsession] },
           lastHandshakeTime: 19892,
           handshakes: 0,
           onerror:
            { [Function: onerror] [length]: 1, [name]: 'onerror', [prototype]: [onerror] },
           _consumed: true },
        [Symbol(asyncId)]: 133,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]:
         Timeout {
           _called: false,
           _idleTimeout: 120000,
           _idlePrev:
            TimersList {
              _idleNext: [Circular],
              _idlePrev: [Circular],
              _unrefed: true,
              msecs: 120000,
              _timer: [Timer] },
           _idleNext:
            TimersList {
              _idleNext: [Circular],
              _idlePrev: [Circular],
              _unrefed: true,
              msecs: 120000,
              _timer: [Timer] },
           _idleStart: 19909,
           _onTimeout: { [Function: bound ] [length]: 0, [name]: 'bound ' },
           _timerArgs: undefined,
           _repeat: null,
           _destroyed: false,
           [Symbol(unrefed)]: true,
           [Symbol(asyncId)]: 137,
           [Symbol(triggerId)]: 133 },
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(error-emitted)]: false },
     connection:
      TLSSocket {
        _tlsOptions:
         { secureContext:
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           isServer: true,
           server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           requestCert: false,
           rejectUnauthorized: true,
           handshakeTimeout: 120000,
           ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
           SNICallback:
            { [Function: SNICallback]
              [length]: 2,
              [name]: 'SNICallback',
              [prototype]: [SNICallback] } },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: '127.0.0.1',
        alpnProtocol: false,
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events:
         { close:
            [ [Function], [Function], [Function], [Function], [length]: 4 ],
           end: [ [Function], [Function], [length]: 2 ],
           secure:
            { [Function: onSocketSecure]
              [length]: 0,
              [name]: 'onSocketSecure',
              [prototype]: [onSocketSecure] },
           _tlsError:
            { [Function: onSocketTLSError]
              [length]: 1,
              [name]: 'onSocketTLSError',
              [prototype]: [onSocketTLSError] },
           drain: [ [Function], [Function], [length]: 2 ],
           timeout:
            { [Function: socketOnTimeout]
              [length]: 0,
              [name]: 'socketOnTimeout',
              [prototype]: [socketOnTimeout] },
           data:
            { [Function: bound socketOnData] [length]: 1, [name]: 'bound socketOnData' },
           error:
            { [Function: socketOnError]
              [length]: 1,
              [name]: 'socketOnError',
              [prototype]: [socketOnError] },
           resume:
            { [Function: onSocketResume]
              [length]: 0,
              [name]: 'onSocketResume',
              [prototype]: [onSocketResume] },
           pause:
            { [Function: onSocketPause]
              [length]: 0,
              [name]: 'onSocketPause',
              [prototype]: [onSocketPause] } },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _handle:
         TLSWrap {
           _parent:
            TCP {
              reading: [Getter/Setter],
              owner: [Socket],
              onread: [Function],
              onconnection: null },
           _parentWrap:
            Socket {
              connecting: false,
              _hadError: false,
              _handle: [TCP],
              _parent: null,
              _host: null,
              _readableState: [ReadableState],
              readable: true,
              _events: [Object],
              _eventsCount: 3,
              _maxListeners: undefined,
              _writableState: [WritableState],
              writable: true,
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: [Server],
              _server: [Server],
              [Symbol(asyncId)]: 132,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0 },
           _secureContext:
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           reading: true,
           owner: [Circular],
           onread:
            { [Function: onread] [length]: 2, [name]: 'onread', [prototype]: [onread] },
           onhandshakestart:
            { [Function: onhandshakestart]
              [length]: 1,
              [name]: 'onhandshakestart',
              [prototype]: [onhandshakestart] },
           onhandshakedone:
            { [Function: onhandshakedone]
              [length]: 0,
              [name]: 'onhandshakedone',
              [prototype]: [onhandshakedone] },
           onclienthello:
            { [Function: loadSession]
              [length]: 1,
              [name]: 'loadSession',
              [prototype]: [loadSession] },
           oncertcb:
            { [Function: loadSNI] [length]: 1, [name]: 'loadSNI', [prototype]: [loadSNI] },
           onnewsession:
            { [Function: onnewsession]
              [length]: 2,
              [name]: 'onnewsession',
              [prototype]: [onnewsession] },
           lastHandshakeTime: 19892,
           handshakes: 0,
           onerror:
            { [Function: onerror] [length]: 1, [name]: 'onerror', [prototype]: [onerror] },
           _consumed: true },
        _parent:
         Socket {
           connecting: false,
           _hadError: false,
           _handle:
            TCP {
              reading: [Getter/Setter],
              owner: [Circular],
              onread: [Function],
              onconnection: null },
           _parent: null,
           _host: null,
           _readableState:
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: null,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           _events: { end: [Function], connect: [Function], error: [Function] },
           _eventsCount: 3,
           _maxListeners: undefined,
           _writableState:
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: [Object] },
           writable: true,
           allowHalfOpen: false,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           _server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           [Symbol(asyncId)]: 132,
           [Symbol(lastWriteQueueSize)]: 0,
           [Symbol(timeout)]: null,
           [Symbol(kBytesRead)]: 0,
           [Symbol(kBytesWritten)]: 0 },
        _host: null,
        _readableState:
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: true,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           emitClose: false,
           destroyed: false,
           defaultEncoding: 'utf8',
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        _maxListeners: undefined,
        _writableState:
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           finalCalled: false,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           destroyed: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: true,
           bufferProcessing: false,
           onwrite:
            { [Function: bound onwrite] [length]: 1, [name]: 'bound onwrite' },
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 0,
           prefinished: false,
           errorEmitted: false,
           emitClose: false,
           bufferedRequestCount: 0,
           corkedRequestsFree: { next: null, entry: null, finish: [Function] } },
        writable: true,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server:
         Server {
           _contexts: [ [length]: 0 ],
           requestCert: false,
           rejectUnauthorized: true,
           key:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
           cert:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
           honorCipherOrder: true,
           ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
           sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
           _sharedCreds:
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           _events:
            { connection: [Function],
              secureConnection: [Function],
              request: [EventEmitter],
              tlsClientError: [Function] },
           _eventsCount: 4,
           _maxListeners: undefined,
           _connections: 1,
           [connections]: [Getter/Setter],
           _handle:
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function] },
           _usingWorkers: false,
           _workers: [ [length]: 0 ],
           _unref: false,
           allowHalfOpen: false,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           maxHeadersCount: null,
           _connectionKey: '6::::8443',
           [Symbol(IncomingMessage)]:
            { [Function: IncomingMessage]
              [length]: 1,
              [name]: 'IncomingMessage',
              [prototype]: [IncomingMessage],
              super_: [Function] },
           [Symbol(ServerResponse)]:
            { [Function: ServerResponse]
              [length]: 1,
              [name]: 'ServerResponse',
              [prototype]: [ServerResponse],
              super_: [Function] },
           [Symbol(handshake-timeout)]: 120000,
           [Symbol(snicallback)]: undefined,
           [Symbol(asyncId)]: 49 },
        _server: null,
        ssl:
         TLSWrap {
           _parent:
            TCP {
              reading: [Getter/Setter],
              owner: [Socket],
              onread: [Function],
              onconnection: null },
           _parentWrap:
            Socket {
              connecting: false,
              _hadError: false,
              _handle: [TCP],
              _parent: null,
              _host: null,
              _readableState: [ReadableState],
              readable: true,
              _events: [Object],
              _eventsCount: 3,
              _maxListeners: undefined,
              _writableState: [WritableState],
              writable: true,
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: [Server],
              _server: [Server],
              [Symbol(asyncId)]: 132,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0 },
           _secureContext:
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           reading: true,
           owner: [Circular],
           onread:
            { [Function: onread] [length]: 2, [name]: 'onread', [prototype]: [onread] },
           onhandshakestart:
            { [Function: onhandshakestart]
              [length]: 1,
              [name]: 'onhandshakestart',
              [prototype]: [onhandshakestart] },
           onhandshakedone:
            { [Function: onhandshakedone]
              [length]: 0,
              [name]: 'onhandshakedone',
              [prototype]: [onhandshakedone] },
           onclienthello:
            { [Function: loadSession]
              [length]: 1,
              [name]: 'loadSession',
              [prototype]: [loadSession] },
           oncertcb:
            { [Function: loadSNI] [length]: 1, [name]: 'loadSNI', [prototype]: [loadSNI] },
           onnewsession:
            { [Function: onnewsession]
              [length]: 2,
              [name]: 'onnewsession',
              [prototype]: [onnewsession] },
           lastHandshakeTime: 19892,
           handshakes: 0,
           onerror:
            { [Function: onerror] [length]: 1, [name]: 'onerror', [prototype]: [onerror] },
           _consumed: true },
        _requestCert: false,
        _rejectUnauthorized: true,
        timeout: 120000,
        parser:
         HTTPParser {
           '0':
            { [Function: parserOnHeaders]
              [length]: 2,
              [name]: 'parserOnHeaders',
              [prototype]: [parserOnHeaders] },
           '1':
            { [Function: parserOnHeadersComplete]
              [length]: 9,
              [name]: 'parserOnHeadersComplete',
              [prototype]: [parserOnHeadersComplete] },
           '2':
            { [Function: parserOnBody]
              [length]: 3,
              [name]: 'parserOnBody',
              [prototype]: [parserOnBody] },
           '3':
            { [Function: parserOnMessageComplete]
              [length]: 0,
              [name]: 'parserOnMessageComplete',
              [prototype]: [parserOnMessageComplete] },
           '4':
            { [Function: bound onParserExecute] [length]: 1, [name]: 'bound onParserExecute' },
           _headers: [ [length]: 0 ],
           _url: '',
           _consumed: true,
           socket: [Circular],
           incoming: [Circular],
           outgoing: null,
           maxHeaderPairs: 2000,
           onIncoming:
            { [Function: bound parserOnIncoming] [length]: 2, [name]: 'bound parserOnIncoming' } },
        on:
         { [Function: socketOnWrap]
           [length]: 2,
           [name]: 'socketOnWrap',
           [prototype]: socketOnWrap { [constructor]: [Circular] } },
        _paused: false,
        _httpMessage: [Circular],
        [Symbol(res)]:
         TLSWrap {
           _parent:
            TCP {
              reading: [Getter/Setter],
              owner: [Socket],
              onread: [Function],
              onconnection: null },
           _parentWrap:
            Socket {
              connecting: false,
              _hadError: false,
              _handle: [TCP],
              _parent: null,
              _host: null,
              _readableState: [ReadableState],
              readable: true,
              _events: [Object],
              _eventsCount: 3,
              _maxListeners: undefined,
              _writableState: [WritableState],
              writable: true,
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: [Server],
              _server: [Server],
              [Symbol(asyncId)]: 132,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0 },
           _secureContext:
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           reading: true,
           owner: [Circular],
           onread:
            { [Function: onread] [length]: 2, [name]: 'onread', [prototype]: [onread] },
           onhandshakestart:
            { [Function: onhandshakestart]
              [length]: 1,
              [name]: 'onhandshakestart',
              [prototype]: [onhandshakestart] },
           onhandshakedone:
            { [Function: onhandshakedone]
              [length]: 0,
              [name]: 'onhandshakedone',
              [prototype]: [onhandshakedone] },
           onclienthello:
            { [Function: loadSession]
              [length]: 1,
              [name]: 'loadSession',
              [prototype]: [loadSession] },
           oncertcb:
            { [Function: loadSNI] [length]: 1, [name]: 'loadSNI', [prototype]: [loadSNI] },
           onnewsession:
            { [Function: onnewsession]
              [length]: 2,
              [name]: 'onnewsession',
              [prototype]: [onnewsession] },
           lastHandshakeTime: 19892,
           handshakes: 0,
           onerror:
            { [Function: onerror] [length]: 1, [name]: 'onerror', [prototype]: [onerror] },
           _consumed: true },
        [Symbol(asyncId)]: 133,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]:
         Timeout {
           _called: false,
           _idleTimeout: 120000,
           _idlePrev:
            TimersList {
              _idleNext: [Circular],
              _idlePrev: [Circular],
              _unrefed: true,
              msecs: 120000,
              _timer: [Timer] },
           _idleNext:
            TimersList {
              _idleNext: [Circular],
              _idlePrev: [Circular],
              _unrefed: true,
              msecs: 120000,
              _timer: [Timer] },
           _idleStart: 19909,
           _onTimeout: { [Function: bound ] [length]: 0, [name]: 'bound ' },
           _timerArgs: undefined,
           _repeat: null,
           _destroyed: false,
           [Symbol(unrefed)]: true,
           [Symbol(asyncId)]: 137,
           [Symbol(triggerId)]: 133 },
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(error-emitted)]: false },
     _header: null,
     _onPendingData:
      { [Function: bound updateOutgoingData] [length]: 1, [name]: 'bound updateOutgoingData' },
     _sent100: false,
     _expect_continue: false,
     req: [Circular],
     locals: {},
     [Symbol(isCorked)]: false,
     [Symbol(outHeadersKey)]:
      { 'x-powered-by': [ 'X-Powered-By', 'Express', [length]: 2 ] } },
  body: { source: '101', destination: '102' },
  _body: true,
  length: undefined,
  route:
   Route {
     path: '/api/makeCall',
     stack:
      [ Layer {
          handle:
           { [Function]
             [length]: 2,
             [name]: '',
             [arguments]: [Object],
             [caller]: null,
             [prototype]: [Object] },
          name: '<anonymous>',
          params: undefined,
          path: undefined,
          keys: [ [length]: 0 ],
          regexp:
           { /^\/?$/i [lastIndex]: 0, fast_star: false, fast_slash: false },
          method: 'post' },
        [length]: 1 ],
     methods: { post: true } } }
13:37:11 11-2019-01 info: Calling : callController.makeCall with source : 101 , destination : 102
13:37:11 11-2019-01 info: Function execution start : callController.makeCall()
13:37:11 11-2019-01 debug: source : 101, destination : 102
13:37:11 11-2019-01 info: Calling OAI middleware
13:37:11 11-2019-01 info: Function execution start : oai.makeCall()
13:37:11 11-2019-01 debug: source : 101 , destination : 102
13:37:11 11-2019-01 info: Creating connection with SV9100
13:37:11 11-2019-01 info: Flag = 0
13:37:11 11-2019-01 debug: Client socket to OAI object : Socket {
  connecting: true,
  _hadError: false,
  _handle:
   TCP {
     reading: false,
     owner: [Circular],
     onread:
      { [Function: onread]
        [length]: 2,
        [name]: 'onread',
        [prototype]: onread { [constructor]: [Circular] } },
     onconnection: null },
  _parent: null,
  _host: null,
  _readableState:
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: true,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: true,
     emitClose: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: false,
     decoder: null,
     encoding: null },
  readable: false,
  _events:
   { end:
      [ { [Function: onReadableStreamEnd]
          [length]: 0,
          [name]: 'onReadableStreamEnd',
          [prototype]: onReadableStreamEnd { [constructor]: [Circular] } },
        { [Function] [length]: 0, [name]: '' },
        [length]: 2 ],
     connect:
      { [Function]
        [length]: 0,
        [name]: '',
        [arguments]: null,
        [caller]: null,
        [prototype]: { [constructor]: [Circular] } },
     data:
      { [Function]
        [length]: 1,
        [name]: '',
        [arguments]: null,
        [caller]: null,
        [prototype]: { [constructor]: [Circular] } },
     error: { [Function] [length]: 1, [name]: '' } },
  _eventsCount: 4,
  _maxListeners: undefined,
  _writableState:
   WritableState {
     objectMode: false,
     highWaterMark: 16384,
     finalCalled: false,
     needDrain: false,
     ending: false,
     ended: false,
     finished: false,
     destroyed: false,
     decodeStrings: false,
     defaultEncoding: 'utf8',
     length: 0,
     writing: false,
     corked: 0,
     sync: true,
     bufferProcessing: false,
     onwrite:
      { [Function: bound onwrite] [length]: 1, [name]: 'bound onwrite' },
     writecb: null,
     writelen: 0,
     bufferedRequest: null,
     lastBufferedRequest: null,
     pendingcb: 0,
     prefinished: false,
     errorEmitted: false,
     emitClose: false,
     bufferedRequestCount: 0,
     corkedRequestsFree:
      { next: null,
        entry: null,
        finish:
         { [Function: bound onCorkedFinish] [length]: 1, [name]: 'bound onCorkedFinish' } } },
  writable: true,
  allowHalfOpen: false,
  _sockname: null,
  _pendingData: null,
  _pendingEncoding: '',
  server: null,
  _server: null,
  [Symbol(asyncId)]: 193,
  [Symbol(lastWriteQueueSize)]: 0,
  [Symbol(timeout)]: null,
  [Symbol(kBytesRead)]: 0,
  [Symbol(kBytesWritten)]: 0 }
13:37:11 11-2019-01 info: Connected to SV9100
13:37:11 11-2019-01 info: Write connect_to_sv9100
13:37:11 11-2019-01 debug: connect_to_sv9100 => <Buffer 60 1c 80 02 00 00 a3 03 06 01 00 a4 11 08 0f 4e 45 43 20 43 26 43 20 28 4f 41 49 29 20 58>
13:37:11 11-2019-01 debug: Flag set to = 1
13:37:11 11-2019-01 info: Data received
13:37:11 11-2019-01 info: Flag = 1
13:37:11 11-2019-01 debug: DATA => <Buffer 61 0c 80 02 00 00 81 01 00 a3 03 06 01 00>
13:37:11 11-2019-01 info: Write switch_control_to_sv9100
13:37:11 11-2019-01 debug: switch_control_to_sv9100 => <Buffer a1 15 30 13 02 01 07 02 01 28 30 0b a0 06 04 01 00 04 01 01 82 01 69>
13:37:11 11-2019-01 debug: Flag set to = 2
13:37:11 11-2019-01 info: Data received
13:37:11 11-2019-01 info: Flag = 2
13:37:11 11-2019-01 debug: DATA => <Buffer a2 0f 30 0d 02 01 07 30 08 a0 06 04 01 00 04 01 01>
13:37:11 11-2019-01 info: Write makecall_to_sv9100
13:37:11 11-2019-01 debug: makecall_to_sv9100 => <Buffer a1 32 30 30 02 01 0f 02 01 69 30 28 a0 06 04 01 01 04 01 01 a2 0e a0 0c 04 01 01 04 02 00 00 04 03 01 0a 01 a3 05 80 03 01 0a 02 84 01 02 85 01 03 86 ... >
13:37:11 11-2019-01 debug: Flag set to = 3
13:37:11 11-2019-01 info: Data received
13:37:11 11-2019-01 info: Flag = 3
13:37:11 11-2019-01 debug: DATA => <Buffer a2 2d 30 2b 02 01 0f 30 26 a0 06 04 01 01 04 01 01 a1 1c a0 0c 04 01 01 04 02 00 0a 04 03 01 0a 01 a1 0c 04 01 01 04 02 00 0a 04 03 01 0a 02>
13:37:11 11-2019-01 info: Sending callback
13:37:11 11-2019-01 debug: Flag set to = 0
13:37:11 11-2019-01 debug: Result object : '1'
13:37:11 11-2019-01 info: OAI middleware sends success
13:37:11 11-2019-01 debug: Result object : '1'
13:37:11 11-2019-01 info: Sending response for HTTPS request => /api/makeCall :  Making Call
13:37:27 11-2019-01 info: Data received
13:37:27 11-2019-01 debug: Default case
13:37:43 11-2019-01 info: Data received
13:37:43 11-2019-01 debug: Default case
13:37:59 11-2019-01 error: Error object => { Error: read ECONNRESET
    at TCP.onread (net.js:660:25)
  [stack]: 'Error: read ECONNRESET\n    at TCP.onread (net.js:660:25)',
  [message]: 'read ECONNRESET',
  errno: 'ECONNRESET',
  code: 'ECONNRESET',
  syscall: 'read' }
13:45:06 11-2019-01 info: Starting up the OAI middleware
13:45:06 11-2019-01 info: Starting up the databse connection
13:45:06 11-2019-01 debug: Database URL : mongodb://localhost:27017/
13:45:06 11-2019-01 info: Starting up the call controller
13:45:06 11-2019-01 info: Starting up the App
13:45:06 11-2019-01 info: HTTPS server listening at port : 8443
13:45:06 11-2019-01 debug: DB Connection object : { alexa:
   Db {
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     s:
      { databaseName: 'Alexa',
        dbCache: {},
        children: [ [length]: 0 ],
        topology:
         Server {
           _events:
            { serverOpening: [Function],
              serverDescriptionChanged: [Function],
              serverHeartbeatStarted: [Function],
              serverHeartbeatSucceeded: [Function],
              serverHeartbeatFailed: [Function],
              serverClosed: [Function],
              topologyOpening: [Function],
              topologyClosed: [Function],
              topologyDescriptionChanged: [Function],
              commandStarted: [Function],
              commandSucceeded: [Function],
              commandFailed: [Function],
              joined: [Function],
              left: [Function],
              ping: [Function],
              ha: [Function],
              authenticated: [Function],
              error: [Array],
              timeout: [Array],
              close: [Array],
              parseError: [Array],
              open: [Array],
              fullsetup: [Array],
              all: [Array],
              reconnect: [Array] },
           _eventsCount: 25,
           _maxListeners: Infinity,
           clientInfo:
            { driver: [Object],
              os: [Object],
              platform: 'Node.js v10.7.0, LE' },
           s:
            { coreTopology: [Server],
              sCapabilities: null,
              clonedOptions: [Object],
              reconnect: true,
              emitError: true,
              poolSize: 5,
              storeOptions: [Object],
              store: [Store],
              host: 'localhost',
              port: 27017,
              options: [Object],
              sessionPool: [ServerSessionPool],
              sessions: [Array],
              promiseLibrary: [Function] } },
        options:
         { promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } },
        logger: Logger { className: 'Db' },
        bson: BSON {},
        readPreference: undefined,
        bufferMaxEntries: -1,
        parentDb: null,
        pkFactory: undefined,
        nativeParser: undefined,
        promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] },
        noListener: false,
        readConcern: undefined },
     serverConfig: [Getter],
     bufferMaxEntries: [Getter],
     databaseName: [Getter] },
  amazon_accounts:
   Db {
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     s:
      { databaseName: 'amazon_accounts',
        dbCache: {},
        children: [ [length]: 0 ],
        topology:
         Server {
           _events:
            { serverOpening: [Function],
              serverDescriptionChanged: [Function],
              serverHeartbeatStarted: [Function],
              serverHeartbeatSucceeded: [Function],
              serverHeartbeatFailed: [Function],
              serverClosed: [Function],
              topologyOpening: [Function],
              topologyClosed: [Function],
              topologyDescriptionChanged: [Function],
              commandStarted: [Function],
              commandSucceeded: [Function],
              commandFailed: [Function],
              joined: [Function],
              left: [Function],
              ping: [Function],
              ha: [Function],
              authenticated: [Function],
              error: [Array],
              timeout: [Array],
              close: [Array],
              parseError: [Array],
              open: [Array],
              fullsetup: [Array],
              all: [Array],
              reconnect: [Array] },
           _eventsCount: 25,
           _maxListeners: Infinity,
           clientInfo:
            { driver: [Object],
              os: [Object],
              platform: 'Node.js v10.7.0, LE' },
           s:
            { coreTopology: [Server],
              sCapabilities: null,
              clonedOptions: [Object],
              reconnect: true,
              emitError: true,
              poolSize: 5,
              storeOptions: [Object],
              store: [Store],
              host: 'localhost',
              port: 27017,
              options: [Object],
              sessionPool: [ServerSessionPool],
              sessions: [Array],
              promiseLibrary: [Function] } },
        options:
         { promiseLibrary:
            { [Function: Promise]
              [length]: 1,
              [name]: 'Promise',
              [prototype]: [Promise],
              [all]: [Function],
              [race]: [Function],
              [resolve]: [Function],
              [reject]: [Function],
              [Symbol(Symbol.species)]: [Getter] } },
        logger: Logger { className: 'Db' },
        bson: BSON {},
        readPreference: undefined,
        bufferMaxEntries: -1,
        parentDb: null,
        pkFactory: undefined,
        nativeParser: undefined,
        promiseLibrary:
         { [Function: Promise]
           [length]: 1,
           [name]: 'Promise',
           [prototype]:
            Promise {
              [constructor]: [Circular],
              [then]: [Function],
              [catch]: [Function],
              [finally]: [Function],
              [Symbol(Symbol.toStringTag)]: 'Promise' },
           [all]: { [Function: all] [length]: 1, [name]: 'all' },
           [race]: { [Function: race] [length]: 1, [name]: 'race' },
           [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
           [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
           [Symbol(Symbol.species)]: [Getter] },
        noListener: false,
        readConcern: undefined },
     serverConfig: [Getter],
     bufferMaxEntries: [Getter],
     databaseName: [Getter] } }
13:45:06 11-2019-01 info: Connected to database
13:53:51 11-2019-01 info: Request received at router.post('/api/makeCall')
13:53:51 11-2019-01 debug: Request object : IncomingMessage {
  _readableState:
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: true,
     ended: true,
     endEmitted: true,
     reading: false,
     sync: false,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     emitClose: true,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: false,
     decoder: null,
     encoding: null },
  readable: false,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket:
   TLSSocket {
     _tlsOptions:
      { secureContext:
         SecureContext {
           context: SecureContext {},
           alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
        isServer: true,
        server:
         Server {
           _contexts: [ [length]: 0 ],
           requestCert: false,
           rejectUnauthorized: true,
           key:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
           cert:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
           honorCipherOrder: true,
           ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
           sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
           _sharedCreds:
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           _events:
            { connection: [Function],
              secureConnection: [Function],
              request: [EventEmitter],
              tlsClientError: [Function] },
           _eventsCount: 4,
           _maxListeners: undefined,
           _connections: 1,
           [connections]: [Getter/Setter],
           _handle:
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function] },
           _usingWorkers: false,
           _workers: [ [length]: 0 ],
           _unref: false,
           allowHalfOpen: false,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           maxHeadersCount: null,
           _connectionKey: '6::::8443',
           [Symbol(IncomingMessage)]:
            { [Function: IncomingMessage]
              [length]: 1,
              [name]: 'IncomingMessage',
              [prototype]: [IncomingMessage],
              super_: [Function] },
           [Symbol(ServerResponse)]:
            { [Function: ServerResponse]
              [length]: 1,
              [name]: 'ServerResponse',
              [prototype]: [ServerResponse],
              super_: [Function] },
           [Symbol(handshake-timeout)]: 120000,
           [Symbol(snicallback)]: undefined,
           [Symbol(asyncId)]: 49 },
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback:
         { [Function: SNICallback]
           [length]: 2,
           [name]: 'SNICallback',
           [prototype]: SNICallback { [constructor]: [Circular] } } },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: null,
     servername: '127.0.0.1',
     alpnProtocol: false,
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events:
      { close:
         [ { [Function: onSocketCloseDestroySSL]
             [length]: 0,
             [name]: 'onSocketCloseDestroySSL',
             [prototype]: [onSocketCloseDestroySSL] },
           { [Function: onSocketClose]
             [length]: 1,
             [name]: 'onSocketClose',
             [prototype]: [onSocketClose] },
           { [Function: bound socketOnClose] [length]: 0, [name]: 'bound socketOnClose' },
           { [Function: onServerResponseClose]
             [length]: 0,
             [name]: 'onServerResponseClose',
             [prototype]: [onServerResponseClose] },
           [length]: 4 ],
        end:
         [ { [Function: onReadableStreamEnd]
             [length]: 0,
             [name]: 'onReadableStreamEnd',
             [prototype]: [onReadableStreamEnd] },
           { [Function: bound socketOnEnd] [length]: 0, [name]: 'bound socketOnEnd' },
           [length]: 2 ],
        secure:
         { [Function: onSocketSecure]
           [length]: 0,
           [name]: 'onSocketSecure',
           [prototype]: onSocketSecure { [constructor]: [Circular] } },
        _tlsError:
         { [Function: onSocketTLSError]
           [length]: 1,
           [name]: 'onSocketTLSError',
           [prototype]: onSocketTLSError { [constructor]: [Circular] } },
        drain:
         [ { [Function: ondrain] [length]: 0, [name]: 'ondrain', [prototype]: [ondrain] },
           { [Function: bound socketOnDrain] [length]: 0, [name]: 'bound socketOnDrain' },
           [length]: 2 ],
        timeout:
         { [Function: socketOnTimeout]
           [length]: 0,
           [name]: 'socketOnTimeout',
           [prototype]: socketOnTimeout { [constructor]: [Circular] } },
        data:
         { [Function: bound socketOnData] [length]: 1, [name]: 'bound socketOnData' },
        error:
         { [Function: socketOnError]
           [length]: 1,
           [name]: 'socketOnError',
           [prototype]: socketOnError { [constructor]: [Circular] } },
        resume:
         { [Function: onSocketResume]
           [length]: 0,
           [name]: 'onSocketResume',
           [prototype]: onSocketResume { [constructor]: [Circular] } },
        pause:
         { [Function: onSocketPause]
           [length]: 0,
           [name]: 'onSocketPause',
           [prototype]: onSocketPause { [constructor]: [Circular] } } },
     _eventsCount: 10,
     connecting: false,
     _hadError: false,
     _handle:
      TLSWrap {
        _parent:
         TCP {
           reading: [Getter/Setter],
           owner:
            Socket {
              connecting: false,
              _hadError: false,
              _handle: [Circular],
              _parent: null,
              _host: null,
              _readableState: [ReadableState],
              readable: true,
              _events: [Object],
              _eventsCount: 3,
              _maxListeners: undefined,
              _writableState: [WritableState],
              writable: true,
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: [Server],
              _server: [Server],
              [Symbol(asyncId)]: 1159,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0 },
           onread:
            { [Function: onread] [length]: 2, [name]: 'onread', [prototype]: [onread] },
           onconnection: null },
        _parentWrap:
         Socket {
           connecting: false,
           _hadError: false,
           _handle:
            TCP {
              reading: [Getter/Setter],
              owner: [Circular],
              onread: [Function],
              onconnection: null },
           _parent: null,
           _host: null,
           _readableState:
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: null,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           _events: { end: [Function], connect: [Function], error: [Function] },
           _eventsCount: 3,
           _maxListeners: undefined,
           _writableState:
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: [Object] },
           writable: true,
           allowHalfOpen: false,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           _server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           [Symbol(asyncId)]: 1159,
           [Symbol(lastWriteQueueSize)]: 0,
           [Symbol(timeout)]: null,
           [Symbol(kBytesRead)]: 0,
           [Symbol(kBytesWritten)]: 0 },
        _secureContext:
         SecureContext {
           context: SecureContext {},
           alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
        reading: true,
        owner: [Circular],
        onread:
         { [Function: onread]
           [length]: 2,
           [name]: 'onread',
           [prototype]: onread { [constructor]: [Circular] } },
        onhandshakestart:
         { [Function: onhandshakestart]
           [length]: 1,
           [name]: 'onhandshakestart',
           [prototype]: onhandshakestart { [constructor]: [Circular] } },
        onhandshakedone:
         { [Function: onhandshakedone]
           [length]: 0,
           [name]: 'onhandshakedone',
           [prototype]: onhandshakedone { [constructor]: [Circular] } },
        onclienthello:
         { [Function: loadSession]
           [length]: 1,
           [name]: 'loadSession',
           [prototype]: loadSession { [constructor]: [Circular] } },
        oncertcb:
         { [Function: loadSNI]
           [length]: 1,
           [name]: 'loadSNI',
           [prototype]: loadSNI { [constructor]: [Circular] } },
        onnewsession:
         { [Function: onnewsession]
           [length]: 2,
           [name]: 'onnewsession',
           [prototype]: onnewsession { [constructor]: [Circular] } },
        lastHandshakeTime: 525673,
        handshakes: 0,
        onerror:
         { [Function: onerror]
           [length]: 1,
           [name]: 'onerror',
           [prototype]: onerror { [constructor]: [Circular] } },
        _consumed: true },
     _parent:
      Socket {
        connecting: false,
        _hadError: false,
        _handle:
         TCP {
           reading: [Getter/Setter],
           owner: [Circular],
           onread:
            { [Function: onread] [length]: 2, [name]: 'onread', [prototype]: [onread] },
           onconnection: null },
        _parent: null,
        _host: null,
        _readableState:
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: null,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           emitClose: false,
           destroyed: false,
           defaultEncoding: 'utf8',
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        _events:
         { end:
            { [Function: onReadableStreamEnd]
              [length]: 0,
              [name]: 'onReadableStreamEnd',
              [prototype]: [onReadableStreamEnd] },
           connect:
            { [Function: bound onceWrapper]
              [length]: 0,
              [name]: 'bound onceWrapper',
              listener: [Function] },
           error: { [Function] [length]: 1, [name]: '' } },
        _eventsCount: 3,
        _maxListeners: undefined,
        _writableState:
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           finalCalled: false,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           destroyed: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: true,
           bufferProcessing: false,
           onwrite:
            { [Function: bound onwrite] [length]: 1, [name]: 'bound onwrite' },
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 0,
           prefinished: false,
           errorEmitted: false,
           emitClose: false,
           bufferedRequestCount: 0,
           corkedRequestsFree: { next: null, entry: null, finish: [Function] } },
        writable: true,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server:
         Server {
           _contexts: [ [length]: 0 ],
           requestCert: false,
           rejectUnauthorized: true,
           key:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
           cert:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
           honorCipherOrder: true,
           ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
           sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
           _sharedCreds:
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           _events:
            { connection: [Function],
              secureConnection: [Function],
              request: [EventEmitter],
              tlsClientError: [Function] },
           _eventsCount: 4,
           _maxListeners: undefined,
           _connections: 1,
           [connections]: [Getter/Setter],
           _handle:
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function] },
           _usingWorkers: false,
           _workers: [ [length]: 0 ],
           _unref: false,
           allowHalfOpen: false,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           maxHeadersCount: null,
           _connectionKey: '6::::8443',
           [Symbol(IncomingMessage)]:
            { [Function: IncomingMessage]
              [length]: 1,
              [name]: 'IncomingMessage',
              [prototype]: [IncomingMessage],
              super_: [Function] },
           [Symbol(ServerResponse)]:
            { [Function: ServerResponse]
              [length]: 1,
              [name]: 'ServerResponse',
              [prototype]: [ServerResponse],
              super_: [Function] },
           [Symbol(handshake-timeout)]: 120000,
           [Symbol(snicallback)]: undefined,
           [Symbol(asyncId)]: 49 },
        _server:
         Server {
           _contexts: [ [length]: 0 ],
           requestCert: false,
           rejectUnauthorized: true,
           key:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
           cert:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
           honorCipherOrder: true,
           ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
           sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
           _sharedCreds:
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           _events:
            { connection: [Function],
              secureConnection: [Function],
              request: [EventEmitter],
              tlsClientError: [Function] },
           _eventsCount: 4,
           _maxListeners: undefined,
           _connections: 1,
           [connections]: [Getter/Setter],
           _handle:
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function] },
           _usingWorkers: false,
           _workers: [ [length]: 0 ],
           _unref: false,
           allowHalfOpen: false,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           maxHeadersCount: null,
           _connectionKey: '6::::8443',
           [Symbol(IncomingMessage)]:
            { [Function: IncomingMessage]
              [length]: 1,
              [name]: 'IncomingMessage',
              [prototype]: [IncomingMessage],
              super_: [Function] },
           [Symbol(ServerResponse)]:
            { [Function: ServerResponse]
              [length]: 1,
              [name]: 'ServerResponse',
              [prototype]: [ServerResponse],
              super_: [Function] },
           [Symbol(handshake-timeout)]: 120000,
           [Symbol(snicallback)]: undefined,
           [Symbol(asyncId)]: 49 },
        [Symbol(asyncId)]: 1159,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0 },
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        emitClose: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite:
         { [Function: bound onwrite] [length]: 1, [name]: 'bound onwrite' },
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        bufferedRequestCount: 0,
        corkedRequestsFree:
         { next: null,
           entry: null,
           finish:
            { [Function: bound onCorkedFinish] [length]: 1, [name]: 'bound onCorkedFinish' } } },
     writable: true,
     allowHalfOpen: false,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        _contexts: [ [length]: 0 ],
        requestCert: false,
        rejectUnauthorized: true,
        key:
         <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
        cert:
         <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
        honorCipherOrder: true,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
        _sharedCreds:
         SecureContext {
           context: SecureContext {},
           alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
        _events:
         { connection:
            { [Function: tlsConnectionListener]
              [length]: 1,
              [name]: 'tlsConnectionListener',
              [prototype]: [tlsConnectionListener] },
           secureConnection:
            { [Function: connectionListener]
              [length]: 1,
              [name]: 'connectionListener',
              [prototype]: [connectionListener] },
           request:
            { [EventEmitter: app]
              [length]: 3,
              [name]: 'app',
              [prototype]: [app],
              [constructor]: [Function],
              _events: [Object],
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function],
              getMaxListeners: [Function],
              emit: [Function],
              addListener: [Function],
              on: [Function],
              prependListener: [Function],
              once: [Function],
              prependOnceListener: [Function],
              removeListener: [Function],
              off: [Function],
              removeAllListeners: [Function],
              listeners: [Function],
              rawListeners: [Function],
              listenerCount: [Function],
              eventNames: [Function],
              init: [Function],
              defaultConfiguration: [Function],
              lazyrouter: [Function],
              handle: [Function],
              use: [Function],
              route: [Function],
              engine: [Function],
              param: [Function],
              set: [Function],
              path: [Function],
              enabled: [Function],
              disabled: [Function],
              enable: [Function],
              disable: [Function],
              acl: [Function],
              bind: [Function],
              checkout: [Function],
              connect: [Function],
              copy: [Function],
              delete: [Function],
              get: [Function],
              head: [Function],
              link: [Function],
              lock: [Function],
              'm-search': [Function],
              merge: [Function],
              mkactivity: [Function],
              mkcalendar: [Function],
              mkcol: [Function],
              move: [Function],
              notify: [Function],
              options: [Function],
              patch: [Function],
              post: [Function],
              propfind: [Function],
              proppatch: [Function],
              purge: [Function],
              put: [Function],
              rebind: [Function],
              report: [Function],
              search: [Function],
              source: [Function],
              subscribe: [Function],
              trace: [Function],
              unbind: [Function],
              unlink: [Function],
              unlock: [Function],
              unsubscribe: [Function],
              all: [Function],
              del: [Function],
              render: [Function],
              listen: [Function],
              request: [IncomingMessage],
              response: [ServerResponse],
              cache: {},
              engines: {},
              settings: [Object],
              locals: [Object],
              mountpath: '/',
              [router]: [Getter],
              _router: [Function] },
           tlsClientError:
            { [Function: addListener]
              [length]: 2,
              [name]: 'addListener',
              [prototype]: [addListener] } },
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        [connections]: [Getter/Setter],
        _handle:
         TCP {
           reading: false,
           owner: [Circular],
           onread: null,
           onconnection:
            { [Function: onconnection]
              [length]: 2,
              [name]: 'onconnection',
              [prototype]: [onconnection] } },
        _usingWorkers: false,
        _workers: [ [length]: 0 ],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        _connectionKey: '6::::8443',
        [Symbol(IncomingMessage)]:
         { [Function: IncomingMessage]
           [length]: 1,
           [name]: 'IncomingMessage',
           [prototype]:
            IncomingMessage {
              [constructor]: [Circular],
              setTimeout: [Function],
              _read: [Function],
              destroy: [Function],
              _addHeaderLines: [Function],
              _addHeaderLine: [Function],
              _dump: [Function] },
           super_:
            { [Function: Readable]
              [length]: 1,
              [name]: 'Readable',
              [prototype]: [Readable],
              ReadableState: [Function],
              super_: [Function],
              _fromList: [Function] } },
        [Symbol(ServerResponse)]:
         { [Function: ServerResponse]
           [length]: 1,
           [name]: 'ServerResponse',
           [prototype]:
            ServerResponse {
              [constructor]: [Circular],
              _finish: [Function],
              statusCode: 200,
              statusMessage: undefined,
              assignSocket: [Function],
              detachSocket: [Function],
              writeContinue: [Function],
              writeProcessing: [Function],
              _implicitHeader: [Function],
              writeHead: [Function],
              writeHeader: [Function] },
           super_:
            { [Function: OutgoingMessage]
              [length]: 0,
              [name]: 'OutgoingMessage',
              [prototype]: [OutgoingMessage],
              super_: [Function] } },
        [Symbol(handshake-timeout)]: 120000,
        [Symbol(snicallback)]: undefined,
        [Symbol(asyncId)]: 49 },
     _server: null,
     ssl:
      TLSWrap {
        _parent:
         TCP {
           reading: [Getter/Setter],
           owner:
            Socket {
              connecting: false,
              _hadError: false,
              _handle: [Circular],
              _parent: null,
              _host: null,
              _readableState: [ReadableState],
              readable: true,
              _events: [Object],
              _eventsCount: 3,
              _maxListeners: undefined,
              _writableState: [WritableState],
              writable: true,
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: [Server],
              _server: [Server],
              [Symbol(asyncId)]: 1159,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0 },
           onread:
            { [Function: onread] [length]: 2, [name]: 'onread', [prototype]: [onread] },
           onconnection: null },
        _parentWrap:
         Socket {
           connecting: false,
           _hadError: false,
           _handle:
            TCP {
              reading: [Getter/Setter],
              owner: [Circular],
              onread: [Function],
              onconnection: null },
           _parent: null,
           _host: null,
           _readableState:
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: null,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           _events: { end: [Function], connect: [Function], error: [Function] },
           _eventsCount: 3,
           _maxListeners: undefined,
           _writableState:
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: [Object] },
           writable: true,
           allowHalfOpen: false,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           _server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           [Symbol(asyncId)]: 1159,
           [Symbol(lastWriteQueueSize)]: 0,
           [Symbol(timeout)]: null,
           [Symbol(kBytesRead)]: 0,
           [Symbol(kBytesWritten)]: 0 },
        _secureContext:
         SecureContext {
           context: SecureContext {},
           alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
        reading: true,
        owner: [Circular],
        onread:
         { [Function: onread]
           [length]: 2,
           [name]: 'onread',
           [prototype]: onread { [constructor]: [Circular] } },
        onhandshakestart:
         { [Function: onhandshakestart]
           [length]: 1,
           [name]: 'onhandshakestart',
           [prototype]: onhandshakestart { [constructor]: [Circular] } },
        onhandshakedone:
         { [Function: onhandshakedone]
           [length]: 0,
           [name]: 'onhandshakedone',
           [prototype]: onhandshakedone { [constructor]: [Circular] } },
        onclienthello:
         { [Function: loadSession]
           [length]: 1,
           [name]: 'loadSession',
           [prototype]: loadSession { [constructor]: [Circular] } },
        oncertcb:
         { [Function: loadSNI]
           [length]: 1,
           [name]: 'loadSNI',
           [prototype]: loadSNI { [constructor]: [Circular] } },
        onnewsession:
         { [Function: onnewsession]
           [length]: 2,
           [name]: 'onnewsession',
           [prototype]: onnewsession { [constructor]: [Circular] } },
        lastHandshakeTime: 525673,
        handshakes: 0,
        onerror:
         { [Function: onerror]
           [length]: 1,
           [name]: 'onerror',
           [prototype]: onerror { [constructor]: [Circular] } },
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     timeout: 120000,
     parser:
      HTTPParser {
        '0':
         { [Function: parserOnHeaders]
           [length]: 2,
           [name]: 'parserOnHeaders',
           [prototype]: parserOnHeaders { [constructor]: [Circular] } },
        '1':
         { [Function: parserOnHeadersComplete]
           [length]: 9,
           [name]: 'parserOnHeadersComplete',
           [prototype]: parserOnHeadersComplete { [constructor]: [Circular] } },
        '2':
         { [Function: parserOnBody]
           [length]: 3,
           [name]: 'parserOnBody',
           [prototype]: parserOnBody { [constructor]: [Circular] } },
        '3':
         { [Function: parserOnMessageComplete]
           [length]: 0,
           [name]: 'parserOnMessageComplete',
           [prototype]: parserOnMessageComplete { [constructor]: [Circular] } },
        '4':
         { [Function: bound onParserExecute] [length]: 1, [name]: 'bound onParserExecute' },
        _headers: [ [length]: 0 ],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming:
         { [Function: bound parserOnIncoming] [length]: 2, [name]: 'bound parserOnIncoming' } },
     on:
      { [Function: socketOnWrap]
        [length]: 2,
        [name]: 'socketOnWrap',
        [prototype]: socketOnWrap { [constructor]: [Circular] } },
     _paused: false,
     _httpMessage:
      ServerResponse {
        _events:
         { finish:
            { [Function: bound resOnFinish] [length]: 0, [name]: 'bound resOnFinish' } },
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [ [length]: 0 ],
        outputEncodings: [ [length]: 0 ],
        outputCallbacks: [ [length]: 0 ],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData:
         { [Function: bound updateOutgoingData] [length]: 1, [name]: 'bound updateOutgoingData' },
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]:
         { 'x-powered-by': [ 'X-Powered-By', 'Express', [length]: 2 ] } },
     [Symbol(res)]:
      TLSWrap {
        _parent:
         TCP {
           reading: [Getter/Setter],
           owner:
            Socket {
              connecting: false,
              _hadError: false,
              _handle: [Circular],
              _parent: null,
              _host: null,
              _readableState: [ReadableState],
              readable: true,
              _events: [Object],
              _eventsCount: 3,
              _maxListeners: undefined,
              _writableState: [WritableState],
              writable: true,
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: [Server],
              _server: [Server],
              [Symbol(asyncId)]: 1159,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0 },
           onread:
            { [Function: onread] [length]: 2, [name]: 'onread', [prototype]: [onread] },
           onconnection: null },
        _parentWrap:
         Socket {
           connecting: false,
           _hadError: false,
           _handle:
            TCP {
              reading: [Getter/Setter],
              owner: [Circular],
              onread: [Function],
              onconnection: null },
           _parent: null,
           _host: null,
           _readableState:
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: null,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           _events: { end: [Function], connect: [Function], error: [Function] },
           _eventsCount: 3,
           _maxListeners: undefined,
           _writableState:
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: [Object] },
           writable: true,
           allowHalfOpen: false,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           _server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           [Symbol(asyncId)]: 1159,
           [Symbol(lastWriteQueueSize)]: 0,
           [Symbol(timeout)]: null,
           [Symbol(kBytesRead)]: 0,
           [Symbol(kBytesWritten)]: 0 },
        _secureContext:
         SecureContext {
           context: SecureContext {},
           alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
        reading: true,
        owner: [Circular],
        onread:
         { [Function: onread]
           [length]: 2,
           [name]: 'onread',
           [prototype]: onread { [constructor]: [Circular] } },
        onhandshakestart:
         { [Function: onhandshakestart]
           [length]: 1,
           [name]: 'onhandshakestart',
           [prototype]: onhandshakestart { [constructor]: [Circular] } },
        onhandshakedone:
         { [Function: onhandshakedone]
           [length]: 0,
           [name]: 'onhandshakedone',
           [prototype]: onhandshakedone { [constructor]: [Circular] } },
        onclienthello:
         { [Function: loadSession]
           [length]: 1,
           [name]: 'loadSession',
           [prototype]: loadSession { [constructor]: [Circular] } },
        oncertcb:
         { [Function: loadSNI]
           [length]: 1,
           [name]: 'loadSNI',
           [prototype]: loadSNI { [constructor]: [Circular] } },
        onnewsession:
         { [Function: onnewsession]
           [length]: 2,
           [name]: 'onnewsession',
           [prototype]: onnewsession { [constructor]: [Circular] } },
        lastHandshakeTime: 525673,
        handshakes: 0,
        onerror:
         { [Function: onerror]
           [length]: 1,
           [name]: 'onerror',
           [prototype]: onerror { [constructor]: [Circular] } },
        _consumed: true },
     [Symbol(asyncId)]: 1160,
     [Symbol(lastWriteQueueSize)]: 0,
     [Symbol(timeout)]:
      Timeout {
        _called: false,
        _idleTimeout: 120000,
        _idlePrev:
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _unrefed: true,
           msecs: 120000,
           _timer: Timer { _list: [Circular] } },
        _idleNext:
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _unrefed: true,
           msecs: 120000,
           _timer: Timer { _list: [Circular] } },
        _idleStart: 525689,
        _onTimeout: { [Function: bound ] [length]: 0, [name]: 'bound ' },
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(unrefed)]: true,
        [Symbol(asyncId)]: 1164,
        [Symbol(triggerId)]: 1160 },
     [Symbol(kBytesRead)]: 0,
     [Symbol(kBytesWritten)]: 0,
     [Symbol(error-emitted)]: false },
  connection:
   TLSSocket {
     _tlsOptions:
      { secureContext:
         SecureContext {
           context: SecureContext {},
           alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
        isServer: true,
        server:
         Server {
           _contexts: [ [length]: 0 ],
           requestCert: false,
           rejectUnauthorized: true,
           key:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
           cert:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
           honorCipherOrder: true,
           ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
           sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
           _sharedCreds:
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           _events:
            { connection: [Function],
              secureConnection: [Function],
              request: [EventEmitter],
              tlsClientError: [Function] },
           _eventsCount: 4,
           _maxListeners: undefined,
           _connections: 1,
           [connections]: [Getter/Setter],
           _handle:
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function] },
           _usingWorkers: false,
           _workers: [ [length]: 0 ],
           _unref: false,
           allowHalfOpen: false,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           maxHeadersCount: null,
           _connectionKey: '6::::8443',
           [Symbol(IncomingMessage)]:
            { [Function: IncomingMessage]
              [length]: 1,
              [name]: 'IncomingMessage',
              [prototype]: [IncomingMessage],
              super_: [Function] },
           [Symbol(ServerResponse)]:
            { [Function: ServerResponse]
              [length]: 1,
              [name]: 'ServerResponse',
              [prototype]: [ServerResponse],
              super_: [Function] },
           [Symbol(handshake-timeout)]: 120000,
           [Symbol(snicallback)]: undefined,
           [Symbol(asyncId)]: 49 },
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback:
         { [Function: SNICallback]
           [length]: 2,
           [name]: 'SNICallback',
           [prototype]: SNICallback { [constructor]: [Circular] } } },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: null,
     servername: '127.0.0.1',
     alpnProtocol: false,
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events:
      { close:
         [ { [Function: onSocketCloseDestroySSL]
             [length]: 0,
             [name]: 'onSocketCloseDestroySSL',
             [prototype]: [onSocketCloseDestroySSL] },
           { [Function: onSocketClose]
             [length]: 1,
             [name]: 'onSocketClose',
             [prototype]: [onSocketClose] },
           { [Function: bound socketOnClose] [length]: 0, [name]: 'bound socketOnClose' },
           { [Function: onServerResponseClose]
             [length]: 0,
             [name]: 'onServerResponseClose',
             [prototype]: [onServerResponseClose] },
           [length]: 4 ],
        end:
         [ { [Function: onReadableStreamEnd]
             [length]: 0,
             [name]: 'onReadableStreamEnd',
             [prototype]: [onReadableStreamEnd] },
           { [Function: bound socketOnEnd] [length]: 0, [name]: 'bound socketOnEnd' },
           [length]: 2 ],
        secure:
         { [Function: onSocketSecure]
           [length]: 0,
           [name]: 'onSocketSecure',
           [prototype]: onSocketSecure { [constructor]: [Circular] } },
        _tlsError:
         { [Function: onSocketTLSError]
           [length]: 1,
           [name]: 'onSocketTLSError',
           [prototype]: onSocketTLSError { [constructor]: [Circular] } },
        drain:
         [ { [Function: ondrain] [length]: 0, [name]: 'ondrain', [prototype]: [ondrain] },
           { [Function: bound socketOnDrain] [length]: 0, [name]: 'bound socketOnDrain' },
           [length]: 2 ],
        timeout:
         { [Function: socketOnTimeout]
           [length]: 0,
           [name]: 'socketOnTimeout',
           [prototype]: socketOnTimeout { [constructor]: [Circular] } },
        data:
         { [Function: bound socketOnData] [length]: 1, [name]: 'bound socketOnData' },
        error:
         { [Function: socketOnError]
           [length]: 1,
           [name]: 'socketOnError',
           [prototype]: socketOnError { [constructor]: [Circular] } },
        resume:
         { [Function: onSocketResume]
           [length]: 0,
           [name]: 'onSocketResume',
           [prototype]: onSocketResume { [constructor]: [Circular] } },
        pause:
         { [Function: onSocketPause]
           [length]: 0,
           [name]: 'onSocketPause',
           [prototype]: onSocketPause { [constructor]: [Circular] } } },
     _eventsCount: 10,
     connecting: false,
     _hadError: false,
     _handle:
      TLSWrap {
        _parent:
         TCP {
           reading: [Getter/Setter],
           owner:
            Socket {
              connecting: false,
              _hadError: false,
              _handle: [Circular],
              _parent: null,
              _host: null,
              _readableState: [ReadableState],
              readable: true,
              _events: [Object],
              _eventsCount: 3,
              _maxListeners: undefined,
              _writableState: [WritableState],
              writable: true,
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: [Server],
              _server: [Server],
              [Symbol(asyncId)]: 1159,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0 },
           onread:
            { [Function: onread] [length]: 2, [name]: 'onread', [prototype]: [onread] },
           onconnection: null },
        _parentWrap:
         Socket {
           connecting: false,
           _hadError: false,
           _handle:
            TCP {
              reading: [Getter/Setter],
              owner: [Circular],
              onread: [Function],
              onconnection: null },
           _parent: null,
           _host: null,
           _readableState:
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: null,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           _events: { end: [Function], connect: [Function], error: [Function] },
           _eventsCount: 3,
           _maxListeners: undefined,
           _writableState:
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: [Object] },
           writable: true,
           allowHalfOpen: false,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           _server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           [Symbol(asyncId)]: 1159,
           [Symbol(lastWriteQueueSize)]: 0,
           [Symbol(timeout)]: null,
           [Symbol(kBytesRead)]: 0,
           [Symbol(kBytesWritten)]: 0 },
        _secureContext:
         SecureContext {
           context: SecureContext {},
           alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
        reading: true,
        owner: [Circular],
        onread:
         { [Function: onread]
           [length]: 2,
           [name]: 'onread',
           [prototype]: onread { [constructor]: [Circular] } },
        onhandshakestart:
         { [Function: onhandshakestart]
           [length]: 1,
           [name]: 'onhandshakestart',
           [prototype]: onhandshakestart { [constructor]: [Circular] } },
        onhandshakedone:
         { [Function: onhandshakedone]
           [length]: 0,
           [name]: 'onhandshakedone',
           [prototype]: onhandshakedone { [constructor]: [Circular] } },
        onclienthello:
         { [Function: loadSession]
           [length]: 1,
           [name]: 'loadSession',
           [prototype]: loadSession { [constructor]: [Circular] } },
        oncertcb:
         { [Function: loadSNI]
           [length]: 1,
           [name]: 'loadSNI',
           [prototype]: loadSNI { [constructor]: [Circular] } },
        onnewsession:
         { [Function: onnewsession]
           [length]: 2,
           [name]: 'onnewsession',
           [prototype]: onnewsession { [constructor]: [Circular] } },
        lastHandshakeTime: 525673,
        handshakes: 0,
        onerror:
         { [Function: onerror]
           [length]: 1,
           [name]: 'onerror',
           [prototype]: onerror { [constructor]: [Circular] } },
        _consumed: true },
     _parent:
      Socket {
        connecting: false,
        _hadError: false,
        _handle:
         TCP {
           reading: [Getter/Setter],
           owner: [Circular],
           onread:
            { [Function: onread] [length]: 2, [name]: 'onread', [prototype]: [onread] },
           onconnection: null },
        _parent: null,
        _host: null,
        _readableState:
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: null,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           emitClose: false,
           destroyed: false,
           defaultEncoding: 'utf8',
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        _events:
         { end:
            { [Function: onReadableStreamEnd]
              [length]: 0,
              [name]: 'onReadableStreamEnd',
              [prototype]: [onReadableStreamEnd] },
           connect:
            { [Function: bound onceWrapper]
              [length]: 0,
              [name]: 'bound onceWrapper',
              listener: [Function] },
           error: { [Function] [length]: 1, [name]: '' } },
        _eventsCount: 3,
        _maxListeners: undefined,
        _writableState:
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           finalCalled: false,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           destroyed: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: true,
           bufferProcessing: false,
           onwrite:
            { [Function: bound onwrite] [length]: 1, [name]: 'bound onwrite' },
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 0,
           prefinished: false,
           errorEmitted: false,
           emitClose: false,
           bufferedRequestCount: 0,
           corkedRequestsFree: { next: null, entry: null, finish: [Function] } },
        writable: true,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server:
         Server {
           _contexts: [ [length]: 0 ],
           requestCert: false,
           rejectUnauthorized: true,
           key:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
           cert:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
           honorCipherOrder: true,
           ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
           sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
           _sharedCreds:
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           _events:
            { connection: [Function],
              secureConnection: [Function],
              request: [EventEmitter],
              tlsClientError: [Function] },
           _eventsCount: 4,
           _maxListeners: undefined,
           _connections: 1,
           [connections]: [Getter/Setter],
           _handle:
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function] },
           _usingWorkers: false,
           _workers: [ [length]: 0 ],
           _unref: false,
           allowHalfOpen: false,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           maxHeadersCount: null,
           _connectionKey: '6::::8443',
           [Symbol(IncomingMessage)]:
            { [Function: IncomingMessage]
              [length]: 1,
              [name]: 'IncomingMessage',
              [prototype]: [IncomingMessage],
              super_: [Function] },
           [Symbol(ServerResponse)]:
            { [Function: ServerResponse]
              [length]: 1,
              [name]: 'ServerResponse',
              [prototype]: [ServerResponse],
              super_: [Function] },
           [Symbol(handshake-timeout)]: 120000,
           [Symbol(snicallback)]: undefined,
           [Symbol(asyncId)]: 49 },
        _server:
         Server {
           _contexts: [ [length]: 0 ],
           requestCert: false,
           rejectUnauthorized: true,
           key:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
           cert:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
           honorCipherOrder: true,
           ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
           sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
           _sharedCreds:
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           _events:
            { connection: [Function],
              secureConnection: [Function],
              request: [EventEmitter],
              tlsClientError: [Function] },
           _eventsCount: 4,
           _maxListeners: undefined,
           _connections: 1,
           [connections]: [Getter/Setter],
           _handle:
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function] },
           _usingWorkers: false,
           _workers: [ [length]: 0 ],
           _unref: false,
           allowHalfOpen: false,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           maxHeadersCount: null,
           _connectionKey: '6::::8443',
           [Symbol(IncomingMessage)]:
            { [Function: IncomingMessage]
              [length]: 1,
              [name]: 'IncomingMessage',
              [prototype]: [IncomingMessage],
              super_: [Function] },
           [Symbol(ServerResponse)]:
            { [Function: ServerResponse]
              [length]: 1,
              [name]: 'ServerResponse',
              [prototype]: [ServerResponse],
              super_: [Function] },
           [Symbol(handshake-timeout)]: 120000,
           [Symbol(snicallback)]: undefined,
           [Symbol(asyncId)]: 49 },
        [Symbol(asyncId)]: 1159,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0 },
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        emitClose: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite:
         { [Function: bound onwrite] [length]: 1, [name]: 'bound onwrite' },
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        bufferedRequestCount: 0,
        corkedRequestsFree:
         { next: null,
           entry: null,
           finish:
            { [Function: bound onCorkedFinish] [length]: 1, [name]: 'bound onCorkedFinish' } } },
     writable: true,
     allowHalfOpen: false,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        _contexts: [ [length]: 0 ],
        requestCert: false,
        rejectUnauthorized: true,
        key:
         <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
        cert:
         <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
        honorCipherOrder: true,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
        _sharedCreds:
         SecureContext {
           context: SecureContext {},
           alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
        _events:
         { connection:
            { [Function: tlsConnectionListener]
              [length]: 1,
              [name]: 'tlsConnectionListener',
              [prototype]: [tlsConnectionListener] },
           secureConnection:
            { [Function: connectionListener]
              [length]: 1,
              [name]: 'connectionListener',
              [prototype]: [connectionListener] },
           request:
            { [EventEmitter: app]
              [length]: 3,
              [name]: 'app',
              [prototype]: [app],
              [constructor]: [Function],
              _events: [Object],
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function],
              getMaxListeners: [Function],
              emit: [Function],
              addListener: [Function],
              on: [Function],
              prependListener: [Function],
              once: [Function],
              prependOnceListener: [Function],
              removeListener: [Function],
              off: [Function],
              removeAllListeners: [Function],
              listeners: [Function],
              rawListeners: [Function],
              listenerCount: [Function],
              eventNames: [Function],
              init: [Function],
              defaultConfiguration: [Function],
              lazyrouter: [Function],
              handle: [Function],
              use: [Function],
              route: [Function],
              engine: [Function],
              param: [Function],
              set: [Function],
              path: [Function],
              enabled: [Function],
              disabled: [Function],
              enable: [Function],
              disable: [Function],
              acl: [Function],
              bind: [Function],
              checkout: [Function],
              connect: [Function],
              copy: [Function],
              delete: [Function],
              get: [Function],
              head: [Function],
              link: [Function],
              lock: [Function],
              'm-search': [Function],
              merge: [Function],
              mkactivity: [Function],
              mkcalendar: [Function],
              mkcol: [Function],
              move: [Function],
              notify: [Function],
              options: [Function],
              patch: [Function],
              post: [Function],
              propfind: [Function],
              proppatch: [Function],
              purge: [Function],
              put: [Function],
              rebind: [Function],
              report: [Function],
              search: [Function],
              source: [Function],
              subscribe: [Function],
              trace: [Function],
              unbind: [Function],
              unlink: [Function],
              unlock: [Function],
              unsubscribe: [Function],
              all: [Function],
              del: [Function],
              render: [Function],
              listen: [Function],
              request: [IncomingMessage],
              response: [ServerResponse],
              cache: {},
              engines: {},
              settings: [Object],
              locals: [Object],
              mountpath: '/',
              [router]: [Getter],
              _router: [Function] },
           tlsClientError:
            { [Function: addListener]
              [length]: 2,
              [name]: 'addListener',
              [prototype]: [addListener] } },
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        [connections]: [Getter/Setter],
        _handle:
         TCP {
           reading: false,
           owner: [Circular],
           onread: null,
           onconnection:
            { [Function: onconnection]
              [length]: 2,
              [name]: 'onconnection',
              [prototype]: [onconnection] } },
        _usingWorkers: false,
        _workers: [ [length]: 0 ],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        _connectionKey: '6::::8443',
        [Symbol(IncomingMessage)]:
         { [Function: IncomingMessage]
           [length]: 1,
           [name]: 'IncomingMessage',
           [prototype]:
            IncomingMessage {
              [constructor]: [Circular],
              setTimeout: [Function],
              _read: [Function],
              destroy: [Function],
              _addHeaderLines: [Function],
              _addHeaderLine: [Function],
              _dump: [Function] },
           super_:
            { [Function: Readable]
              [length]: 1,
              [name]: 'Readable',
              [prototype]: [Readable],
              ReadableState: [Function],
              super_: [Function],
              _fromList: [Function] } },
        [Symbol(ServerResponse)]:
         { [Function: ServerResponse]
           [length]: 1,
           [name]: 'ServerResponse',
           [prototype]:
            ServerResponse {
              [constructor]: [Circular],
              _finish: [Function],
              statusCode: 200,
              statusMessage: undefined,
              assignSocket: [Function],
              detachSocket: [Function],
              writeContinue: [Function],
              writeProcessing: [Function],
              _implicitHeader: [Function],
              writeHead: [Function],
              writeHeader: [Function] },
           super_:
            { [Function: OutgoingMessage]
              [length]: 0,
              [name]: 'OutgoingMessage',
              [prototype]: [OutgoingMessage],
              super_: [Function] } },
        [Symbol(handshake-timeout)]: 120000,
        [Symbol(snicallback)]: undefined,
        [Symbol(asyncId)]: 49 },
     _server: null,
     ssl:
      TLSWrap {
        _parent:
         TCP {
           reading: [Getter/Setter],
           owner:
            Socket {
              connecting: false,
              _hadError: false,
              _handle: [Circular],
              _parent: null,
              _host: null,
              _readableState: [ReadableState],
              readable: true,
              _events: [Object],
              _eventsCount: 3,
              _maxListeners: undefined,
              _writableState: [WritableState],
              writable: true,
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: [Server],
              _server: [Server],
              [Symbol(asyncId)]: 1159,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0 },
           onread:
            { [Function: onread] [length]: 2, [name]: 'onread', [prototype]: [onread] },
           onconnection: null },
        _parentWrap:
         Socket {
           connecting: false,
           _hadError: false,
           _handle:
            TCP {
              reading: [Getter/Setter],
              owner: [Circular],
              onread: [Function],
              onconnection: null },
           _parent: null,
           _host: null,
           _readableState:
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: null,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           _events: { end: [Function], connect: [Function], error: [Function] },
           _eventsCount: 3,
           _maxListeners: undefined,
           _writableState:
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: [Object] },
           writable: true,
           allowHalfOpen: false,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           _server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           [Symbol(asyncId)]: 1159,
           [Symbol(lastWriteQueueSize)]: 0,
           [Symbol(timeout)]: null,
           [Symbol(kBytesRead)]: 0,
           [Symbol(kBytesWritten)]: 0 },
        _secureContext:
         SecureContext {
           context: SecureContext {},
           alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
        reading: true,
        owner: [Circular],
        onread:
         { [Function: onread]
           [length]: 2,
           [name]: 'onread',
           [prototype]: onread { [constructor]: [Circular] } },
        onhandshakestart:
         { [Function: onhandshakestart]
           [length]: 1,
           [name]: 'onhandshakestart',
           [prototype]: onhandshakestart { [constructor]: [Circular] } },
        onhandshakedone:
         { [Function: onhandshakedone]
           [length]: 0,
           [name]: 'onhandshakedone',
           [prototype]: onhandshakedone { [constructor]: [Circular] } },
        onclienthello:
         { [Function: loadSession]
           [length]: 1,
           [name]: 'loadSession',
           [prototype]: loadSession { [constructor]: [Circular] } },
        oncertcb:
         { [Function: loadSNI]
           [length]: 1,
           [name]: 'loadSNI',
           [prototype]: loadSNI { [constructor]: [Circular] } },
        onnewsession:
         { [Function: onnewsession]
           [length]: 2,
           [name]: 'onnewsession',
           [prototype]: onnewsession { [constructor]: [Circular] } },
        lastHandshakeTime: 525673,
        handshakes: 0,
        onerror:
         { [Function: onerror]
           [length]: 1,
           [name]: 'onerror',
           [prototype]: onerror { [constructor]: [Circular] } },
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     timeout: 120000,
     parser:
      HTTPParser {
        '0':
         { [Function: parserOnHeaders]
           [length]: 2,
           [name]: 'parserOnHeaders',
           [prototype]: parserOnHeaders { [constructor]: [Circular] } },
        '1':
         { [Function: parserOnHeadersComplete]
           [length]: 9,
           [name]: 'parserOnHeadersComplete',
           [prototype]: parserOnHeadersComplete { [constructor]: [Circular] } },
        '2':
         { [Function: parserOnBody]
           [length]: 3,
           [name]: 'parserOnBody',
           [prototype]: parserOnBody { [constructor]: [Circular] } },
        '3':
         { [Function: parserOnMessageComplete]
           [length]: 0,
           [name]: 'parserOnMessageComplete',
           [prototype]: parserOnMessageComplete { [constructor]: [Circular] } },
        '4':
         { [Function: bound onParserExecute] [length]: 1, [name]: 'bound onParserExecute' },
        _headers: [ [length]: 0 ],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming:
         { [Function: bound parserOnIncoming] [length]: 2, [name]: 'bound parserOnIncoming' } },
     on:
      { [Function: socketOnWrap]
        [length]: 2,
        [name]: 'socketOnWrap',
        [prototype]: socketOnWrap { [constructor]: [Circular] } },
     _paused: false,
     _httpMessage:
      ServerResponse {
        _events:
         { finish:
            { [Function: bound resOnFinish] [length]: 0, [name]: 'bound resOnFinish' } },
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [ [length]: 0 ],
        outputEncodings: [ [length]: 0 ],
        outputCallbacks: [ [length]: 0 ],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData:
         { [Function: bound updateOutgoingData] [length]: 1, [name]: 'bound updateOutgoingData' },
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]:
         { 'x-powered-by': [ 'X-Powered-By', 'Express', [length]: 2 ] } },
     [Symbol(res)]:
      TLSWrap {
        _parent:
         TCP {
           reading: [Getter/Setter],
           owner:
            Socket {
              connecting: false,
              _hadError: false,
              _handle: [Circular],
              _parent: null,
              _host: null,
              _readableState: [ReadableState],
              readable: true,
              _events: [Object],
              _eventsCount: 3,
              _maxListeners: undefined,
              _writableState: [WritableState],
              writable: true,
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: [Server],
              _server: [Server],
              [Symbol(asyncId)]: 1159,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0 },
           onread:
            { [Function: onread] [length]: 2, [name]: 'onread', [prototype]: [onread] },
           onconnection: null },
        _parentWrap:
         Socket {
           connecting: false,
           _hadError: false,
           _handle:
            TCP {
              reading: [Getter/Setter],
              owner: [Circular],
              onread: [Function],
              onconnection: null },
           _parent: null,
           _host: null,
           _readableState:
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: null,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           _events: { end: [Function], connect: [Function], error: [Function] },
           _eventsCount: 3,
           _maxListeners: undefined,
           _writableState:
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: [Object] },
           writable: true,
           allowHalfOpen: false,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           _server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           [Symbol(asyncId)]: 1159,
           [Symbol(lastWriteQueueSize)]: 0,
           [Symbol(timeout)]: null,
           [Symbol(kBytesRead)]: 0,
           [Symbol(kBytesWritten)]: 0 },
        _secureContext:
         SecureContext {
           context: SecureContext {},
           alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
        reading: true,
        owner: [Circular],
        onread:
         { [Function: onread]
           [length]: 2,
           [name]: 'onread',
           [prototype]: onread { [constructor]: [Circular] } },
        onhandshakestart:
         { [Function: onhandshakestart]
           [length]: 1,
           [name]: 'onhandshakestart',
           [prototype]: onhandshakestart { [constructor]: [Circular] } },
        onhandshakedone:
         { [Function: onhandshakedone]
           [length]: 0,
           [name]: 'onhandshakedone',
           [prototype]: onhandshakedone { [constructor]: [Circular] } },
        onclienthello:
         { [Function: loadSession]
           [length]: 1,
           [name]: 'loadSession',
           [prototype]: loadSession { [constructor]: [Circular] } },
        oncertcb:
         { [Function: loadSNI]
           [length]: 1,
           [name]: 'loadSNI',
           [prototype]: loadSNI { [constructor]: [Circular] } },
        onnewsession:
         { [Function: onnewsession]
           [length]: 2,
           [name]: 'onnewsession',
           [prototype]: onnewsession { [constructor]: [Circular] } },
        lastHandshakeTime: 525673,
        handshakes: 0,
        onerror:
         { [Function: onerror]
           [length]: 1,
           [name]: 'onerror',
           [prototype]: onerror { [constructor]: [Circular] } },
        _consumed: true },
     [Symbol(asyncId)]: 1160,
     [Symbol(lastWriteQueueSize)]: 0,
     [Symbol(timeout)]:
      Timeout {
        _called: false,
        _idleTimeout: 120000,
        _idlePrev:
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _unrefed: true,
           msecs: 120000,
           _timer: Timer { _list: [Circular] } },
        _idleNext:
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _unrefed: true,
           msecs: 120000,
           _timer: Timer { _list: [Circular] } },
        _idleStart: 525689,
        _onTimeout: { [Function: bound ] [length]: 0, [name]: 'bound ' },
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(unrefed)]: true,
        [Symbol(asyncId)]: 1164,
        [Symbol(triggerId)]: 1160 },
     [Symbol(kBytesRead)]: 0,
     [Symbol(kBytesWritten)]: 0,
     [Symbol(error-emitted)]: false },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: true,
  headers:
   { host: '127.0.0.1:8443',
     accept: 'application/json',
     'content-type': 'application/json',
     'content-length': '36',
     connection: 'close' },
  rawHeaders:
   [ 'host',
     '127.0.0.1:8443',
     'accept',
     'application/json',
     'content-type',
     'application/json',
     'content-length',
     '36',
     'Connection',
     'close',
     [length]: 10 ],
  trailers: {},
  rawTrailers: [ [length]: 0 ],
  aborted: false,
  upgrade: false,
  url: '/api/makeCall',
  method: 'POST',
  statusCode: null,
  statusMessage: null,
  client:
   TLSSocket {
     _tlsOptions:
      { secureContext:
         SecureContext {
           context: SecureContext {},
           alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
        isServer: true,
        server:
         Server {
           _contexts: [ [length]: 0 ],
           requestCert: false,
           rejectUnauthorized: true,
           key:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
           cert:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
           honorCipherOrder: true,
           ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
           sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
           _sharedCreds:
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           _events:
            { connection: [Function],
              secureConnection: [Function],
              request: [EventEmitter],
              tlsClientError: [Function] },
           _eventsCount: 4,
           _maxListeners: undefined,
           _connections: 1,
           [connections]: [Getter/Setter],
           _handle:
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function] },
           _usingWorkers: false,
           _workers: [ [length]: 0 ],
           _unref: false,
           allowHalfOpen: false,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           maxHeadersCount: null,
           _connectionKey: '6::::8443',
           [Symbol(IncomingMessage)]:
            { [Function: IncomingMessage]
              [length]: 1,
              [name]: 'IncomingMessage',
              [prototype]: [IncomingMessage],
              super_: [Function] },
           [Symbol(ServerResponse)]:
            { [Function: ServerResponse]
              [length]: 1,
              [name]: 'ServerResponse',
              [prototype]: [ServerResponse],
              super_: [Function] },
           [Symbol(handshake-timeout)]: 120000,
           [Symbol(snicallback)]: undefined,
           [Symbol(asyncId)]: 49 },
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback:
         { [Function: SNICallback]
           [length]: 2,
           [name]: 'SNICallback',
           [prototype]: SNICallback { [constructor]: [Circular] } } },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: null,
     servername: '127.0.0.1',
     alpnProtocol: false,
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events:
      { close:
         [ { [Function: onSocketCloseDestroySSL]
             [length]: 0,
             [name]: 'onSocketCloseDestroySSL',
             [prototype]: [onSocketCloseDestroySSL] },
           { [Function: onSocketClose]
             [length]: 1,
             [name]: 'onSocketClose',
             [prototype]: [onSocketClose] },
           { [Function: bound socketOnClose] [length]: 0, [name]: 'bound socketOnClose' },
           { [Function: onServerResponseClose]
             [length]: 0,
             [name]: 'onServerResponseClose',
             [prototype]: [onServerResponseClose] },
           [length]: 4 ],
        end:
         [ { [Function: onReadableStreamEnd]
             [length]: 0,
             [name]: 'onReadableStreamEnd',
             [prototype]: [onReadableStreamEnd] },
           { [Function: bound socketOnEnd] [length]: 0, [name]: 'bound socketOnEnd' },
           [length]: 2 ],
        secure:
         { [Function: onSocketSecure]
           [length]: 0,
           [name]: 'onSocketSecure',
           [prototype]: onSocketSecure { [constructor]: [Circular] } },
        _tlsError:
         { [Function: onSocketTLSError]
           [length]: 1,
           [name]: 'onSocketTLSError',
           [prototype]: onSocketTLSError { [constructor]: [Circular] } },
        drain:
         [ { [Function: ondrain] [length]: 0, [name]: 'ondrain', [prototype]: [ondrain] },
           { [Function: bound socketOnDrain] [length]: 0, [name]: 'bound socketOnDrain' },
           [length]: 2 ],
        timeout:
         { [Function: socketOnTimeout]
           [length]: 0,
           [name]: 'socketOnTimeout',
           [prototype]: socketOnTimeout { [constructor]: [Circular] } },
        data:
         { [Function: bound socketOnData] [length]: 1, [name]: 'bound socketOnData' },
        error:
         { [Function: socketOnError]
           [length]: 1,
           [name]: 'socketOnError',
           [prototype]: socketOnError { [constructor]: [Circular] } },
        resume:
         { [Function: onSocketResume]
           [length]: 0,
           [name]: 'onSocketResume',
           [prototype]: onSocketResume { [constructor]: [Circular] } },
        pause:
         { [Function: onSocketPause]
           [length]: 0,
           [name]: 'onSocketPause',
           [prototype]: onSocketPause { [constructor]: [Circular] } } },
     _eventsCount: 10,
     connecting: false,
     _hadError: false,
     _handle:
      TLSWrap {
        _parent:
         TCP {
           reading: [Getter/Setter],
           owner:
            Socket {
              connecting: false,
              _hadError: false,
              _handle: [Circular],
              _parent: null,
              _host: null,
              _readableState: [ReadableState],
              readable: true,
              _events: [Object],
              _eventsCount: 3,
              _maxListeners: undefined,
              _writableState: [WritableState],
              writable: true,
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: [Server],
              _server: [Server],
              [Symbol(asyncId)]: 1159,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0 },
           onread:
            { [Function: onread] [length]: 2, [name]: 'onread', [prototype]: [onread] },
           onconnection: null },
        _parentWrap:
         Socket {
           connecting: false,
           _hadError: false,
           _handle:
            TCP {
              reading: [Getter/Setter],
              owner: [Circular],
              onread: [Function],
              onconnection: null },
           _parent: null,
           _host: null,
           _readableState:
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: null,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           _events: { end: [Function], connect: [Function], error: [Function] },
           _eventsCount: 3,
           _maxListeners: undefined,
           _writableState:
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: [Object] },
           writable: true,
           allowHalfOpen: false,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           _server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           [Symbol(asyncId)]: 1159,
           [Symbol(lastWriteQueueSize)]: 0,
           [Symbol(timeout)]: null,
           [Symbol(kBytesRead)]: 0,
           [Symbol(kBytesWritten)]: 0 },
        _secureContext:
         SecureContext {
           context: SecureContext {},
           alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
        reading: true,
        owner: [Circular],
        onread:
         { [Function: onread]
           [length]: 2,
           [name]: 'onread',
           [prototype]: onread { [constructor]: [Circular] } },
        onhandshakestart:
         { [Function: onhandshakestart]
           [length]: 1,
           [name]: 'onhandshakestart',
           [prototype]: onhandshakestart { [constructor]: [Circular] } },
        onhandshakedone:
         { [Function: onhandshakedone]
           [length]: 0,
           [name]: 'onhandshakedone',
           [prototype]: onhandshakedone { [constructor]: [Circular] } },
        onclienthello:
         { [Function: loadSession]
           [length]: 1,
           [name]: 'loadSession',
           [prototype]: loadSession { [constructor]: [Circular] } },
        oncertcb:
         { [Function: loadSNI]
           [length]: 1,
           [name]: 'loadSNI',
           [prototype]: loadSNI { [constructor]: [Circular] } },
        onnewsession:
         { [Function: onnewsession]
           [length]: 2,
           [name]: 'onnewsession',
           [prototype]: onnewsession { [constructor]: [Circular] } },
        lastHandshakeTime: 525673,
        handshakes: 0,
        onerror:
         { [Function: onerror]
           [length]: 1,
           [name]: 'onerror',
           [prototype]: onerror { [constructor]: [Circular] } },
        _consumed: true },
     _parent:
      Socket {
        connecting: false,
        _hadError: false,
        _handle:
         TCP {
           reading: [Getter/Setter],
           owner: [Circular],
           onread:
            { [Function: onread] [length]: 2, [name]: 'onread', [prototype]: [onread] },
           onconnection: null },
        _parent: null,
        _host: null,
        _readableState:
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: null,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           emitClose: false,
           destroyed: false,
           defaultEncoding: 'utf8',
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        _events:
         { end:
            { [Function: onReadableStreamEnd]
              [length]: 0,
              [name]: 'onReadableStreamEnd',
              [prototype]: [onReadableStreamEnd] },
           connect:
            { [Function: bound onceWrapper]
              [length]: 0,
              [name]: 'bound onceWrapper',
              listener: [Function] },
           error: { [Function] [length]: 1, [name]: '' } },
        _eventsCount: 3,
        _maxListeners: undefined,
        _writableState:
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           finalCalled: false,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           destroyed: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: true,
           bufferProcessing: false,
           onwrite:
            { [Function: bound onwrite] [length]: 1, [name]: 'bound onwrite' },
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 0,
           prefinished: false,
           errorEmitted: false,
           emitClose: false,
           bufferedRequestCount: 0,
           corkedRequestsFree: { next: null, entry: null, finish: [Function] } },
        writable: true,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server:
         Server {
           _contexts: [ [length]: 0 ],
           requestCert: false,
           rejectUnauthorized: true,
           key:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
           cert:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
           honorCipherOrder: true,
           ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
           sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
           _sharedCreds:
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           _events:
            { connection: [Function],
              secureConnection: [Function],
              request: [EventEmitter],
              tlsClientError: [Function] },
           _eventsCount: 4,
           _maxListeners: undefined,
           _connections: 1,
           [connections]: [Getter/Setter],
           _handle:
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function] },
           _usingWorkers: false,
           _workers: [ [length]: 0 ],
           _unref: false,
           allowHalfOpen: false,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           maxHeadersCount: null,
           _connectionKey: '6::::8443',
           [Symbol(IncomingMessage)]:
            { [Function: IncomingMessage]
              [length]: 1,
              [name]: 'IncomingMessage',
              [prototype]: [IncomingMessage],
              super_: [Function] },
           [Symbol(ServerResponse)]:
            { [Function: ServerResponse]
              [length]: 1,
              [name]: 'ServerResponse',
              [prototype]: [ServerResponse],
              super_: [Function] },
           [Symbol(handshake-timeout)]: 120000,
           [Symbol(snicallback)]: undefined,
           [Symbol(asyncId)]: 49 },
        _server:
         Server {
           _contexts: [ [length]: 0 ],
           requestCert: false,
           rejectUnauthorized: true,
           key:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
           cert:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
           honorCipherOrder: true,
           ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
           sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
           _sharedCreds:
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           _events:
            { connection: [Function],
              secureConnection: [Function],
              request: [EventEmitter],
              tlsClientError: [Function] },
           _eventsCount: 4,
           _maxListeners: undefined,
           _connections: 1,
           [connections]: [Getter/Setter],
           _handle:
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function] },
           _usingWorkers: false,
           _workers: [ [length]: 0 ],
           _unref: false,
           allowHalfOpen: false,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           maxHeadersCount: null,
           _connectionKey: '6::::8443',
           [Symbol(IncomingMessage)]:
            { [Function: IncomingMessage]
              [length]: 1,
              [name]: 'IncomingMessage',
              [prototype]: [IncomingMessage],
              super_: [Function] },
           [Symbol(ServerResponse)]:
            { [Function: ServerResponse]
              [length]: 1,
              [name]: 'ServerResponse',
              [prototype]: [ServerResponse],
              super_: [Function] },
           [Symbol(handshake-timeout)]: 120000,
           [Symbol(snicallback)]: undefined,
           [Symbol(asyncId)]: 49 },
        [Symbol(asyncId)]: 1159,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0 },
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        emitClose: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite:
         { [Function: bound onwrite] [length]: 1, [name]: 'bound onwrite' },
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        bufferedRequestCount: 0,
        corkedRequestsFree:
         { next: null,
           entry: null,
           finish:
            { [Function: bound onCorkedFinish] [length]: 1, [name]: 'bound onCorkedFinish' } } },
     writable: true,
     allowHalfOpen: false,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        _contexts: [ [length]: 0 ],
        requestCert: false,
        rejectUnauthorized: true,
        key:
         <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
        cert:
         <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
        honorCipherOrder: true,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
        _sharedCreds:
         SecureContext {
           context: SecureContext {},
           alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
        _events:
         { connection:
            { [Function: tlsConnectionListener]
              [length]: 1,
              [name]: 'tlsConnectionListener',
              [prototype]: [tlsConnectionListener] },
           secureConnection:
            { [Function: connectionListener]
              [length]: 1,
              [name]: 'connectionListener',
              [prototype]: [connectionListener] },
           request:
            { [EventEmitter: app]
              [length]: 3,
              [name]: 'app',
              [prototype]: [app],
              [constructor]: [Function],
              _events: [Object],
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function],
              getMaxListeners: [Function],
              emit: [Function],
              addListener: [Function],
              on: [Function],
              prependListener: [Function],
              once: [Function],
              prependOnceListener: [Function],
              removeListener: [Function],
              off: [Function],
              removeAllListeners: [Function],
              listeners: [Function],
              rawListeners: [Function],
              listenerCount: [Function],
              eventNames: [Function],
              init: [Function],
              defaultConfiguration: [Function],
              lazyrouter: [Function],
              handle: [Function],
              use: [Function],
              route: [Function],
              engine: [Function],
              param: [Function],
              set: [Function],
              path: [Function],
              enabled: [Function],
              disabled: [Function],
              enable: [Function],
              disable: [Function],
              acl: [Function],
              bind: [Function],
              checkout: [Function],
              connect: [Function],
              copy: [Function],
              delete: [Function],
              get: [Function],
              head: [Function],
              link: [Function],
              lock: [Function],
              'm-search': [Function],
              merge: [Function],
              mkactivity: [Function],
              mkcalendar: [Function],
              mkcol: [Function],
              move: [Function],
              notify: [Function],
              options: [Function],
              patch: [Function],
              post: [Function],
              propfind: [Function],
              proppatch: [Function],
              purge: [Function],
              put: [Function],
              rebind: [Function],
              report: [Function],
              search: [Function],
              source: [Function],
              subscribe: [Function],
              trace: [Function],
              unbind: [Function],
              unlink: [Function],
              unlock: [Function],
              unsubscribe: [Function],
              all: [Function],
              del: [Function],
              render: [Function],
              listen: [Function],
              request: [IncomingMessage],
              response: [ServerResponse],
              cache: {},
              engines: {},
              settings: [Object],
              locals: [Object],
              mountpath: '/',
              [router]: [Getter],
              _router: [Function] },
           tlsClientError:
            { [Function: addListener]
              [length]: 2,
              [name]: 'addListener',
              [prototype]: [addListener] } },
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        [connections]: [Getter/Setter],
        _handle:
         TCP {
           reading: false,
           owner: [Circular],
           onread: null,
           onconnection:
            { [Function: onconnection]
              [length]: 2,
              [name]: 'onconnection',
              [prototype]: [onconnection] } },
        _usingWorkers: false,
        _workers: [ [length]: 0 ],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        _connectionKey: '6::::8443',
        [Symbol(IncomingMessage)]:
         { [Function: IncomingMessage]
           [length]: 1,
           [name]: 'IncomingMessage',
           [prototype]:
            IncomingMessage {
              [constructor]: [Circular],
              setTimeout: [Function],
              _read: [Function],
              destroy: [Function],
              _addHeaderLines: [Function],
              _addHeaderLine: [Function],
              _dump: [Function] },
           super_:
            { [Function: Readable]
              [length]: 1,
              [name]: 'Readable',
              [prototype]: [Readable],
              ReadableState: [Function],
              super_: [Function],
              _fromList: [Function] } },
        [Symbol(ServerResponse)]:
         { [Function: ServerResponse]
           [length]: 1,
           [name]: 'ServerResponse',
           [prototype]:
            ServerResponse {
              [constructor]: [Circular],
              _finish: [Function],
              statusCode: 200,
              statusMessage: undefined,
              assignSocket: [Function],
              detachSocket: [Function],
              writeContinue: [Function],
              writeProcessing: [Function],
              _implicitHeader: [Function],
              writeHead: [Function],
              writeHeader: [Function] },
           super_:
            { [Function: OutgoingMessage]
              [length]: 0,
              [name]: 'OutgoingMessage',
              [prototype]: [OutgoingMessage],
              super_: [Function] } },
        [Symbol(handshake-timeout)]: 120000,
        [Symbol(snicallback)]: undefined,
        [Symbol(asyncId)]: 49 },
     _server: null,
     ssl:
      TLSWrap {
        _parent:
         TCP {
           reading: [Getter/Setter],
           owner:
            Socket {
              connecting: false,
              _hadError: false,
              _handle: [Circular],
              _parent: null,
              _host: null,
              _readableState: [ReadableState],
              readable: true,
              _events: [Object],
              _eventsCount: 3,
              _maxListeners: undefined,
              _writableState: [WritableState],
              writable: true,
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: [Server],
              _server: [Server],
              [Symbol(asyncId)]: 1159,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0 },
           onread:
            { [Function: onread] [length]: 2, [name]: 'onread', [prototype]: [onread] },
           onconnection: null },
        _parentWrap:
         Socket {
           connecting: false,
           _hadError: false,
           _handle:
            TCP {
              reading: [Getter/Setter],
              owner: [Circular],
              onread: [Function],
              onconnection: null },
           _parent: null,
           _host: null,
           _readableState:
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: null,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           _events: { end: [Function], connect: [Function], error: [Function] },
           _eventsCount: 3,
           _maxListeners: undefined,
           _writableState:
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: [Object] },
           writable: true,
           allowHalfOpen: false,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           _server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           [Symbol(asyncId)]: 1159,
           [Symbol(lastWriteQueueSize)]: 0,
           [Symbol(timeout)]: null,
           [Symbol(kBytesRead)]: 0,
           [Symbol(kBytesWritten)]: 0 },
        _secureContext:
         SecureContext {
           context: SecureContext {},
           alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
        reading: true,
        owner: [Circular],
        onread:
         { [Function: onread]
           [length]: 2,
           [name]: 'onread',
           [prototype]: onread { [constructor]: [Circular] } },
        onhandshakestart:
         { [Function: onhandshakestart]
           [length]: 1,
           [name]: 'onhandshakestart',
           [prototype]: onhandshakestart { [constructor]: [Circular] } },
        onhandshakedone:
         { [Function: onhandshakedone]
           [length]: 0,
           [name]: 'onhandshakedone',
           [prototype]: onhandshakedone { [constructor]: [Circular] } },
        onclienthello:
         { [Function: loadSession]
           [length]: 1,
           [name]: 'loadSession',
           [prototype]: loadSession { [constructor]: [Circular] } },
        oncertcb:
         { [Function: loadSNI]
           [length]: 1,
           [name]: 'loadSNI',
           [prototype]: loadSNI { [constructor]: [Circular] } },
        onnewsession:
         { [Function: onnewsession]
           [length]: 2,
           [name]: 'onnewsession',
           [prototype]: onnewsession { [constructor]: [Circular] } },
        lastHandshakeTime: 525673,
        handshakes: 0,
        onerror:
         { [Function: onerror]
           [length]: 1,
           [name]: 'onerror',
           [prototype]: onerror { [constructor]: [Circular] } },
        _consumed: true },
     _requestCert: false,
     _rejectUnauthorized: true,
     timeout: 120000,
     parser:
      HTTPParser {
        '0':
         { [Function: parserOnHeaders]
           [length]: 2,
           [name]: 'parserOnHeaders',
           [prototype]: parserOnHeaders { [constructor]: [Circular] } },
        '1':
         { [Function: parserOnHeadersComplete]
           [length]: 9,
           [name]: 'parserOnHeadersComplete',
           [prototype]: parserOnHeadersComplete { [constructor]: [Circular] } },
        '2':
         { [Function: parserOnBody]
           [length]: 3,
           [name]: 'parserOnBody',
           [prototype]: parserOnBody { [constructor]: [Circular] } },
        '3':
         { [Function: parserOnMessageComplete]
           [length]: 0,
           [name]: 'parserOnMessageComplete',
           [prototype]: parserOnMessageComplete { [constructor]: [Circular] } },
        '4':
         { [Function: bound onParserExecute] [length]: 1, [name]: 'bound onParserExecute' },
        _headers: [ [length]: 0 ],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming:
         { [Function: bound parserOnIncoming] [length]: 2, [name]: 'bound parserOnIncoming' } },
     on:
      { [Function: socketOnWrap]
        [length]: 2,
        [name]: 'socketOnWrap',
        [prototype]: socketOnWrap { [constructor]: [Circular] } },
     _paused: false,
     _httpMessage:
      ServerResponse {
        _events:
         { finish:
            { [Function: bound resOnFinish] [length]: 0, [name]: 'bound resOnFinish' } },
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [ [length]: 0 ],
        outputEncodings: [ [length]: 0 ],
        outputCallbacks: [ [length]: 0 ],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData:
         { [Function: bound updateOutgoingData] [length]: 1, [name]: 'bound updateOutgoingData' },
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]:
         { 'x-powered-by': [ 'X-Powered-By', 'Express', [length]: 2 ] } },
     [Symbol(res)]:
      TLSWrap {
        _parent:
         TCP {
           reading: [Getter/Setter],
           owner:
            Socket {
              connecting: false,
              _hadError: false,
              _handle: [Circular],
              _parent: null,
              _host: null,
              _readableState: [ReadableState],
              readable: true,
              _events: [Object],
              _eventsCount: 3,
              _maxListeners: undefined,
              _writableState: [WritableState],
              writable: true,
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: [Server],
              _server: [Server],
              [Symbol(asyncId)]: 1159,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0 },
           onread:
            { [Function: onread] [length]: 2, [name]: 'onread', [prototype]: [onread] },
           onconnection: null },
        _parentWrap:
         Socket {
           connecting: false,
           _hadError: false,
           _handle:
            TCP {
              reading: [Getter/Setter],
              owner: [Circular],
              onread: [Function],
              onconnection: null },
           _parent: null,
           _host: null,
           _readableState:
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: null,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           _events: { end: [Function], connect: [Function], error: [Function] },
           _eventsCount: 3,
           _maxListeners: undefined,
           _writableState:
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: [Object] },
           writable: true,
           allowHalfOpen: false,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           _server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           [Symbol(asyncId)]: 1159,
           [Symbol(lastWriteQueueSize)]: 0,
           [Symbol(timeout)]: null,
           [Symbol(kBytesRead)]: 0,
           [Symbol(kBytesWritten)]: 0 },
        _secureContext:
         SecureContext {
           context: SecureContext {},
           alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
        reading: true,
        owner: [Circular],
        onread:
         { [Function: onread]
           [length]: 2,
           [name]: 'onread',
           [prototype]: onread { [constructor]: [Circular] } },
        onhandshakestart:
         { [Function: onhandshakestart]
           [length]: 1,
           [name]: 'onhandshakestart',
           [prototype]: onhandshakestart { [constructor]: [Circular] } },
        onhandshakedone:
         { [Function: onhandshakedone]
           [length]: 0,
           [name]: 'onhandshakedone',
           [prototype]: onhandshakedone { [constructor]: [Circular] } },
        onclienthello:
         { [Function: loadSession]
           [length]: 1,
           [name]: 'loadSession',
           [prototype]: loadSession { [constructor]: [Circular] } },
        oncertcb:
         { [Function: loadSNI]
           [length]: 1,
           [name]: 'loadSNI',
           [prototype]: loadSNI { [constructor]: [Circular] } },
        onnewsession:
         { [Function: onnewsession]
           [length]: 2,
           [name]: 'onnewsession',
           [prototype]: onnewsession { [constructor]: [Circular] } },
        lastHandshakeTime: 525673,
        handshakes: 0,
        onerror:
         { [Function: onerror]
           [length]: 1,
           [name]: 'onerror',
           [prototype]: onerror { [constructor]: [Circular] } },
        _consumed: true },
     [Symbol(asyncId)]: 1160,
     [Symbol(lastWriteQueueSize)]: 0,
     [Symbol(timeout)]:
      Timeout {
        _called: false,
        _idleTimeout: 120000,
        _idlePrev:
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _unrefed: true,
           msecs: 120000,
           _timer: Timer { _list: [Circular] } },
        _idleNext:
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _unrefed: true,
           msecs: 120000,
           _timer: Timer { _list: [Circular] } },
        _idleStart: 525689,
        _onTimeout: { [Function: bound ] [length]: 0, [name]: 'bound ' },
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(unrefed)]: true,
        [Symbol(asyncId)]: 1164,
        [Symbol(triggerId)]: 1160 },
     [Symbol(kBytesRead)]: 0,
     [Symbol(kBytesWritten)]: 0,
     [Symbol(error-emitted)]: false },
  _consuming: true,
  _dumped: false,
  next:
   { [Function: next]
     [length]: 1,
     [name]: 'next',
     [prototype]: next { [constructor]: [Circular] } },
  baseUrl: '',
  originalUrl: '/api/makeCall',
  _parsedUrl:
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/api/makeCall',
     path: '/api/makeCall',
     href: '/api/makeCall',
     _raw: '/api/makeCall' },
  params: {},
  query: {},
  res:
   ServerResponse {
     _events:
      { finish:
         { [Function: bound resOnFinish] [length]: 0, [name]: 'bound resOnFinish' } },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [ [length]: 0 ],
     outputEncodings: [ [length]: 0 ],
     outputCallbacks: [ [length]: 0 ],
     outputSize: 0,
     writable: true,
     _last: false,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket:
      TLSSocket {
        _tlsOptions:
         { secureContext:
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           isServer: true,
           server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           requestCert: false,
           rejectUnauthorized: true,
           handshakeTimeout: 120000,
           ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
           SNICallback:
            { [Function: SNICallback]
              [length]: 2,
              [name]: 'SNICallback',
              [prototype]: [SNICallback] } },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: '127.0.0.1',
        alpnProtocol: false,
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events:
         { close:
            [ [Function], [Function], [Function], [Function], [length]: 4 ],
           end: [ [Function], [Function], [length]: 2 ],
           secure:
            { [Function: onSocketSecure]
              [length]: 0,
              [name]: 'onSocketSecure',
              [prototype]: [onSocketSecure] },
           _tlsError:
            { [Function: onSocketTLSError]
              [length]: 1,
              [name]: 'onSocketTLSError',
              [prototype]: [onSocketTLSError] },
           drain: [ [Function], [Function], [length]: 2 ],
           timeout:
            { [Function: socketOnTimeout]
              [length]: 0,
              [name]: 'socketOnTimeout',
              [prototype]: [socketOnTimeout] },
           data:
            { [Function: bound socketOnData] [length]: 1, [name]: 'bound socketOnData' },
           error:
            { [Function: socketOnError]
              [length]: 1,
              [name]: 'socketOnError',
              [prototype]: [socketOnError] },
           resume:
            { [Function: onSocketResume]
              [length]: 0,
              [name]: 'onSocketResume',
              [prototype]: [onSocketResume] },
           pause:
            { [Function: onSocketPause]
              [length]: 0,
              [name]: 'onSocketPause',
              [prototype]: [onSocketPause] } },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _handle:
         TLSWrap {
           _parent:
            TCP {
              reading: [Getter/Setter],
              owner: [Socket],
              onread: [Function],
              onconnection: null },
           _parentWrap:
            Socket {
              connecting: false,
              _hadError: false,
              _handle: [TCP],
              _parent: null,
              _host: null,
              _readableState: [ReadableState],
              readable: true,
              _events: [Object],
              _eventsCount: 3,
              _maxListeners: undefined,
              _writableState: [WritableState],
              writable: true,
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: [Server],
              _server: [Server],
              [Symbol(asyncId)]: 1159,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0 },
           _secureContext:
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           reading: true,
           owner: [Circular],
           onread:
            { [Function: onread] [length]: 2, [name]: 'onread', [prototype]: [onread] },
           onhandshakestart:
            { [Function: onhandshakestart]
              [length]: 1,
              [name]: 'onhandshakestart',
              [prototype]: [onhandshakestart] },
           onhandshakedone:
            { [Function: onhandshakedone]
              [length]: 0,
              [name]: 'onhandshakedone',
              [prototype]: [onhandshakedone] },
           onclienthello:
            { [Function: loadSession]
              [length]: 1,
              [name]: 'loadSession',
              [prototype]: [loadSession] },
           oncertcb:
            { [Function: loadSNI] [length]: 1, [name]: 'loadSNI', [prototype]: [loadSNI] },
           onnewsession:
            { [Function: onnewsession]
              [length]: 2,
              [name]: 'onnewsession',
              [prototype]: [onnewsession] },
           lastHandshakeTime: 525673,
           handshakes: 0,
           onerror:
            { [Function: onerror] [length]: 1, [name]: 'onerror', [prototype]: [onerror] },
           _consumed: true },
        _parent:
         Socket {
           connecting: false,
           _hadError: false,
           _handle:
            TCP {
              reading: [Getter/Setter],
              owner: [Circular],
              onread: [Function],
              onconnection: null },
           _parent: null,
           _host: null,
           _readableState:
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: null,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           _events: { end: [Function], connect: [Function], error: [Function] },
           _eventsCount: 3,
           _maxListeners: undefined,
           _writableState:
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: [Object] },
           writable: true,
           allowHalfOpen: false,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           _server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           [Symbol(asyncId)]: 1159,
           [Symbol(lastWriteQueueSize)]: 0,
           [Symbol(timeout)]: null,
           [Symbol(kBytesRead)]: 0,
           [Symbol(kBytesWritten)]: 0 },
        _host: null,
        _readableState:
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: true,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           emitClose: false,
           destroyed: false,
           defaultEncoding: 'utf8',
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        _maxListeners: undefined,
        _writableState:
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           finalCalled: false,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           destroyed: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: true,
           bufferProcessing: false,
           onwrite:
            { [Function: bound onwrite] [length]: 1, [name]: 'bound onwrite' },
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 0,
           prefinished: false,
           errorEmitted: false,
           emitClose: false,
           bufferedRequestCount: 0,
           corkedRequestsFree: { next: null, entry: null, finish: [Function] } },
        writable: true,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server:
         Server {
           _contexts: [ [length]: 0 ],
           requestCert: false,
           rejectUnauthorized: true,
           key:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
           cert:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
           honorCipherOrder: true,
           ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
           sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
           _sharedCreds:
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           _events:
            { connection: [Function],
              secureConnection: [Function],
              request: [EventEmitter],
              tlsClientError: [Function] },
           _eventsCount: 4,
           _maxListeners: undefined,
           _connections: 1,
           [connections]: [Getter/Setter],
           _handle:
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function] },
           _usingWorkers: false,
           _workers: [ [length]: 0 ],
           _unref: false,
           allowHalfOpen: false,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           maxHeadersCount: null,
           _connectionKey: '6::::8443',
           [Symbol(IncomingMessage)]:
            { [Function: IncomingMessage]
              [length]: 1,
              [name]: 'IncomingMessage',
              [prototype]: [IncomingMessage],
              super_: [Function] },
           [Symbol(ServerResponse)]:
            { [Function: ServerResponse]
              [length]: 1,
              [name]: 'ServerResponse',
              [prototype]: [ServerResponse],
              super_: [Function] },
           [Symbol(handshake-timeout)]: 120000,
           [Symbol(snicallback)]: undefined,
           [Symbol(asyncId)]: 49 },
        _server: null,
        ssl:
         TLSWrap {
           _parent:
            TCP {
              reading: [Getter/Setter],
              owner: [Socket],
              onread: [Function],
              onconnection: null },
           _parentWrap:
            Socket {
              connecting: false,
              _hadError: false,
              _handle: [TCP],
              _parent: null,
              _host: null,
              _readableState: [ReadableState],
              readable: true,
              _events: [Object],
              _eventsCount: 3,
              _maxListeners: undefined,
              _writableState: [WritableState],
              writable: true,
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: [Server],
              _server: [Server],
              [Symbol(asyncId)]: 1159,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0 },
           _secureContext:
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           reading: true,
           owner: [Circular],
           onread:
            { [Function: onread] [length]: 2, [name]: 'onread', [prototype]: [onread] },
           onhandshakestart:
            { [Function: onhandshakestart]
              [length]: 1,
              [name]: 'onhandshakestart',
              [prototype]: [onhandshakestart] },
           onhandshakedone:
            { [Function: onhandshakedone]
              [length]: 0,
              [name]: 'onhandshakedone',
              [prototype]: [onhandshakedone] },
           onclienthello:
            { [Function: loadSession]
              [length]: 1,
              [name]: 'loadSession',
              [prototype]: [loadSession] },
           oncertcb:
            { [Function: loadSNI] [length]: 1, [name]: 'loadSNI', [prototype]: [loadSNI] },
           onnewsession:
            { [Function: onnewsession]
              [length]: 2,
              [name]: 'onnewsession',
              [prototype]: [onnewsession] },
           lastHandshakeTime: 525673,
           handshakes: 0,
           onerror:
            { [Function: onerror] [length]: 1, [name]: 'onerror', [prototype]: [onerror] },
           _consumed: true },
        _requestCert: false,
        _rejectUnauthorized: true,
        timeout: 120000,
        parser:
         HTTPParser {
           '0':
            { [Function: parserOnHeaders]
              [length]: 2,
              [name]: 'parserOnHeaders',
              [prototype]: [parserOnHeaders] },
           '1':
            { [Function: parserOnHeadersComplete]
              [length]: 9,
              [name]: 'parserOnHeadersComplete',
              [prototype]: [parserOnHeadersComplete] },
           '2':
            { [Function: parserOnBody]
              [length]: 3,
              [name]: 'parserOnBody',
              [prototype]: [parserOnBody] },
           '3':
            { [Function: parserOnMessageComplete]
              [length]: 0,
              [name]: 'parserOnMessageComplete',
              [prototype]: [parserOnMessageComplete] },
           '4':
            { [Function: bound onParserExecute] [length]: 1, [name]: 'bound onParserExecute' },
           _headers: [ [length]: 0 ],
           _url: '',
           _consumed: true,
           socket: [Circular],
           incoming: [Circular],
           outgoing: null,
           maxHeaderPairs: 2000,
           onIncoming:
            { [Function: bound parserOnIncoming] [length]: 2, [name]: 'bound parserOnIncoming' } },
        on:
         { [Function: socketOnWrap]
           [length]: 2,
           [name]: 'socketOnWrap',
           [prototype]: socketOnWrap { [constructor]: [Circular] } },
        _paused: false,
        _httpMessage: [Circular],
        [Symbol(res)]:
         TLSWrap {
           _parent:
            TCP {
              reading: [Getter/Setter],
              owner: [Socket],
              onread: [Function],
              onconnection: null },
           _parentWrap:
            Socket {
              connecting: false,
              _hadError: false,
              _handle: [TCP],
              _parent: null,
              _host: null,
              _readableState: [ReadableState],
              readable: true,
              _events: [Object],
              _eventsCount: 3,
              _maxListeners: undefined,
              _writableState: [WritableState],
              writable: true,
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: [Server],
              _server: [Server],
              [Symbol(asyncId)]: 1159,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0 },
           _secureContext:
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           reading: true,
           owner: [Circular],
           onread:
            { [Function: onread] [length]: 2, [name]: 'onread', [prototype]: [onread] },
           onhandshakestart:
            { [Function: onhandshakestart]
              [length]: 1,
              [name]: 'onhandshakestart',
              [prototype]: [onhandshakestart] },
           onhandshakedone:
            { [Function: onhandshakedone]
              [length]: 0,
              [name]: 'onhandshakedone',
              [prototype]: [onhandshakedone] },
           onclienthello:
            { [Function: loadSession]
              [length]: 1,
              [name]: 'loadSession',
              [prototype]: [loadSession] },
           oncertcb:
            { [Function: loadSNI] [length]: 1, [name]: 'loadSNI', [prototype]: [loadSNI] },
           onnewsession:
            { [Function: onnewsession]
              [length]: 2,
              [name]: 'onnewsession',
              [prototype]: [onnewsession] },
           lastHandshakeTime: 525673,
           handshakes: 0,
           onerror:
            { [Function: onerror] [length]: 1, [name]: 'onerror', [prototype]: [onerror] },
           _consumed: true },
        [Symbol(asyncId)]: 1160,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]:
         Timeout {
           _called: false,
           _idleTimeout: 120000,
           _idlePrev:
            TimersList {
              _idleNext: [Circular],
              _idlePrev: [Circular],
              _unrefed: true,
              msecs: 120000,
              _timer: [Timer] },
           _idleNext:
            TimersList {
              _idleNext: [Circular],
              _idlePrev: [Circular],
              _unrefed: true,
              msecs: 120000,
              _timer: [Timer] },
           _idleStart: 525689,
           _onTimeout: { [Function: bound ] [length]: 0, [name]: 'bound ' },
           _timerArgs: undefined,
           _repeat: null,
           _destroyed: false,
           [Symbol(unrefed)]: true,
           [Symbol(asyncId)]: 1164,
           [Symbol(triggerId)]: 1160 },
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(error-emitted)]: false },
     connection:
      TLSSocket {
        _tlsOptions:
         { secureContext:
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           isServer: true,
           server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           requestCert: false,
           rejectUnauthorized: true,
           handshakeTimeout: 120000,
           ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
           SNICallback:
            { [Function: SNICallback]
              [length]: 2,
              [name]: 'SNICallback',
              [prototype]: [SNICallback] } },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: '127.0.0.1',
        alpnProtocol: false,
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events:
         { close:
            [ [Function], [Function], [Function], [Function], [length]: 4 ],
           end: [ [Function], [Function], [length]: 2 ],
           secure:
            { [Function: onSocketSecure]
              [length]: 0,
              [name]: 'onSocketSecure',
              [prototype]: [onSocketSecure] },
           _tlsError:
            { [Function: onSocketTLSError]
              [length]: 1,
              [name]: 'onSocketTLSError',
              [prototype]: [onSocketTLSError] },
           drain: [ [Function], [Function], [length]: 2 ],
           timeout:
            { [Function: socketOnTimeout]
              [length]: 0,
              [name]: 'socketOnTimeout',
              [prototype]: [socketOnTimeout] },
           data:
            { [Function: bound socketOnData] [length]: 1, [name]: 'bound socketOnData' },
           error:
            { [Function: socketOnError]
              [length]: 1,
              [name]: 'socketOnError',
              [prototype]: [socketOnError] },
           resume:
            { [Function: onSocketResume]
              [length]: 0,
              [name]: 'onSocketResume',
              [prototype]: [onSocketResume] },
           pause:
            { [Function: onSocketPause]
              [length]: 0,
              [name]: 'onSocketPause',
              [prototype]: [onSocketPause] } },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _handle:
         TLSWrap {
           _parent:
            TCP {
              reading: [Getter/Setter],
              owner: [Socket],
              onread: [Function],
              onconnection: null },
           _parentWrap:
            Socket {
              connecting: false,
              _hadError: false,
              _handle: [TCP],
              _parent: null,
              _host: null,
              _readableState: [ReadableState],
              readable: true,
              _events: [Object],
              _eventsCount: 3,
              _maxListeners: undefined,
              _writableState: [WritableState],
              writable: true,
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: [Server],
              _server: [Server],
              [Symbol(asyncId)]: 1159,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0 },
           _secureContext:
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           reading: true,
           owner: [Circular],
           onread:
            { [Function: onread] [length]: 2, [name]: 'onread', [prototype]: [onread] },
           onhandshakestart:
            { [Function: onhandshakestart]
              [length]: 1,
              [name]: 'onhandshakestart',
              [prototype]: [onhandshakestart] },
           onhandshakedone:
            { [Function: onhandshakedone]
              [length]: 0,
              [name]: 'onhandshakedone',
              [prototype]: [onhandshakedone] },
           onclienthello:
            { [Function: loadSession]
              [length]: 1,
              [name]: 'loadSession',
              [prototype]: [loadSession] },
           oncertcb:
            { [Function: loadSNI] [length]: 1, [name]: 'loadSNI', [prototype]: [loadSNI] },
           onnewsession:
            { [Function: onnewsession]
              [length]: 2,
              [name]: 'onnewsession',
              [prototype]: [onnewsession] },
           lastHandshakeTime: 525673,
           handshakes: 0,
           onerror:
            { [Function: onerror] [length]: 1, [name]: 'onerror', [prototype]: [onerror] },
           _consumed: true },
        _parent:
         Socket {
           connecting: false,
           _hadError: false,
           _handle:
            TCP {
              reading: [Getter/Setter],
              owner: [Circular],
              onread: [Function],
              onconnection: null },
           _parent: null,
           _host: null,
           _readableState:
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: null,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              emitClose: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           _events: { end: [Function], connect: [Function], error: [Function] },
           _eventsCount: 3,
           _maxListeners: undefined,
           _writableState:
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: [Object] },
           writable: true,
           allowHalfOpen: false,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           _server:
            Server {
              _contexts: [Array],
              requestCert: false,
              rejectUnauthorized: true,
              key:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
              cert:
               <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
              honorCipherOrder: true,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
              _sharedCreds: [SecureContext],
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              [connections]: [Getter/Setter],
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [Array],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              _connectionKey: '6::::8443',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(handshake-timeout)]: 120000,
              [Symbol(snicallback)]: undefined,
              [Symbol(asyncId)]: 49 },
           [Symbol(asyncId)]: 1159,
           [Symbol(lastWriteQueueSize)]: 0,
           [Symbol(timeout)]: null,
           [Symbol(kBytesRead)]: 0,
           [Symbol(kBytesWritten)]: 0 },
        _host: null,
        _readableState:
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: true,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           emitClose: false,
           destroyed: false,
           defaultEncoding: 'utf8',
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        _maxListeners: undefined,
        _writableState:
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           finalCalled: false,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           destroyed: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: true,
           bufferProcessing: false,
           onwrite:
            { [Function: bound onwrite] [length]: 1, [name]: 'bound onwrite' },
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 0,
           prefinished: false,
           errorEmitted: false,
           emitClose: false,
           bufferedRequestCount: 0,
           corkedRequestsFree: { next: null, entry: null, finish: [Function] } },
        writable: true,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server:
         Server {
           _contexts: [ [length]: 0 ],
           requestCert: false,
           rejectUnauthorized: true,
           key:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 4d 69 63 72 6f 73 6f 66 74 20 4c 6f 63 61 6c 20 4b 65 79 20 73 65 74 3a 20 3c 4e 6f 20 56 61 ... >,
           cert:
            <Buffer 42 61 67 20 41 74 74 72 69 62 75 74 65 73 0a 20 20 20 20 6c 6f 63 61 6c 4b 65 79 49 44 3a 20 30 31 20 30 30 20 30 30 20 30 30 20 0a 20 20 20 20 66 72 ... >,
           honorCipherOrder: true,
           ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
           sessionIdContext: '58f72b91490c6067bf6dea94ce02022a',
           _sharedCreds:
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           _events:
            { connection: [Function],
              secureConnection: [Function],
              request: [EventEmitter],
              tlsClientError: [Function] },
           _eventsCount: 4,
           _maxListeners: undefined,
           _connections: 1,
           [connections]: [Getter/Setter],
           _handle:
            TCP {
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function] },
           _usingWorkers: false,
           _workers: [ [length]: 0 ],
           _unref: false,
           allowHalfOpen: false,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           keepAliveTimeout: 5000,
           maxHeadersCount: null,
           _connectionKey: '6::::8443',
           [Symbol(IncomingMessage)]:
            { [Function: IncomingMessage]
              [length]: 1,
              [name]: 'IncomingMessage',
              [prototype]: [IncomingMessage],
              super_: [Function] },
           [Symbol(ServerResponse)]:
            { [Function: ServerResponse]
              [length]: 1,
              [name]: 'ServerResponse',
              [prototype]: [ServerResponse],
              super_: [Function] },
           [Symbol(handshake-timeout)]: 120000,
           [Symbol(snicallback)]: undefined,
           [Symbol(asyncId)]: 49 },
        _server: null,
        ssl:
         TLSWrap {
           _parent:
            TCP {
              reading: [Getter/Setter],
              owner: [Socket],
              onread: [Function],
              onconnection: null },
           _parentWrap:
            Socket {
              connecting: false,
              _hadError: false,
              _handle: [TCP],
              _parent: null,
              _host: null,
              _readableState: [ReadableState],
              readable: true,
              _events: [Object],
              _eventsCount: 3,
              _maxListeners: undefined,
              _writableState: [WritableState],
              writable: true,
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: [Server],
              _server: [Server],
              [Symbol(asyncId)]: 1159,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0 },
           _secureContext:
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           reading: true,
           owner: [Circular],
           onread:
            { [Function: onread] [length]: 2, [name]: 'onread', [prototype]: [onread] },
           onhandshakestart:
            { [Function: onhandshakestart]
              [length]: 1,
              [name]: 'onhandshakestart',
              [prototype]: [onhandshakestart] },
           onhandshakedone:
            { [Function: onhandshakedone]
              [length]: 0,
              [name]: 'onhandshakedone',
              [prototype]: [onhandshakedone] },
           onclienthello:
            { [Function: loadSession]
              [length]: 1,
              [name]: 'loadSession',
              [prototype]: [loadSession] },
           oncertcb:
            { [Function: loadSNI] [length]: 1, [name]: 'loadSNI', [prototype]: [loadSNI] },
           onnewsession:
            { [Function: onnewsession]
              [length]: 2,
              [name]: 'onnewsession',
              [prototype]: [onnewsession] },
           lastHandshakeTime: 525673,
           handshakes: 0,
           onerror:
            { [Function: onerror] [length]: 1, [name]: 'onerror', [prototype]: [onerror] },
           _consumed: true },
        _requestCert: false,
        _rejectUnauthorized: true,
        timeout: 120000,
        parser:
         HTTPParser {
           '0':
            { [Function: parserOnHeaders]
              [length]: 2,
              [name]: 'parserOnHeaders',
              [prototype]: [parserOnHeaders] },
           '1':
            { [Function: parserOnHeadersComplete]
              [length]: 9,
              [name]: 'parserOnHeadersComplete',
              [prototype]: [parserOnHeadersComplete] },
           '2':
            { [Function: parserOnBody]
              [length]: 3,
              [name]: 'parserOnBody',
              [prototype]: [parserOnBody] },
           '3':
            { [Function: parserOnMessageComplete]
              [length]: 0,
              [name]: 'parserOnMessageComplete',
              [prototype]: [parserOnMessageComplete] },
           '4':
            { [Function: bound onParserExecute] [length]: 1, [name]: 'bound onParserExecute' },
           _headers: [ [length]: 0 ],
           _url: '',
           _consumed: true,
           socket: [Circular],
           incoming: [Circular],
           outgoing: null,
           maxHeaderPairs: 2000,
           onIncoming:
            { [Function: bound parserOnIncoming] [length]: 2, [name]: 'bound parserOnIncoming' } },
        on:
         { [Function: socketOnWrap]
           [length]: 2,
           [name]: 'socketOnWrap',
           [prototype]: socketOnWrap { [constructor]: [Circular] } },
        _paused: false,
        _httpMessage: [Circular],
        [Symbol(res)]:
         TLSWrap {
           _parent:
            TCP {
              reading: [Getter/Setter],
              owner: [Socket],
              onread: [Function],
              onconnection: null },
           _parentWrap:
            Socket {
              connecting: false,
              _hadError: false,
              _handle: [TCP],
              _parent: null,
              _host: null,
              _readableState: [ReadableState],
              readable: true,
              _events: [Object],
              _eventsCount: 3,
              _maxListeners: undefined,
              _writableState: [WritableState],
              writable: true,
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: [Server],
              _server: [Server],
              [Symbol(asyncId)]: 1159,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0 },
           _secureContext:
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           reading: true,
           owner: [Circular],
           onread:
            { [Function: onread] [length]: 2, [name]: 'onread', [prototype]: [onread] },
           onhandshakestart:
            { [Function: onhandshakestart]
              [length]: 1,
              [name]: 'onhandshakestart',
              [prototype]: [onhandshakestart] },
           onhandshakedone:
            { [Function: onhandshakedone]
              [length]: 0,
              [name]: 'onhandshakedone',
              [prototype]: [onhandshakedone] },
           onclienthello:
            { [Function: loadSession]
              [length]: 1,
              [name]: 'loadSession',
              [prototype]: [loadSession] },
           oncertcb:
            { [Function: loadSNI] [length]: 1, [name]: 'loadSNI', [prototype]: [loadSNI] },
           onnewsession:
            { [Function: onnewsession]
              [length]: 2,
              [name]: 'onnewsession',
              [prototype]: [onnewsession] },
           lastHandshakeTime: 525673,
           handshakes: 0,
           onerror:
            { [Function: onerror] [length]: 1, [name]: 'onerror', [prototype]: [onerror] },
           _consumed: true },
        [Symbol(asyncId)]: 1160,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]:
         Timeout {
           _called: false,
           _idleTimeout: 120000,
           _idlePrev:
            TimersList {
              _idleNext: [Circular],
              _idlePrev: [Circular],
              _unrefed: true,
              msecs: 120000,
              _timer: [Timer] },
           _idleNext:
            TimersList {
              _idleNext: [Circular],
              _idlePrev: [Circular],
              _unrefed: true,
              msecs: 120000,
              _timer: [Timer] },
           _idleStart: 525689,
           _onTimeout: { [Function: bound ] [length]: 0, [name]: 'bound ' },
           _timerArgs: undefined,
           _repeat: null,
           _destroyed: false,
           [Symbol(unrefed)]: true,
           [Symbol(asyncId)]: 1164,
           [Symbol(triggerId)]: 1160 },
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(error-emitted)]: false },
     _header: null,
     _onPendingData:
      { [Function: bound updateOutgoingData] [length]: 1, [name]: 'bound updateOutgoingData' },
     _sent100: false,
     _expect_continue: false,
     req: [Circular],
     locals: {},
     [Symbol(isCorked)]: false,
     [Symbol(outHeadersKey)]:
      { 'x-powered-by': [ 'X-Powered-By', 'Express', [length]: 2 ] } },
  body: { source: '101', destination: '102' },
  _body: true,
  length: undefined,
  route:
   Route {
     path: '/api/makeCall',
     stack:
      [ Layer {
          handle:
           { [Function]
             [length]: 2,
             [name]: '',
             [arguments]: [Object],
             [caller]: null,
             [prototype]: [Object] },
          name: '<anonymous>',
          params: undefined,
          path: undefined,
          keys: [ [length]: 0 ],
          regexp:
           { /^\/?$/i [lastIndex]: 0, fast_star: false, fast_slash: false },
          method: 'post' },
        [length]: 1 ],
     methods: { post: true } } }
13:53:53 11-2019-01 info: Calling : callController.makeCall with source : 101 , destination : 102
13:53:53 11-2019-01 info: Function execution start : callController.makeCall()
13:53:53 11-2019-01 debug: source : 101, destination : 102
13:53:53 11-2019-01 info: Calling OAI middleware
13:53:53 11-2019-01 info: Function execution start : oai.makeCall()
13:53:53 11-2019-01 debug: source : 101 , destination : 102
13:53:53 11-2019-01 info: Creating connection with SV9100
13:53:53 11-2019-01 info: Flag = 0
13:53:53 11-2019-01 debug: Client socket to OAI object : Socket {
  connecting: true,
  _hadError: false,
  _handle:
   TCP {
     reading: false,
     owner: [Circular],
     onread:
      { [Function: onread]
        [length]: 2,
        [name]: 'onread',
        [prototype]: onread { [constructor]: [Circular] } },
     onconnection: null },
  _parent: null,
  _host: null,
  _readableState:
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: true,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: true,
     emitClose: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: false,
     decoder: null,
     encoding: null },
  readable: false,
  _events:
   { end:
      [ { [Function: onReadableStreamEnd]
          [length]: 0,
          [name]: 'onReadableStreamEnd',
          [prototype]: onReadableStreamEnd { [constructor]: [Circular] } },
        { [Function] [length]: 0, [name]: '' },
        [length]: 2 ],
     connect:
      { [Function]
        [length]: 0,
        [name]: '',
        [arguments]: null,
        [caller]: null,
        [prototype]: { [constructor]: [Circular] } },
     data:
      { [Function]
        [length]: 1,
        [name]: '',
        [arguments]: null,
        [caller]: null,
        [prototype]: { [constructor]: [Circular] } },
     error: { [Function] [length]: 1, [name]: '' } },
  _eventsCount: 4,
  _maxListeners: undefined,
  _writableState:
   WritableState {
     objectMode: false,
     highWaterMark: 16384,
     finalCalled: false,
     needDrain: false,
     ending: false,
     ended: false,
     finished: false,
     destroyed: false,
     decodeStrings: false,
     defaultEncoding: 'utf8',
     length: 0,
     writing: false,
     corked: 0,
     sync: true,
     bufferProcessing: false,
     onwrite:
      { [Function: bound onwrite] [length]: 1, [name]: 'bound onwrite' },
     writecb: null,
     writelen: 0,
     bufferedRequest: null,
     lastBufferedRequest: null,
     pendingcb: 0,
     prefinished: false,
     errorEmitted: false,
     emitClose: false,
     bufferedRequestCount: 0,
     corkedRequestsFree:
      { next: null,
        entry: null,
        finish:
         { [Function: bound onCorkedFinish] [length]: 1, [name]: 'bound onCorkedFinish' } } },
  writable: true,
  allowHalfOpen: false,
  _sockname: null,
  _pendingData: null,
  _pendingEncoding: '',
  server: null,
  _server: null,
  [Symbol(asyncId)]: 1220,
  [Symbol(lastWriteQueueSize)]: 0,
  [Symbol(timeout)]: null,
  [Symbol(kBytesRead)]: 0,
  [Symbol(kBytesWritten)]: 0 }
13:53:53 11-2019-01 info: Connected to SV9100
13:53:53 11-2019-01 info: Write connect_to_sv9100
13:53:53 11-2019-01 debug: connect_to_sv9100 => <Buffer 60 1c 80 02 00 00 a3 03 06 01 00 a4 11 08 0f 4e 45 43 20 43 26 43 20 28 4f 41 49 29 20 58>
13:53:53 11-2019-01 debug: Flag set to = 1
13:53:53 11-2019-01 info: Data received
13:53:53 11-2019-01 info: Flag = 1
13:53:53 11-2019-01 debug: DATA => <Buffer 61 0c 80 02 00 00 81 01 00 a3 03 06 01 00>
13:53:53 11-2019-01 info: Write switch_control_to_sv9100
13:53:53 11-2019-01 debug: switch_control_to_sv9100 => <Buffer a1 15 30 13 02 01 07 02 01 28 30 0b a0 06 04 01 00 04 01 01 82 01 69>
13:53:53 11-2019-01 debug: Flag set to = 2
13:53:53 11-2019-01 info: Data received
13:53:53 11-2019-01 info: Flag = 2
13:53:53 11-2019-01 debug: DATA => <Buffer a2 0f 30 0d 02 01 07 30 08 a0 06 04 01 00 04 01 01>
13:53:53 11-2019-01 info: Write makecall_to_sv9100
13:53:53 11-2019-01 debug: makecall_to_sv9100 => <Buffer a1 32 30 30 02 01 0f 02 01 69 30 28 a0 06 04 01 01 04 01 01 a2 0e a0 0c 04 01 01 04 02 00 00 04 03 01 0a 01 a3 05 80 03 01 0a 02 84 01 02 85 01 03 86 ... >
13:53:53 11-2019-01 debug: Flag set to = 3
13:53:53 11-2019-01 info: Data received
13:53:53 11-2019-01 info: Flag = 3
13:53:53 11-2019-01 debug: DATA => <Buffer a2 2d 30 2b 02 01 0f 30 26 a0 06 04 01 01 04 01 01 a1 1c a0 0c 04 01 01 04 02 00 0a 04 03 01 0a 01 a1 0c 04 01 01 04 02 00 0a 04 03 01 0a 02>
13:53:53 11-2019-01 info: Sending callback
13:53:53 11-2019-01 debug: Flag set to = 0
13:53:53 11-2019-01 debug: Result object : '1'
13:53:53 11-2019-01 info: OAI middleware sends success
13:53:53 11-2019-01 debug: Result object : '1'
13:53:53 11-2019-01 info: Sending response for HTTPS request => /api/makeCall :  Making Call
13:54:09 11-2019-01 info: Data received
13:54:09 11-2019-01 debug: Default case
13:54:25 11-2019-01 info: Data received
13:54:25 11-2019-01 debug: Default case
13:54:41 11-2019-01 error: Error object => { Error: read ECONNRESET
    at TCP.onread (net.js:660:25)
  [stack]: 'Error: read ECONNRESET\n    at TCP.onread (net.js:660:25)',
  [message]: 'read ECONNRESET',
  errno: 'ECONNRESET',
  code: 'ECONNRESET',
  syscall: 'read' }
